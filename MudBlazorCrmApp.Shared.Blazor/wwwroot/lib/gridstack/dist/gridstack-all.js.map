{"version":3,"file":"gridstack-all.js","mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAmB,UAAID,IAEvBD,EAAgB,UAAIC,GACrB,CATD,CASGK,MAAM,uBCRT,IAAIC,EAAsB,CCA1BA,EAAwB,CAACL,EAASM,KACjC,IAAI,IAAIC,KAAOD,EACXD,EAAoBG,EAAEF,EAAYC,KAASF,EAAoBG,EAAER,EAASO,IAC5EE,OAAOC,eAAeV,EAASO,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDF,EAAwB,CAACQ,EAAKC,IAAUL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,kCCqD3E,MAAMI,EAGXC,mBAAmBC,EAAuBtB,EAA+BuB,UACvE,GAAmB,iBAARD,EAAkB,CAC3B,MAAME,EAAO,mBAAoBxB,EAAQA,OAAmByB,EAK5D,GAAID,IAAQE,OAAOJ,EAAI,IAAK,CAC1B,MAAMK,EAAKH,EAAII,eAAeN,GAC9B,OAAOK,EAAK,CAACA,GAAM,GAGrB,IAAIE,EAAO7B,EAAK8B,iBAAiBR,GAKjC,OAJKO,EAAKE,QAAqB,MAAXT,EAAI,IAAyB,MAAXA,EAAI,KACxCO,EAAO7B,EAAK8B,iBAAiB,IAAMR,GAC9BO,EAAKE,SAAUF,EAAO7B,EAAK8B,iBAAiB,IAAMR,KAElDU,MAAMC,KAAKJ,GAEpB,MAAO,CAACP,EACV,CAGAD,kBAAkBC,EAAuBtB,EAA+BuB,UACtE,GAAmB,iBAARD,EAAkB,CAC3B,MAAME,EAAO,mBAAoBxB,EAAQA,OAAmByB,EAC5D,IAAKH,EAAIS,OAAQ,OAAO,KACxB,GAAIP,GAAkB,MAAXF,EAAI,GACb,OAAOE,EAAII,eAAeN,EAAIY,UAAU,IAE1C,GAAe,MAAXZ,EAAI,IAAyB,MAAXA,EAAI,IAAyB,MAAXA,EAAI,GAC1C,OAAOtB,EAAKmC,cAAcb,GAI5B,GAAIE,IAAQE,OAAOJ,EAAI,IACrB,OAAOE,EAAII,eAAeN,GAI5B,IAAIK,EAAK3B,EAAKmC,cAAcb,GAG5B,OAFIE,IAAQG,IAAMA,EAAKH,EAAII,eAAeN,IACrCK,IAAMA,EAAK3B,EAAKmC,cAAc,IAAMb,IAClCK,EAET,OAAOL,CACT,CAGAD,2BAA2Be,GACzB,OAAOA,GAAGC,SAAWD,EAAEE,eAAkBF,EAAEC,KAAKE,KAAKD,gBAAqC,IAApBF,EAAEE,cAC1E,CAGAjB,qBAAqBmB,EAAsBC,GACzC,QAASD,EAAEE,GAAKD,EAAEC,EAAID,EAAEE,GAAKH,EAAEE,EAAIF,EAAEG,GAAKF,EAAEC,GAAKF,EAAEI,EAAIJ,EAAEK,GAAKJ,EAAEG,GAAKJ,EAAEI,GAAKH,EAAEG,EAAIH,EAAEI,EACtF,CAGAxB,kBAAkBmB,EAAsBC,GACtC,OAAOrB,EAAM0B,cAAcN,EAAG,CAACI,EAAGH,EAAEG,EAAE,GAAKF,EAAGD,EAAEC,EAAE,GAAKG,EAAGJ,EAAEI,EAAE,EAAGF,EAAGF,EAAEE,EAAE,GAC1E,CAGAtB,qBAAqBmB,EAAsBC,GACzC,IAAIM,EAAMP,EAAEI,EAAIH,EAAEG,EAAKJ,EAAEI,EAAIH,EAAEG,EAC3BI,EAAMR,EAAEI,EAAEJ,EAAEK,EAAIJ,EAAEG,EAAEH,EAAEI,EAAKL,EAAEI,EAAEJ,EAAEK,EAAIJ,EAAEG,EAAEH,EAAEI,EAC/C,GAAIG,GAAMD,EAAI,OAAO,EACrB,IAAIE,EAAMT,EAAEE,EAAID,EAAEC,EAAKF,EAAEE,EAAID,EAAEC,EAC3BQ,EAAMV,EAAEE,EAAEF,EAAEG,EAAIF,EAAEC,EAAED,EAAEE,EAAKH,EAAEE,EAAEF,EAAEG,EAAIF,EAAEC,EAAED,EAAEE,EAC/C,OAAIO,GAAMD,EAAW,GACbD,EAAGD,IAAOG,EAAGD,EACvB,CAGA5B,YAAYmB,GACV,OAAOA,EAAEK,EAAIL,EAAEG,CACjB,CAQAtB,YAAY8B,EAAwBC,EAAc,EAAGC,GAEnD,OADAA,EAASA,GAAUF,EAAMG,QAAO,CAACC,EAAKnB,IAAMoB,KAAKC,IAAIrB,EAAEQ,EAAIR,EAAES,EAAGU,IAAM,IAAM,IAC/D,IAATH,EACKD,EAAMO,MAAK,CAAClB,EAAGC,KAAQA,EAAEG,GAAK,MAASH,EAAEC,GAAK,KAAQW,IAAUb,EAAEI,GAAK,MAASJ,EAAEE,GAAK,KAAQW,KAE/FF,EAAMO,MAAK,CAACjB,EAAGD,KAAQC,EAAEG,GAAK,MAASH,EAAEC,GAAK,KAAQW,IAAUb,EAAEI,GAAK,MAASJ,EAAEE,GAAK,KAAQW,IAC1G,CAQAhC,wBAAwBsC,EAAYC,EAAsBC,GACxD,IAAIC,EAA0BvC,SAASwC,cAAc,SACrD,MAAMC,EAAQH,GAASG,MAkBvB,OAjBIA,IAAOF,EAAME,MAAQA,GACzBF,EAAMG,aAAa,OAAQ,YAC3BH,EAAMG,aAAa,cAAeN,GAE7BG,EAAcI,WAEhBJ,EAAcI,WAAWC,QAAU,GAEpCL,EAAMM,YAAY7C,SAAS8C,eAAe,KAEvCT,EAKHA,EAAOU,aAAaR,EAAOF,EAAOW,aAHlCX,EAASrC,SAASiD,qBAAqB,QAAQ,IACxCJ,YAAYN,GAIdA,EAAMW,KACf,CAGApD,wBAAwBsC,GACtB,IAAIhC,EAAKJ,SAASY,cAAc,qBAAuBwB,EAAK,KACxDhC,GAAMA,EAAG+C,YAAY/C,EAAGgD,QAC9B,CAGAtD,kBAAkBoD,EAAsBG,EAAkBC,GAC3B,mBAAlBJ,EAAMK,QACfL,EAAMK,QAAQF,EAAUC,GACa,mBAArBJ,EAAMM,YACtBN,EAAMM,WAAW,GAAGH,KAAYC,KAEpC,CAGAxD,cAAc2D,GACZ,MAAiB,kBAANA,EACFA,EAEQ,iBAANA,IAEM,MADfA,EAAIA,EAAEC,gBACqB,OAAND,GAAoB,UAANA,GAAuB,MAANA,GAE/CE,QAAQF,EACjB,CAEA3D,gBAAgB8D,GACd,OAAkB,OAAVA,GAAmC,IAAjBA,EAAMpD,YAAgBN,EAAY2D,OAAOD,EACrE,CAEA9D,mBAAmBgE,GACjB,IAAI1C,EACA2C,EAAO,KACX,GAAmB,iBAARD,EACT,GAAY,SAARA,EAAgB1C,EAAI,MACnB,CACH,IAAI4C,EAAQF,EAAIE,MAAM,yEACtB,IAAKA,EACH,MAAM,IAAIC,MAAM,kBAElBF,EAAOC,EAAM,IAAM,KACnB5C,EAAI8C,WAAWF,EAAM,SAGvB5C,EAAI0C,EAEN,MAAO,CAAE1C,IAAG2C,OACd,CAIAjE,gBAAgBqE,KAAWC,GAczB,OAZAA,EAAQC,SAAQC,IACd,IAAK,MAAMpF,KAAOoF,EAAQ,CACxB,IAAKA,EAAO3E,eAAeT,GAAM,OACb,OAAhBiF,EAAOjF,SAAiCgB,IAAhBiE,EAAOjF,GACjCiF,EAAOjF,GAAOoF,EAAOpF,GACW,iBAAhBoF,EAAOpF,IAA4C,iBAAhBiF,EAAOjF,IAE1DqF,KAAKC,SAASL,EAAOjF,GAAMoF,EAAOpF,QAKjCiF,CACT,CAGArE,YAAYmB,EAAYC,GACtB,GAAiB,iBAAND,EAAiB,OAAOA,GAAKC,EACxC,UAAWD,UAAaC,EAAG,OAAO,EAElC,GAAI9B,OAAOqF,KAAKxD,GAAGT,SAAWpB,OAAOqF,KAAKvD,GAAGV,OAAQ,OAAO,EAC5D,IAAK,MAAMtB,KAAO+B,EAChB,GAAIA,EAAE/B,KAASgC,EAAEhC,GAAM,OAAO,EAEhC,OAAO,CACT,CAGAY,eAAemB,EAAoBC,EAAoBwD,GAAW,GAWhE,YAVYxE,IAARgB,EAAEG,IAAiBJ,EAAEI,EAAIH,EAAEG,QACnBnB,IAARgB,EAAEC,IAAiBF,EAAEE,EAAID,EAAEC,QACnBjB,IAARgB,EAAEI,IAAiBL,EAAEK,EAAIJ,EAAEI,QACnBpB,IAARgB,EAAEE,IAAiBH,EAAEG,EAAIF,EAAEE,GAC3BsD,IACExD,EAAEyD,OAAM1D,EAAE0D,KAAOzD,EAAEyD,MACnBzD,EAAE0D,OAAM3D,EAAE2D,KAAO1D,EAAE0D,MACnB1D,EAAE2D,OAAM5D,EAAE4D,KAAO3D,EAAE2D,MACnB3D,EAAE4D,OAAM7D,EAAE6D,KAAO5D,EAAE4D,OAElB7D,CACT,CAGAnB,eAAemB,EAAsBC,GACnC,OAAOD,GAAKC,GAAKD,EAAEI,IAAMH,EAAEG,GAAKJ,EAAEE,IAAMD,EAAEC,GAAKF,EAAEK,IAAMJ,EAAEI,GAAKL,EAAEG,IAAMF,EAAEE,CAC1E,CAGAtB,sBAAsBiF,GAEfA,EAAKJ,aAAeI,EAAKJ,KACzBI,EAAKH,aAAeG,EAAKH,KACzBG,EAAKF,aAAeE,EAAKF,KACzBE,EAAKD,aAAeC,EAAKD,IAChC,CAGAhF,6BAA6BmB,EAAYC,GACvC,GAAiB,iBAAND,GAA+B,iBAANC,EACpC,IAAK,IAAIhC,KAAO+B,EAAG,CACjB,IAAI6C,EAAM7C,EAAE/B,GACZ,GAAe,MAAXA,EAAI,IAAc4E,IAAQ5C,EAAEhC,UACvB+B,EAAE/B,QACJ,GAAI4E,GAAsB,iBAARA,QAA+B5D,IAAXgB,EAAEhC,GAAoB,CACjE,IAAK,IAAI8F,KAAKlB,EACRA,EAAIkB,KAAO9D,EAAEhC,GAAK8F,IAAe,MAATA,EAAE,WAAqBlB,EAAIkB,GAEpD5F,OAAOqF,KAAKX,GAAKtD,eAAiBS,EAAE/B,IAG/C,CAGAY,6BAA6Be,EAAkBoE,GAAW,GACxD,IAAK,IAAI/F,KAAO2B,EAAoB,MAAX3B,EAAI,IAAyB,OAAX2B,EAAE3B,SAA4BgB,IAAXW,EAAE3B,WAA4B2B,EAAE3B,UACvF2B,EAAEC,KACLmE,UAAiBpE,EAAET,GAElBS,EAAEqE,qBAAqBrE,EAAEqE,aACzBrE,EAAEsE,iBAAiBtE,EAAEsE,SACrBtE,EAAEuE,eAAevE,EAAEuE,OACnBvE,EAAEwE,eAAexE,EAAEwE,OACZ,IAARxE,EAAES,GAAWT,EAAES,IAAMT,EAAE8D,aAAa9D,EAAES,EAC9B,IAART,EAAEO,GAAWP,EAAEO,IAAMP,EAAE+D,aAAa/D,EAAEO,CAC5C,CAYAtB,gBAAgBwF,EAAkBC,GAChC,IAAIC,GAAY,EAChB,MAAO,IAAIC,KACJD,IACHA,GAAY,EACZE,YAAW,KAAQJ,KAAQG,GAAOD,GAAY,CAAK,GAAKD,IAG9D,CAEAzF,+BAA+BM,GAC7B,IAAImC,EAAQnC,EAAGmC,MACXA,EAAMoD,UACRpD,EAAMqD,eAAe,YAEnBrD,EAAMsD,MACRtD,EAAMqD,eAAe,QAEnBrD,EAAMuD,KACRvD,EAAMqD,eAAe,OAEnBrD,EAAMwD,OACRxD,EAAMqD,eAAe,SAEnBrD,EAAMyD,QACRzD,EAAMqD,eAAe,SAEzB,CAGA9F,wBAAwBM,GACtB,IAAKA,EAAI,OAAOJ,SAASiG,kBAAmCjG,SAASkG,gBACrE,MAAM3D,EAAQ4D,iBAAiB/F,GAG/B,MAFsB,gBAEJgG,KAAK7D,EAAM8D,SAAW9D,EAAM+D,WACrClG,EAEAmE,KAAKgC,iBAAiBnG,EAAGoG,cAEpC,CAEA1G,mCAAmCM,GACjC,IAAKA,EAAI,OAAO,KAEhB,MAAMmC,EAAQ4D,iBAAiB/F,GAE/B,MAAuB,aAAnBmC,EAAMoD,UAA8C,aAAnBpD,EAAMoD,UAA8C,UAAnBpD,EAAMoD,SACnEvF,EAEAP,EAAM4G,4BAA4BrG,EAAGoG,cAEhD,CAEA1G,2CAA2CM,GACzC,KAAOA,IAAOJ,SAASkG,iBAAmB9F,EAAGoG,eAAmE,SAAlDL,iBAAiB/F,GAAmBsG,WAChGtG,EAAKA,EAAGoG,cAGV,OAAOpG,CACT,CAGAN,4BAA4BM,EAAiBuF,EAAyBgB,GAEpE,IAAIC,EAAOxG,EAAGyG,wBACVC,EAA6BC,OAAOC,aAAehH,SAASkG,gBAAgBe,aAChF,GAAIL,EAAKd,IAAM,GACbc,EAAKM,OAASJ,EACd,CAIA,IAAIK,EAAiBP,EAAKM,OAASJ,EAC/BM,EAAeR,EAAKd,IACpBuB,EAAW9C,KAAKgC,iBAAiBnG,GACrC,GAAiB,OAAbiH,EAAmB,CACrB,IAAIC,EAAaD,EAASE,UACtBX,EAAKd,IAAM,GAAKa,EAAW,EAEzBvG,EAAGoH,aAAeV,EACpBO,EAASE,WAAaZ,EAEtBU,EAASE,WAAatF,KAAKwF,IAAIL,GAAgBnF,KAAKwF,IAAId,GAAYA,EAAWS,EAExET,EAAW,IAEhBvG,EAAGoH,aAAeV,EACpBO,EAASE,WAAaZ,EAEtBU,EAASE,WAAaJ,EAAiBR,EAAWA,EAAWQ,GAIjExB,EAASG,KAAOuB,EAASE,UAAYD,GAG3C,CASAxH,0BAA0B4H,EAAmBtH,EAAiBuG,GAC5D,MAAMU,EAAW9C,KAAKgC,iBAAiBnG,GACjC4F,EAASqB,EAASJ,aAKlBU,EAAaN,IAAa9C,KAAKgC,mBAAsB,EAAIc,EAASR,wBAAwBf,IAC1F8B,EAAcF,EAAMG,QAAUF,EAE9BT,EAASU,EAAc5B,EAASW,EAD1BiB,EAAcjB,EAMxBU,EAASS,SAAS,CAAEC,SAAU,SAAUjC,IAAK8B,EAAcjB,IAClDO,GACTG,EAASS,SAAS,CAAEC,SAAU,SAAUjC,IAAKa,GAAYX,EAAS4B,IAEtE,CAGA9H,aAAgBN,GACd,OAAIA,SAAqD,iBAAV,EACtCA,EAGLA,aAAeiB,MAEV,IAAIjB,GAEN,IAAIA,EACb,CAMAM,iBAAoBN,GAElB,MAAMwI,EAAa,CAAC,aAAc,KAAM,OAAQ,UAAW,UAErDC,EAAMpI,EAAMqI,MAAM1I,GACxB,IAAK,MAAMN,KAAO+I,EAEZA,EAAItI,eAAeT,IAA6B,iBAAd+I,EAAI/I,IAA8C,OAAxBA,EAAIyB,UAAU,EAAG,KAAgBqH,EAAWG,MAAKC,GAAKA,IAAMlJ,MAC1H+I,EAAI/I,GAAOW,EAAMwI,UAAU7I,EAAIN,KAGnC,OAAO+I,CACT,CAGOnI,iBAAiBM,GACtB,MAAM2E,EAAO3E,EAAGkI,WAAU,GAE1B,OADAvD,EAAKwD,gBAAgB,MACdxD,CACT,CAEOjF,gBAAgBM,EAAiBiC,GACtC,IAAIc,EAEFA,EADoB,iBAAXd,EACIxC,EAAM2I,WAAWnG,GAEjBA,EAEXc,GACFA,EAAWN,YAAYzC,EAE3B,CAQON,mBAAmBM,EAAiBqI,GACzC,GAAIA,aAAkBrJ,OACpB,IAAK,MAAMsJ,KAAKD,EACVA,EAAO9I,eAAe+I,KACpBjI,MAAMkI,QAAQF,EAAOC,IAEtBD,EAAOC,GAAgBrE,SAAQP,IAC9B1D,EAAGmC,MAAMmG,GAAK5E,CAAG,IAGnB1D,EAAGmC,MAAMmG,GAAKD,EAAOC,GAK/B,CAEO5I,iBAAoB8I,EAA2BC,GACpD,MAAMC,EAAM,CAAEC,KAAMF,EAAKE,MACnBvJ,EAAM,CACVwJ,OAAQ,EACRC,MAAO,EACPC,QAAS,EACTC,SAAS,EACTC,YAAY,EACZjF,OAAQ0E,EAAK1E,OAAS0E,EAAK1E,OAASyE,EAAEzE,QAQxC,OALKyE,EAAgBS,eACnBP,EAAkB,aAAKF,EAAgBS,cAEzC,CAAC,SAAS,UAAU,UAAU,YAAYhF,SAAQiF,GAAKR,EAAIQ,GAAKV,EAAEU,KAClE,CAAC,QAAQ,QAAQ,UAAU,UAAU,UAAU,WAAWjF,SAAQiF,GAAKR,EAAIQ,GAAKV,EAAEU,KAC3E,IAAIR,KAAQtJ,EACrB,CAGOM,0BAA0B8I,EAAeW,EAAuBpF,GACrE,MAAMqF,EAAiBxJ,SAASyJ,YAAY,eAC5CD,EAAeE,eACbH,GACA,GACA,EACAxC,OACA,EACA6B,EAAEe,QACFf,EAAEgB,QACFhB,EAAEiB,QACFjB,EAAEf,QACFe,EAAEkB,QACFlB,EAAEmB,OACFnB,EAAEoB,SACFpB,EAAEqB,QACF,EACArB,EAAEzE,SAEHA,GAAUyE,EAAEzE,QAAQ+F,cAAcV,EACrC,CAEO1J,0BAA0BqK,GAE/B,KAAOA,IAAYA,EAAQC,cACzBD,EAAUA,EAAQ3D,cAGpB,IAAK2D,EACH,MAAO,CAAEE,OAAQ,EAAGC,OAAQ,GAG9B,MAAMC,EAAqBJ,EAAQtD,wBAGnC,MAAO,CAAEwD,OAFME,EAAmBxE,MAAQoE,EAAQK,YAEjCF,OADFC,EAAmBvE,OAASmE,EAAQ3C,aAErD,EC9iBF,MAAaiD,EAsBX,YAAmBzJ,EAA+B,CAAC,GAlB5C,KAAA0J,WAA8B,GAC9B,KAAAC,aAAgC,GAkBrCpG,KAAKzC,OAASd,EAAKc,QAAU,GAC7ByC,KAAKqG,OAAS5J,EAAK4J,OACnBrG,KAAKsG,OAAS7J,EAAK8J,MACnBvG,KAAK3C,MAAQZ,EAAKY,OAAS,GAC3B2C,KAAKwG,SAAW/J,EAAK+J,QACvB,CAEOC,YAAYC,GAAO,EAAMC,GAAS,GACvC,QAAM3G,KAAK4G,YAAcF,IACzB1G,KAAK4G,UAAYF,EACbA,GACF1G,KAAK6G,WAAa7G,KAAKsG,OACvBtG,KAAKsG,QAAS,EACdtG,KAAK8G,aACL9G,KAAK+G,gBAEL/G,KAAKsG,OAAStG,KAAK6G,kBACZ7G,KAAK6G,WACRF,GAAQ3G,KAAKgH,aACjBhH,KAAKiH,YAX+BjH,IAcxC,CAGUkH,kBAAkB1G,EAAqB2G,GAC/C,QAASnH,KAAKuG,OAASvG,KAAK4G,YAAc5G,KAAK6G,cAAgB7G,KAAKoH,cAAgB5G,EAAK6G,SAAW7G,EAAK8G,WAAaH,EAAGvK,GAAK4D,EAAK5D,EACrI,CAIU2K,eAAe/G,EAAqB2G,EAAK3G,EAAMgH,EAAyBC,EAAyB,CAAC,GAI1G,GAHAzH,KAAK0H,WAAW,KAEhBF,EAAUA,GAAWxH,KAAKwH,QAAQhH,EAAM2G,IAC1B,OAAO,EAGrB,GAAI3G,EAAK6G,UAAYI,EAAIE,SAAW3H,KAAKuG,OACnCvG,KAAK4H,KAAKpH,EAAMgH,GAAU,OAAO,EAIvC,IAAIK,EAAOV,EACPnH,KAAKkH,kBAAkB1G,EAAM2G,KAC/BU,EAAO,CAAC/K,EAAG,EAAGC,EAAGiD,KAAKzC,OAAQX,EAAGuK,EAAGvK,EAAGC,EAAGsK,EAAGtK,GAC7C2K,EAAUxH,KAAKwH,QAAQhH,EAAMqH,EAAMJ,EAAIK,OAGzC,IAAIC,GAAU,EACVC,EAA4B,CAACL,QAAQ,EAAMM,MAAM,GACrD,KAAOT,EAAUA,GAAWxH,KAAKwH,QAAQhH,EAAMqH,EAAMJ,EAAIK,OAAO,CAC9D,IAAII,EAqBJ,GAlBIV,EAAQ1G,QAAUN,EAAK6G,UAAY7G,EAAK8G,WAAaH,EAAGvK,EAAI4D,EAAK5D,IAAMoD,KAAKuG,SAE5EvG,KAAKwH,QAAQA,EAAS,IAAIA,EAAS5K,EAAG4D,EAAK5D,GAAI4D,KAAUR,KAAKwH,QAAQA,EAAS,IAAIA,EAAS5K,EAAGuK,EAAGvK,EAAI4K,EAAQ3K,GAAI2D,KACpHA,EAAK8G,UAAa9G,EAAK8G,WAAaH,EAAGvK,EAAI4D,EAAK5D,EAChDsL,EAAQlI,KAAKmI,SAAS3H,EAAM,IAAI2G,EAAIvK,EAAG4K,EAAQ5K,EAAI4K,EAAQ3K,KAAMmL,IAC7DR,EAAQ1G,QAAUoH,EACpB5M,EAAM8M,QAAQjB,EAAI3G,IACRgH,EAAQ1G,QAAUoH,GAAST,EAAIQ,OAEzCjI,KAAKgH,aACLG,EAAGvK,EAAI4K,EAAQ5K,EAAI4K,EAAQ3K,EAC3BvB,EAAM8M,QAAQ5H,EAAM2G,IAEtBY,EAAUA,GAAWG,GAGrBA,EAAQlI,KAAKmI,SAASX,EAAS,IAAIA,EAAS5K,EAAGuK,EAAGvK,EAAIuK,EAAGtK,EAAGiL,KAAMtH,KAASwH,KAExEE,EAAS,OAAOH,EACrBP,OAAU7L,EAEZ,OAAOoM,CACT,CAGOP,QAAQM,EAAqBD,EAAOC,EAAMO,GAC/C,MAAMC,EAASR,EAAKS,IACdC,EAAUH,GAAOE,IACvB,OAAOvI,KAAK3C,MAAMuG,MAAKtH,GAAKA,EAAEiM,MAAQD,GAAUhM,EAAEiM,MAAQC,GAAWlN,EAAM0B,cAAcV,EAAGuL,IAC9F,CACOY,WAAWX,EAAqBD,EAAOC,EAAMO,GAClD,MAAMC,EAASR,EAAKS,IACdC,EAAUH,GAAOE,IACvB,OAAOvI,KAAK3C,MAAMqL,QAAOpM,GAAKA,EAAEiM,MAAQD,GAAUhM,EAAEiM,MAAQC,GAAWlN,EAAM0B,cAAcV,EAAGuL,IAChG,CAGUc,yBAAyBnI,EAAqB5F,EAAsBgO,GAC5E,IAAKhO,EAAEyH,OAAS7B,EAAKqI,MAAO,OAC5B,IAiBIrB,EAjBAsB,EAAKtI,EAAKqI,MACVE,EAAI,IAAInO,EAAEyH,MAGV0G,EAAEnM,EAAIkM,EAAGlM,GACXmM,EAAElM,GAAKkM,EAAEnM,EAAIkM,EAAGlM,EAChBmM,EAAEnM,EAAIkM,EAAGlM,GAETmM,EAAElM,GAAKiM,EAAGlM,EAAImM,EAAEnM,EAEdmM,EAAEjM,EAAIgM,EAAGhM,GACXiM,EAAEhM,GAAKgM,EAAEjM,EAAIgM,EAAGhM,EAChBiM,EAAEjM,EAAIgM,EAAGhM,GAETiM,EAAEhM,GAAK+L,EAAGhM,EAAIiM,EAAEjM,EAIlB,IAAIkM,EAAU,GAwBd,OAvBAJ,EAAS9I,SAAQxD,IACf,GAAIA,EAAEwE,SAAWxE,EAAEuM,MAAO,OAC1B,IAAII,EAAK3M,EAAEuM,MACPK,EAAQ5J,OAAO6J,UAAWC,EAAQ9J,OAAO6J,UAGzCL,EAAGlM,EAAIqM,EAAGrM,EACZsM,GAAUH,EAAEnM,EAAImM,EAAElM,EAAKoM,EAAGrM,GAAKqM,EAAGpM,EACzBiM,EAAGlM,EAAEkM,EAAGjM,EAAIoM,EAAGrM,EAAEqM,EAAGpM,IAC7BqM,GAAUD,EAAGrM,EAAIqM,EAAGpM,EAAKkM,EAAEnM,GAAKqM,EAAGpM,GAEjCiM,EAAGhM,EAAImM,EAAGnM,EACZsM,GAAUL,EAAEjM,EAAIiM,EAAEhM,EAAKkM,EAAGnM,GAAKmM,EAAGlM,EACzB+L,EAAGhM,EAAEgM,EAAG/L,EAAIkM,EAAGnM,EAAEmM,EAAGlM,IAC7BqM,GAAUH,EAAGnM,EAAImM,EAAGlM,EAAKgM,EAAEjM,GAAKmM,EAAGlM,GAErC,IAAIsM,EAAO3L,KAAK4L,IAAIF,EAAOF,GACvBG,EAAOL,IACTA,EAAUK,EACV7B,EAAUlL,MAGd1B,EAAE4M,QAAUA,EACLA,CACT,CAoBO+B,WAAWxM,EAAWF,EAAW0E,EAAaiI,EAAe7G,EAAgBrB,GAUlF,OARAtB,KAAK3C,MAAMyC,SAAQxD,GACjBA,EAAEuM,MAAQ,CACRjM,EAAGN,EAAEM,EAAIC,EAAI0E,EACbzE,EAAGR,EAAEQ,EAAIC,EAAIuE,EACbvE,EAAGT,EAAES,EAAIA,EAAIuE,EAAOkI,EACpB3M,EAAGP,EAAEO,EAAIA,EAAI0E,EAAMoB,KAGhB3C,IACT,CAGO4H,KAAKlL,EAAkBC,GAC5B,IAAKA,GAAKA,EAAEmE,SAAWpE,GAAKA,EAAEoE,OAAQ,OAAO,EAE7C,SAAS2I,IACP,IAAI3M,EAAIH,EAAEG,EAAGF,EAAID,EAAEC,EAUnB,OATAD,EAAEG,EAAIJ,EAAEI,EAAGH,EAAEC,EAAIF,EAAEE,EACfF,EAAEG,GAAKF,EAAEE,GACXH,EAAEI,EAAIA,EAAGJ,EAAEE,EAAID,EAAEC,EAAID,EAAEE,GACdH,EAAEK,GAAKJ,EAAEI,GAClBL,EAAEI,EAAIH,EAAEG,EAAIH,EAAEI,EAAGL,EAAEE,EAAIA,IAEvBF,EAAEI,EAAIA,EAAGJ,EAAEE,EAAIA,GAEjBF,EAAEgN,OAAS/M,EAAE+M,QAAS,GACf,CACT,CACA,IAAIC,EAGJ,GAAIjN,EAAEK,IAAMJ,EAAEI,GAAKL,EAAEG,IAAMF,EAAEE,IAAMH,EAAEI,IAAMH,EAAEG,GAAKJ,EAAEE,IAAMD,EAAEC,KAAO+M,EAAWrO,EAAMsO,WAAWlN,EAAGC,IAChG,OAAO8M,IACT,IAAiB,IAAbE,EAAJ,CAGA,GAAIjN,EAAEK,IAAMJ,EAAEI,GAAKL,EAAEI,IAAMH,EAAEG,IAAM6M,IAAaA,EAAWrO,EAAMsO,WAAWlN,EAAGC,KAAM,CACnF,GAAIA,EAAEC,EAAIF,EAAEE,EAAG,CAAE,IAAIiN,EAAInN,EAAGA,EAAIC,EAAGA,EAAIkN,EACvC,OAAOJ,IAET,IAAiB,IAAbE,EAAJ,CAGA,GAAIjN,EAAEG,IAAMF,EAAEE,GAAKH,EAAEE,IAAMD,EAAEC,IAAM+M,IAAaA,EAAWrO,EAAMsO,WAAWlN,EAAGC,KAAM,CACnF,GAAIA,EAAEG,EAAIJ,EAAEI,EAAG,CAAE,IAAI+M,EAAInN,EAAGA,EAAIC,EAAGA,EAAIkN,EACvC,OAAOJ,IAET,OAAO,CAPuB,CAPA,CAehC,CAEOK,YAAYhN,EAAWF,EAAWG,EAAWF,GAClD,IAAIsK,EAAoB,CAACrK,EAAGA,GAAK,EAAGF,EAAGA,GAAK,EAAGG,EAAGA,GAAK,EAAGF,EAAGA,GAAK,GAClE,OAAQmD,KAAKwH,QAAQL,EACvB,CAGO4C,QAAQC,EAAyB,UAAWC,GAAS,GAC1D,GAA0B,IAAtBjK,KAAK3C,MAAMpB,OAAc,OAAO+D,KAChCiK,GAAQjK,KAAK0H,YACjB,MAAMwC,EAAWlK,KAAK4G,UACjBsD,GAAUlK,KAAKyG,cACpB,MAAM0D,EAAkBnK,KAAKoK,gBACxBD,IAAiBnK,KAAKoK,iBAAkB,GAC7C,IAAIC,EAAYrK,KAAK3C,MAYrB,OAXA2C,KAAK3C,MAAQ,GACbgN,EAAUvK,SAAQ,CAACxD,EAAGgO,EAAOvO,KAC3B,IAAIwO,EACCjO,EAAEwE,SACLxE,EAAEqE,cAAe,EACF,SAAXqJ,GAAqBM,IAAOC,EAAQxO,EAAKuO,EAAQ,KAEvDtK,KAAKwK,QAAQlO,GAAG,EAAOiO,EAAM,IAE1BJ,UAAwBnK,KAAKoK,gBAC7BF,GAAUlK,KAAKyG,aAAY,GACzBzG,IACT,CAGWuG,UAAMhH,GACXS,KAAKsG,SAAW/G,IACpBS,KAAKsG,OAAS/G,IAAO,EAChBA,GACHS,KAAKgH,aAAaC,UAEtB,CAGWV,YAAmB,OAAOvG,KAAKsG,SAAU,CAAO,CAGpDoB,UAAUpK,EAAc,EAAGC,EAASyC,KAAKzC,QAE9C,OADAyC,KAAK3C,MAAQ/B,EAAMsC,KAAKoC,KAAK3C,MAAOC,EAAKC,GAClCyC,IACT,CAGUgH,aACR,OAAIhH,KAAK4G,YACT5G,KAAK0H,YAED1H,KAAKuG,MAEPvG,KAAK3C,MAAMyC,SAAQxD,IACjB,GAAIA,EAAEmO,gBAAyB9O,IAAZW,EAAEoO,OAAuBpO,EAAEM,IAAMN,EAAEoO,MAAM9N,EAAG,OAC/D,IAAI+N,EAAOrO,EAAEM,EACb,KAAO+N,EAAOrO,EAAEoO,MAAM9N,KAClB+N,EACY3K,KAAKwH,QAAQlL,EAAG,CAACQ,EAAGR,EAAEQ,EAAGF,EAAG+N,EAAM5N,EAAGT,EAAES,EAAGF,EAAGP,EAAEO,MAE3DP,EAAEoN,QAAS,EACXpN,EAAEM,EAAI+N,MAMZ3K,KAAK3C,MAAMyC,SAAQ,CAACxD,EAAGmE,KACrB,IAAInE,EAAEwE,OACN,KAAOxE,EAAEM,EAAI,GAAG,CACd,IAAI+N,EAAa,IAANlK,EAAU,EAAInE,EAAEM,EAAI,EAE/B,GADuB,IAAN6D,GAAYT,KAAKwH,QAAQlL,EAAG,CAACQ,EAAGR,EAAEQ,EAAGF,EAAG+N,EAAM5N,EAAGT,EAAES,EAAGF,EAAGP,EAAEO,IAC3D,MAIjBP,EAAEoN,OAAUpN,EAAEM,IAAM+N,EACpBrO,EAAEM,EAAI+N,OA7BiB3K,IAkC/B,CAOO4K,YAAYpK,EAAqBqK,IACtCrK,EAAOA,GAAQ,CAAC,GACX+H,IAAM/H,EAAK+H,KAAOrC,EAAgB4E,cAGxBnP,IAAX6E,EAAK1D,QAA8BnB,IAAX6E,EAAK5D,GAA8B,OAAX4D,EAAK1D,GAAyB,OAAX0D,EAAK5D,IAC1E4D,EAAKG,cAAe,GAItB,IAAIV,EAA0B,CAAEnD,EAAG,EAAGF,EAAG,EAAGG,EAAG,EAAGF,EAAG,GAkBrD,OAjBAvB,EAAM2E,SAASO,EAAMP,GAEhBO,EAAKG,qBAAuBH,EAAKG,aACjCH,EAAKI,iBAAmBJ,EAAKI,SAC7BJ,EAAKK,eAAiBL,EAAKK,OAChCvF,EAAMyP,eAAevK,GAGA,iBAAVA,EAAK1D,IAAiB0D,EAAK1D,EAAIwC,OAAOkB,EAAK1D,IACjC,iBAAV0D,EAAK5D,IAAiB4D,EAAK5D,EAAI0C,OAAOkB,EAAK5D,IACjC,iBAAV4D,EAAKzD,IAAiByD,EAAKzD,EAAIuC,OAAOkB,EAAKzD,IACjC,iBAAVyD,EAAK3D,IAAiB2D,EAAK3D,EAAIyC,OAAOkB,EAAK3D,IAClDjB,MAAM4E,EAAK1D,KAAM0D,EAAK1D,EAAImD,EAASnD,EAAG0D,EAAKG,cAAe,GAC1D/E,MAAM4E,EAAK5D,KAAM4D,EAAK5D,EAAIqD,EAASrD,EAAG4D,EAAKG,cAAe,GAC1D/E,MAAM4E,EAAKzD,KAAMyD,EAAKzD,EAAIkD,EAASlD,GACnCnB,MAAM4E,EAAK3D,KAAM2D,EAAK3D,EAAIoD,EAASpD,GAEhCmD,KAAKgL,aAAaxK,EAAMqK,EACjC,CAGOG,aAAaxK,EAAqBqK,GAEvC,IAAII,EAASzK,EAAKkK,OAASpP,EAAM8M,QAAQ,CAAC,EAAG5H,GAW7C,GATIA,EAAKF,OAAQE,EAAKzD,EAAIW,KAAK4L,IAAI9I,EAAKzD,EAAGyD,EAAKF,OAC5CE,EAAKD,OAAQC,EAAK3D,EAAIa,KAAK4L,IAAI9I,EAAK3D,EAAG2D,EAAKD,OAC5CC,EAAKJ,MAAQI,EAAKJ,MAAQJ,KAAKzC,SAAUiD,EAAKzD,EAAIW,KAAKC,IAAI6C,EAAKzD,EAAGyD,EAAKJ,OACxEI,EAAKH,OAAQG,EAAK3D,EAAIa,KAAKC,IAAI6C,EAAK3D,EAAG2D,EAAKH,QAK9BG,EAAK1D,GAAK,IAAM0D,EAAKzD,GAAK,GAAKiD,KAAKzC,QACtCyC,KAAKzC,OAAS,KAAOyC,KAAKoK,iBAAmB5J,EAAK+H,MAA2C,IAApCvI,KAAKkL,gBAAgB1K,EAAM,IAAY,CAC9G,IAAI2K,EAAO,IAAI3K,GACX2K,EAAKxK,mBAA2BhF,IAAXwP,EAAKrO,UAA0BqO,EAAKrO,SAAUqO,EAAKvO,GACvEuO,EAAKrO,EAAIY,KAAK4L,IAAI,GAAI6B,EAAKrO,GAChCqO,EAAKpO,EAAIW,KAAK4L,IAAI,GAAI6B,EAAKpO,GAAK,GAChCiD,KAAKoL,eAAeD,EAAM,IAyC5B,OAtCI3K,EAAKzD,EAAIiD,KAAKzC,OAChBiD,EAAKzD,EAAIiD,KAAKzC,OACLiD,EAAKzD,EAAI,IAClByD,EAAKzD,EAAI,GAGPiD,KAAKqG,QAAU7F,EAAK3D,EAAImD,KAAKqG,OAC/B7F,EAAK3D,EAAImD,KAAKqG,OACL7F,EAAK3D,EAAI,IAClB2D,EAAK3D,EAAI,GAGP2D,EAAK1D,EAAI,IACX0D,EAAK1D,EAAI,GAEP0D,EAAK5D,EAAI,IACX4D,EAAK5D,EAAI,GAGP4D,EAAK1D,EAAI0D,EAAKzD,EAAIiD,KAAKzC,SACrBsN,EACFrK,EAAKzD,EAAIiD,KAAKzC,OAASiD,EAAK1D,EAE5B0D,EAAK1D,EAAIkD,KAAKzC,OAASiD,EAAKzD,GAG5BiD,KAAKqG,QAAU7F,EAAK5D,EAAI4D,EAAK3D,EAAImD,KAAKqG,SACpCwE,EACFrK,EAAK3D,EAAImD,KAAKqG,OAAS7F,EAAK5D,EAE5B4D,EAAK5D,EAAIoD,KAAKqG,OAAS7F,EAAK3D,GAI3BvB,EAAM+P,QAAQ7K,EAAMyK,KACvBzK,EAAKkJ,QAAS,GAGTlJ,CACT,CAGO8K,cAAcC,GAEnB,OAAIA,EACKvL,KAAK3C,MAAMqL,QAAOpM,GAAKA,EAAEoN,SAAWpO,EAAM+P,QAAQ/O,EAAGA,EAAEoO,SAEzD1K,KAAK3C,MAAMqL,QAAOpM,GAAKA,EAAEoN,QAClC,CAGUzC,QAAQb,GAChB,GAAIpG,KAAK4G,YAAc5G,KAAKwG,SAAU,OAAOxG,KAC7C,IAAIwL,GAAcpF,GAAgB,IAAIqF,OAAOzL,KAAKsL,iBAElD,OADAtL,KAAKwG,SAASgF,GACPxL,IACT,CAGO8G,aACL,OAAI9G,KAAK4G,WACT5G,KAAK3C,MAAMyC,SAAQxD,WACVA,EAAEoN,cACFpN,EAAEoP,UAAU,IAHM1L,IAM7B,CAKO+G,cAML,OALA/G,KAAK3C,MAAMyC,SAAQxD,IACjBA,EAAEoO,MAAQpP,EAAM8M,QAAQ,CAAC,EAAG9L,UACrBA,EAAEoN,MAAM,IAEjB1J,KAAKoH,WAAapH,KAAK3C,MAAMsO,MAAKrP,GAAKA,EAAEwE,SAClCd,IACT,CAGO4L,iBAOL,OANA5L,KAAK3C,MAAMyC,SAAQxD,IACbhB,EAAM+P,QAAQ/O,EAAGA,EAAEoO,SACvBpP,EAAM8M,QAAQ9L,EAAGA,EAAEoO,OACnBpO,EAAEoN,QAAS,EAAI,IAEjB1J,KAAKiH,UACEjH,IACT,CAMO6L,kBAAkBrL,EAAqBsL,EAAW9L,KAAK3C,MAAOE,EAASyC,KAAKzC,OAAQgN,GACzF,IACIwB,GAAQ,EACZ,IAAK,IAAItL,EAFG8J,EAAQA,EAAM3N,EAAIW,GAAUgN,EAAMzN,EAAIyN,EAAMxN,GAAK,GAExCgP,IAAStL,EAAG,CAC/B,IAAI3D,EAAI2D,EAAIlD,EACRX,EAAIc,KAAKsO,MAAMvL,EAAIlD,GACvB,GAAIT,EAAI0D,EAAKzD,EAAIQ,EACf,SAEF,IAAI0O,EAAM,CAACnP,IAAGF,IAAGG,EAAGyD,EAAKzD,EAAGF,EAAG2D,EAAK3D,GAC/BiP,EAASlI,MAAKtH,GAAKhB,EAAM0B,cAAciP,EAAK3P,OAC3CkE,EAAK1D,IAAMA,GAAK0D,EAAK5D,IAAMA,IAAG4D,EAAKkJ,QAAS,GAChDlJ,EAAK1D,EAAIA,EACT0D,EAAK5D,EAAIA,SACF4D,EAAKG,aACZoL,GAAQ,GAGZ,OAAOA,CACT,CAGOvB,QAAQhK,EAAqB0L,GAAkB,EAAO3B,GAC3D,IAQI4B,EAPJ,OADUnM,KAAK3C,MAAMuG,MAAKtH,GAAKA,EAAEiM,MAAQ/H,EAAK+H,eAI9C/H,EAAOR,KAAKoK,gBAAkBpK,KAAKgL,aAAaxK,GAAQR,KAAK4K,YAAYpK,IAC7D4L,yBACL5L,EAAK6L,WAGR7L,EAAKG,cAAgBX,KAAK6L,kBAAkBrL,EAAMR,KAAK3C,MAAO2C,KAAKzC,OAAQgN,YACtE/J,EAAKG,aACZwL,GAAgB,GAGlBnM,KAAK3C,MAAMiP,KAAK9L,GACZ0L,GAAmBlM,KAAKmG,WAAWmG,KAAK9L,GAEvC2L,GAAenM,KAAKuH,eAAe/G,GACnCR,KAAK4G,WAAa5G,KAAKgH,aAAaC,UAClCzG,EACT,CAEO+L,WAAW/L,EAAqBgM,GAAY,EAAMC,GAAe,GACtE,OAAKzM,KAAK3C,MAAMuG,MAAKtH,GAAKA,EAAEiM,MAAQ/H,EAAK+H,OAIrCkE,GACFzM,KAAKoG,aAAakG,KAAK9L,GAErBgM,IAAWhM,EAAK6L,YAAa,GAEjCrM,KAAK3C,MAAQ2C,KAAK3C,MAAMqL,QAAOpM,GAAKA,EAAEiM,MAAQ/H,EAAK+H,MAC9C/H,EAAKkM,kBAAkB1M,KAAKgH,aACjChH,KAAKiH,QAAQ,CAACzG,IACPR,MAVEA,IAWX,CAEO2M,UAAUH,GAAY,GAE3B,cADOxM,KAAK4M,SACP5M,KAAK3C,MAAMpB,QAChBuQ,GAAaxM,KAAK3C,MAAMyC,SAAQxD,GAAKA,EAAE+P,YAAa,IACpDrM,KAAKoG,aAAepG,KAAK3C,MACzB2C,KAAK3C,MAAQ,GACN2C,KAAKiH,QAAQjH,KAAKoG,eAJMpG,IAKjC,CAKO6M,cAAcrM,EAAqB5F,GAExC,IAAKoF,KAAK8M,oBAAoBtM,EAAM5F,GAAI,OAAO,EAI/C,GAHAA,EAAEqN,MAAO,GAGJjI,KAAKqG,OACR,OAAOrG,KAAKmI,SAAS3H,EAAM5F,GAI7B,IAAImS,EACApJ,EAAQ,IAAIuC,EAAgB,CAC9B3I,OAAQyC,KAAKzC,OACbgJ,MAAOvG,KAAKuG,MACZlJ,MAAO2C,KAAK3C,MAAM2P,KAAI1Q,GAChBA,EAAEiM,MAAQ/H,EAAK+H,KACjBwE,EAAa,IAAIzQ,GACVyQ,GAEF,IAAIzQ,OAGf,IAAKyQ,EAAY,OAAO,EAIxB,IAAIE,EAAUtJ,EAAMwE,SAAS4E,EAAYnS,IAAM+I,EAAMuJ,UAAYxP,KAAKC,IAAIqC,KAAKkN,SAAUlN,KAAKqG,QAE9F,IAAK4G,IAAYrS,EAAEiQ,UAAYjQ,EAAE4M,QAAS,CACxC,IAAIA,EAAU5M,EAAE4M,QAAQ3L,GAAGsR,cAC3B,GAAInN,KAAK4H,KAAKpH,EAAMgH,GAElB,OADAxH,KAAKiH,WACE,EAGX,QAAKgG,IAILtJ,EAAMtG,MAAMqL,QAAOpM,GAAKA,EAAEoN,SAAQ5J,SAAQsN,IACxC,IAAI9Q,EAAI0D,KAAK3C,MAAMuG,MAAKlH,GAAKA,EAAE6L,MAAQ6E,EAAE7E,MACpCjM,IACLhB,EAAM8M,QAAQ9L,EAAG8Q,GACjB9Q,EAAEoN,QAAS,EAAI,IAEjB1J,KAAKiH,WACE,EACT,CAGOoG,UAAU7M,GAEf,UADOA,EAAK8M,aACPtN,KAAKqG,OAAQ,OAAO,EAEzB,IAAI1C,EAAQ,IAAIuC,EAAgB,CAC9B3I,OAAQyC,KAAKzC,OACbgJ,MAAOvG,KAAKuG,MACZlJ,MAAO2C,KAAK3C,MAAM2P,KAAI1Q,IAAa,IAAIA,QAErCA,EAAI,IAAIkE,GAIZ,OAHAR,KAAKuN,YAAYjR,UACVA,EAAET,UAAWS,EAAEiM,WAAYjM,EAAEkR,eAAgBlR,EAAEC,KACtDoH,EAAM6G,QAAQlO,GACVqH,EAAMuJ,UAAYlN,KAAKqG,SACzB7F,EAAK8M,YAAchS,EAAM8M,QAAQ,CAAC,EAAG9L,IAC9B,EAGX,CAGOwQ,oBAAoBtM,EAAqBuE,GAI9C,OAFAA,EAAEhI,EAAIgI,EAAEhI,GAAKyD,EAAKzD,EAClBgI,EAAElI,EAAIkI,EAAElI,GAAK2D,EAAK3D,EACd2D,EAAK1D,IAAMiI,EAAEjI,GAAK0D,EAAK5D,IAAMmI,EAAEnI,IAE/B4D,EAAKF,OAAQyE,EAAEhI,EAAIW,KAAK4L,IAAIvE,EAAEhI,EAAGyD,EAAKF,OACtCE,EAAKD,OAAQwE,EAAElI,EAAIa,KAAK4L,IAAIvE,EAAElI,EAAG2D,EAAKD,OACtCC,EAAKJ,OAAQ2E,EAAEhI,EAAIW,KAAKC,IAAIoH,EAAEhI,EAAGyD,EAAKJ,OACtCI,EAAKH,OAAQ0E,EAAElI,EAAIa,KAAKC,IAAIoH,EAAElI,EAAG2D,EAAKH,OAClCG,EAAKzD,IAAMgI,EAAEhI,GAAKyD,EAAK3D,IAAMkI,EAAElI,EACzC,CAGOsL,SAAS3H,EAAqB5F,GACnC,IAAK4F,IAA4B5F,EAAG,OAAO,EAC3C,IAAI6S,OACW9R,IAAXf,EAAEqN,OACJwF,EAAmB7S,EAAEqN,MAAO,GAIX,iBAARrN,EAAEkC,IAAkBlC,EAAEkC,EAAI0D,EAAK1D,GACvB,iBAARlC,EAAEgC,IAAkBhC,EAAEgC,EAAI4D,EAAK5D,GACvB,iBAARhC,EAAEmC,IAAkBnC,EAAEmC,EAAIyD,EAAKzD,GACvB,iBAARnC,EAAEiC,IAAkBjC,EAAEiC,EAAI2D,EAAK3D,GAC1C,IAAIgO,EAAYrK,EAAKzD,IAAMnC,EAAEmC,GAAKyD,EAAK3D,IAAMjC,EAAEiC,EAC3CsK,EAAoB7L,EAAM8M,QAAQ,CAAC,EAAG5H,GAAM,GAKhD,GAJAlF,EAAM8M,QAAQjB,EAAIvM,GAClBuM,EAAKnH,KAAKgL,aAAa7D,EAAI0D,GAC3BvP,EAAM8M,QAAQxN,EAAGuM,GAEb7L,EAAM+P,QAAQ7K,EAAM5F,GAAI,OAAO,EACnC,IAAI8S,EAA6BpS,EAAM8M,QAAQ,CAAC,EAAG5H,GAG/CoI,EAAW5I,KAAKyI,WAAWjI,EAAM2G,EAAIvM,EAAEkN,MACvC6F,GAAa,EACjB,GAAI/E,EAAS3M,OAAQ,CACnB,IAAI2R,EAAapN,EAAK6G,UAAYzM,EAAE+M,OAEhCH,EAAUoG,EAAa5N,KAAK2I,yBAAyBnI,EAAM5F,EAAGgO,GAAYA,EAAS,GAEvF,GAAIgF,GAAcpG,GAAWhH,EAAKjE,MAAME,MAAMoR,iBAAmBrN,EAAKjE,KAAKuR,QAAS,CAClF,IAAIzE,EAAO/N,EAAMyS,cAAcnT,EAAEyH,KAAMmF,EAAQqB,OAC3CmF,EAAK1S,EAAMuM,KAAKjN,EAAEyH,MAClB4L,EAAK3S,EAAMuM,KAAKL,EAAQqB,OACjBQ,GAAQ2E,EAAKC,EAAKD,EAAKC,GACvB,KACTzG,EAAQjL,KAAK2R,YAAY1G,EAAQ3L,QAAIF,EAAW6E,GAChDgH,OAAU7L,GAIV6L,EACFmG,GAAc3N,KAAKuH,eAAe/G,EAAM2G,EAAIK,EAAS5M,IAErD+S,GAAa,EACTF,UAAyB7S,EAAEqN,MAanC,OARI0F,IACFnN,EAAKkJ,QAAS,EACdpO,EAAM8M,QAAQ5H,EAAM2G,IAElBvM,EAAEqN,MACJjI,KAAKgH,aACFC,WAEG3L,EAAM+P,QAAQ7K,EAAMkN,EAC9B,CAEOR,SACL,OAAOlN,KAAK3C,MAAMG,QAAO,CAAC2Q,EAAK7R,IAAMoB,KAAKC,IAAIwQ,EAAK7R,EAAEM,EAAIN,EAAEO,IAAI,EACjE,CAEOuR,YAAY5N,GAMjB,OALKA,EAAKiK,YACRjK,EAAKiK,WAAY,SACVjK,EAAK8G,UACPtH,KAAK4G,WAAW5G,KAAK+G,eAErB/G,IACT,CAEOqO,YACL,IAAI/R,EAAI0D,KAAK3C,MAAMuG,MAAKtH,GAAKA,EAAEmO,YAK/B,OAJInO,WACKA,EAAEmO,iBACFnO,EAAEgL,WAEJtH,IACT,CAIOsO,KAAKC,GAAc,EAAMC,GAE9B,IAAIC,EAAMzO,KAAK4M,UAAU3Q,OACrB+N,EAASyE,GAAOzO,KAAKzC,SAAYkR,EAAM,EAAKzO,KAAK4M,SAAS6B,EAAM,GAAK,KACrE1S,EAAwB,GAU5B,OATAiE,KAAK0H,YACL1H,KAAK3C,MAAMyC,SAAQxD,IACjB,IAAIoS,EAAK1E,GAAQpG,MAAK+K,GAAKA,EAAEpG,MAAQjM,EAAEiM,MAEnCxL,EAAmB,IAAIT,KAAOoS,GAAM,CAAC,GACzCpT,EAAMsT,sBAAsB7R,GAAIwR,GAC5BC,GAAQA,EAAOlS,EAAGS,GACtBhB,EAAKuQ,KAAKvP,EAAE,IAEPhB,CACT,CAGO8S,mBAAmBxR,GACxB,OAAK2C,KAAK4M,UAAY5M,KAAKoK,iBAE3BpK,KAAK4M,SAAS9M,SAAQ,CAACkK,EAAQzM,KAC7B,IAAKyM,GAAUzM,IAAWyC,KAAKzC,OAAQ,OAAOyC,KAC9C,GAAIzC,EAASyC,KAAKzC,OAChByC,KAAK4M,SAASrP,QAAU5B,MAErB,CAGH,IAAImT,EAAQvR,EAASyC,KAAKzC,OAC1BF,EAAMyC,SAAQU,IACZ,IAAKA,EAAKkK,MAAO,OACjB,IAAIpO,EAAI0N,EAAOpG,MAAK+K,GAAKA,EAAEpG,MAAQ/H,EAAK+H,MACnCjM,IAGDA,EAAEM,GAAK,GAAK4D,EAAK5D,IAAM4D,EAAKkK,MAAM9N,IACpCN,EAAEM,GAAM4D,EAAK5D,EAAI4D,EAAKkK,MAAM9N,GAG1B4D,EAAK1D,IAAM0D,EAAKkK,MAAM5N,IACxBR,EAAEQ,EAAIY,KAAKqR,MAAMvO,EAAK1D,EAAIgS,IAGxBtO,EAAKzD,IAAMyD,EAAKkK,MAAM3N,IACxBT,EAAES,EAAIW,KAAKqR,MAAMvO,EAAKzD,EAAI+R,YA1BiB9O,IAiCrD,CAaOgP,cAAcC,EAAoB1R,EAAgBF,EAAwB2M,EAAwB,aACvG,IAAKhK,KAAK3C,MAAMpB,SAAWsB,GAAU0R,IAAe1R,EAAQ,OAAOyC,KAGnE,MAAMkP,EAAuB,YAAXlF,GAAmC,SAAXA,EACtCkF,GACFlP,KAAK0H,UAAU,EAAGuH,GAIhB1R,EAAS0R,GAAYjP,KAAKmP,YAAYnP,KAAK3C,MAAO4R,GACtDjP,KAAKyG,cACL,IAAI2I,EAA4B,GAG5BC,GAAW,EACf,GAAe,IAAX9R,GAAgBF,GAAOpB,OAAQ,CACjCoT,GAAW,EACX,IAAI9N,EAAM,EACVlE,EAAMyC,SAAQxD,IACZA,EAAEQ,EAAI,EACNR,EAAES,EAAI,EACNT,EAAEM,EAAIc,KAAKC,IAAIrB,EAAEM,EAAG2E,GACpBA,EAAMjF,EAAEM,EAAIN,EAAEO,CAAC,IAEjBuS,EAAW/R,EACXA,EAAQ,QAERA,EAAQ6R,EAAYlP,KAAK3C,MAAQ/B,EAAMsC,KAAKoC,KAAK3C,OAAQ,EAAG4R,GAK9D,GAAI1R,EAAS0R,GAAcjP,KAAK4M,SAAU,CACxC,MAAM0C,EAAatP,KAAK4M,SAASrP,IAAW,GAG5C,IAAIgS,EAAYvP,KAAK4M,SAAS3Q,OAAS,GAClCqT,EAAWrT,QAAUgT,IAAeM,GAAavP,KAAK4M,SAAS2C,IAAYtT,SAC9EgT,EAAaM,EACbvP,KAAK4M,SAAS2C,GAAWzP,SAAQ0P,IAC/B,IAAIlT,EAAIe,EAAMuG,MAAKtH,GAAKA,EAAEiM,MAAQiH,EAAUjH,MACxCjM,IAEG4S,GAAcM,EAAU7O,eAC3BrE,EAAEQ,EAAI0S,EAAU1S,GAAKR,EAAEQ,EACvBR,EAAEM,EAAI4S,EAAU5S,GAAKN,EAAEM,GAEzBN,EAAES,EAAIyS,EAAUzS,GAAKT,EAAES,EACJpB,MAAf6T,EAAU1S,QAAkCnB,IAAhB6T,EAAU5S,IAAiBN,EAAEqE,cAAe,QAMlF2O,EAAWxP,SAAQ0P,IACjB,IAAIC,EAAIpS,EAAMqS,WAAUpT,GAAKA,EAAEiM,MAAQiH,EAAUjH,MACjD,IAAW,IAAPkH,EAAU,CACZ,MAAMnT,EAAIe,EAAMoS,GAEhB,GAAIP,EAEF,YADA5S,EAAES,EAAIyS,EAAUzS,IAGdyS,EAAU7O,cAAgB/E,MAAM4T,EAAU1S,IAAMlB,MAAM4T,EAAU5S,KAClEoD,KAAK6L,kBAAkB2D,EAAWJ,GAE/BI,EAAU7O,eACbrE,EAAEQ,EAAI0S,EAAU1S,GAAKR,EAAEQ,EACvBR,EAAEM,EAAI4S,EAAU5S,GAAKN,EAAEM,EACvBN,EAAES,EAAIyS,EAAUzS,GAAKT,EAAES,EACvBqS,EAAS9C,KAAKhQ,IAEhBe,EAAMsS,OAAOF,EAAG,OAMtB,GAAIP,EACFlP,KAAK+J,QAAQC,GAAQ,OAChB,CAEL,GAAI3M,EAAMpB,OACR,GAAsB,mBAAX+N,EACTA,EAAOzM,EAAQ0R,EAAYG,EAAU/R,QAChC,IAAKgS,EAAU,CACpB,IAAIP,EAASI,GAAwB,SAAXlF,EAAqB,EAAIzM,EAAS0R,EACxDW,EAAmB,SAAX5F,GAAgC,cAAXA,EAC7B6F,EAAoB,UAAX7F,GAAiC,cAAXA,EACnC3M,EAAMyC,SAAQU,IAEZA,EAAK1D,EAAgB,IAAXS,EAAe,EAAKqS,EAAOlS,KAAKqR,MAAMvO,EAAK1D,EAAIgS,GAASpR,KAAK4L,IAAI9I,EAAK1D,EAAGS,EAAS,GAC5FiD,EAAKzD,EAAiB,IAAXQ,GAA+B,IAAf0R,EAAoB,EAAIY,EAASnS,KAAKqR,MAAMvO,EAAKzD,EAAI+R,IAAU,EAAMpR,KAAK4L,IAAI9I,EAAKzD,EAAGQ,GACjH6R,EAAS9C,KAAK9L,EAAK,IAErBnD,EAAQ,GAKPgS,IAAUD,EAAW9T,EAAMsC,KAAKwR,GAAW,EAAG7R,IACnDyC,KAAKoK,iBAAkB,EACvBpK,KAAK3C,MAAQ,GACb+R,EAAStP,SAAQU,IACfR,KAAKwK,QAAQhK,GAAM,UACZA,EAAKkK,KAAK,IAOrB,OAHA1K,KAAK3C,MAAMyC,SAAQxD,UAAYA,EAAEoO,QACjC1K,KAAKyG,aAAY,GAAQyI,UAClBlP,KAAKoK,gBACLpK,IACT,CAQOmP,YAAY9R,EAAwBE,EAAgBuS,GAAQ,GACjE,IAAI3E,EAAwB,GAO5B,OANA9N,EAAMyC,SAAQ,CAACxD,EAAGmE,KAChBnE,EAAEiM,IAAMjM,EAAEiM,KAAOrC,EAAgB4E,SACjCK,EAAK1K,GAAK,CAAC3D,EAAGR,EAAEQ,EAAGF,EAAGN,EAAEM,EAAGG,EAAGT,EAAES,EAAGwL,IAAKjM,EAAEiM,IAAI,IAEhDvI,KAAK4M,SAAWkD,EAAQ,GAAK9P,KAAK4M,UAAY,GAC9C5M,KAAK4M,SAASrP,GAAU4N,EACjBnL,IACT,CAOOoL,eAAe9O,EAAkBiB,GACtCjB,EAAEiM,IAAMjM,EAAEiM,KAAOrC,EAAgB4E,SACjC,IAAI6D,EAAmB,CAAC7R,EAAGR,EAAEQ,EAAGF,EAAGN,EAAEM,EAAGG,EAAGT,EAAES,EAAGwL,IAAKjM,EAAEiM,MACnDjM,EAAEqE,mBAAwBhF,IAARW,EAAEQ,YAA0B6R,EAAE7R,SAAU6R,EAAE/R,EAAON,EAAEqE,eAAcgO,EAAEhO,cAAe,IACxGX,KAAK4M,SAAW5M,KAAK4M,UAAY,GACjC5M,KAAK4M,SAASrP,GAAUyC,KAAK4M,SAASrP,IAAW,GACjD,IAAI+M,EAAQtK,KAAKkL,gBAAgB5O,EAAGiB,GAKpC,OAJe,IAAX+M,EACFtK,KAAK4M,SAASrP,GAAQ+O,KAAKqC,GAE3B3O,KAAK4M,SAASrP,GAAQ+M,GAASqE,EAC1B3O,IACT,CAEUkL,gBAAgB5O,EAAkBiB,GAC1C,OAAOyC,KAAK4M,WAAWrP,IAASmS,WAAUf,GAAKA,EAAEpG,MAAQjM,EAAEiM,QAAS,CACtE,CAEOwH,0BAA0BzT,GAC/B,GAAK0D,KAAK4M,SAGV,IAAK,IAAInM,EAAI,EAAGA,EAAIT,KAAK4M,SAAS3Q,OAAQwE,IAAK,CAC7C,IAAI6J,EAAQtK,KAAKkL,gBAAgB5O,EAAGmE,IACrB,IAAX6J,GACFtK,KAAK4M,SAASnM,GAAGkP,OAAOrF,EAAO,GAGrC,CAGOiD,YAAY/M,GACjB,IAAK,IAAItF,KAAQsF,EACC,MAAZtF,EAAK,IAAuB,QAATA,UAAuBsF,EAAKtF,GAErD,OAAO8E,IACT,EAn6Bc,EAAA8K,OAAS,ECrClB,MAAMkF,EAAiC,CAC5CC,uBAAwB,SACxBC,SAAS,EACTC,MAAM,EACNC,WAAY,OACZC,mBAAoB,IACpBC,eAAgB,KAChB/S,OAAQ,GACRgT,UAAW,CAAEC,OAAQ,2BAA4BC,SAAU,OAAQC,QAAQ,GAC3EF,OAAQ,2BACRG,UAAW,kBACXC,OAAQ,GACRC,WAAY,KACZxK,OAAQ,EACRyK,OAAQ,EACRC,cAAe,IACfC,iBAAkB,yBAClBC,gBAAiB,GACjBC,iBAAkB,CAAEC,OAAQ,kBAAmBC,QAAS,4BACxDC,UAAW,CAAEC,QAAS,MACtBC,IAAK,QAgBMC,EAAoC,CAC/ChB,OAAQ,2BACRC,SAAU,QCnCL,MAAMgB,GCAN,MAAMC,EAAqC,oBAAXlP,QAA8C,oBAAb/G,WACtE,iBAAkBA,UACf,iBAAkB+G,QAGhBA,OAAemP,eAAiBlW,oBAAqB+G,OAAemP,eACtEC,UAAUC,eAAiB,GAE1BD,UAAkBE,iBAAmB,GAK3C,MAAMC,GAoBN,SAASC,EAAmB3N,EAAeW,GAGzC,GAAIX,EAAE4N,QAAQhW,OAAS,EAAG,OAGtBoI,EAAEQ,YAAYR,EAAE6N,iBAEpB,MAAMC,EAAQ9N,EAAE+N,eAAe,GAAInN,EAAiBxJ,SAASyJ,YAAY,eAGzED,EAAeE,eACbH,GACA,GACA,EACAxC,OACA,EACA2P,EAAM/M,QACN+M,EAAM9M,QACN8M,EAAM7M,QACN6M,EAAM7O,SACN,GACA,GACA,GACA,EACA,EACA,MAIFe,EAAEzE,OAAO+F,cAAcV,EACzB,CAOA,SAASoN,EAA0BhO,EAAiBW,GAG9CX,EAAEQ,YAAYR,EAAE6N,iBAEpB,MAAMjN,EAAiBxJ,SAASyJ,YAAY,eAG5CD,EAAeE,eACbH,GACA,GACA,EACAxC,OACA,EACA6B,EAAEe,QACFf,EAAEgB,QACFhB,EAAEiB,QACFjB,EAAEf,SACF,GACA,GACA,GACA,EACA,EACA,MAIFe,EAAEzE,OAAO+F,cAAcV,EACzB,CAOO,SAASqN,EAAWjO,GAErB0N,EAAQQ,eACZR,EAAQQ,cAAe,EAKvBP,EAAmB3N,EAAG,aACxB,CAMO,SAASmO,EAAUnO,GAEnB0N,EAAQQ,cAEbP,EAAmB3N,EAAG,YACxB,CAMO,SAASoO,EAASpO,GAGvB,IAAK0N,EAAQQ,aAAc,OAGvBR,EAAQW,sBACVlQ,OAAOmQ,aAAaZ,EAAQW,4BACrBX,EAAQW,qBAGjB,MAAME,IAAgBnB,EAAUoB,YAGhCb,EAAmB3N,EAAG,WAIjBuO,GACHZ,EAAmB3N,EAAG,SAIxB0N,EAAQQ,cAAe,CACzB,CAOO,SAASO,EAAYzO,GAEJ,UAAlBA,EAAE0O,aACL1O,EAAEzE,OAAuBoT,sBAAsB3O,EAAE4O,UACpD,CAEO,SAASC,EAAa7O,GAEtBoN,EAAUoB,aAKO,UAAlBxO,EAAE0O,aACNV,EAA0BhO,EAAG,aAC/B,CAEO,SAAS8O,EAAa9O,GAGtBoN,EAAUoB,aAIO,UAAlBxO,EAAE0O,cACNhB,EAAQW,oBAAsBlQ,OAAOrB,YAAW,YACvC4Q,EAAQW,oBAEfL,EAA0BhO,EAAG,aAAa,GACzC,IACL,CChMA,MAAa+O,EAgBXC,YAAYC,EAAmBC,EAAmBC,GANxC,KAAAC,QAAS,EAOjBzT,KAAKsT,KAAOA,EACZtT,KAAK1C,IAAMiW,EACXvT,KAAKwT,OAASA,EAEdxT,KAAK0T,WAAa1T,KAAK0T,WAAWC,KAAK3T,MACvCA,KAAK4T,WAAa5T,KAAK4T,WAAWD,KAAK3T,MACvCA,KAAK6T,SAAW7T,KAAK6T,SAASF,KAAK3T,MAEnCA,KAAK8T,OACP,CAGUA,QACR,MAAMjY,EAAKJ,SAASwC,cAAc,OAalC,OAZApC,EAAGkY,UAAUC,IAAI,uBACjBnY,EAAGkY,UAAUC,IAAI,GAAGZ,EAAkBa,SAASjU,KAAK1C,OACpDzB,EAAGmC,MAAMkW,OAAS,MAClBrY,EAAGmC,MAAMmW,WAAa,OACtBnU,KAAKnE,GAAKA,EACVmE,KAAKsT,KAAKhV,YAAY0B,KAAKnE,IAC3BmE,KAAKnE,GAAGuY,iBAAiB,YAAapU,KAAK0T,YACvChC,IACF1R,KAAKnE,GAAGuY,iBAAiB,aAAc9B,GACvCtS,KAAKnE,GAAGuY,iBAAiB,cAAetB,IAGnC9S,IACT,CAGOqU,UAUL,OATIrU,KAAKyT,QAAQzT,KAAK6T,SAAS7T,KAAKsU,gBACpCtU,KAAKnE,GAAG0Y,oBAAoB,YAAavU,KAAK0T,YAC1ChC,IACF1R,KAAKnE,GAAG0Y,oBAAoB,aAAcjC,GAC1CtS,KAAKnE,GAAG0Y,oBAAoB,cAAezB,IAE7C9S,KAAKsT,KAAKkB,YAAYxU,KAAKnE,WACpBmE,KAAKnE,UACLmE,KAAKsT,KACLtT,IACT,CAGU0T,WAAWrP,GACnBrE,KAAKsU,eAAiBjQ,EACtB5I,SAAS2Y,iBAAiB,YAAapU,KAAK4T,YAAY,GACxDnY,SAAS2Y,iBAAiB,UAAWpU,KAAK6T,UAAU,GAChDnC,IACF1R,KAAKnE,GAAGuY,iBAAiB,YAAa5B,GACtCxS,KAAKnE,GAAGuY,iBAAiB,WAAY3B,IAEvCpO,EAAEoQ,kBACFpQ,EAAE6N,gBACJ,CAGU0B,WAAWvP,GACnB,IAAIF,EAAInE,KAAKsU,eACTtU,KAAKyT,OACPzT,KAAK0U,cAAc,OAAQrQ,GAClB3G,KAAKwF,IAAImB,EAAEvH,EAAIqH,EAAErH,GAAKY,KAAKwF,IAAImB,EAAEzH,EAAIuH,EAAEvH,GAAK,IAErDoD,KAAKyT,QAAS,EACdzT,KAAK0U,cAAc,QAAS1U,KAAKsU,gBACjCtU,KAAK0U,cAAc,OAAQrQ,IAE7BA,EAAEoQ,kBACFpQ,EAAE6N,gBACJ,CAGU2B,SAASxP,GACbrE,KAAKyT,QACPzT,KAAK0U,cAAc,OAAQrQ,GAE7B5I,SAAS8Y,oBAAoB,YAAavU,KAAK4T,YAAY,GAC3DnY,SAAS8Y,oBAAoB,UAAWvU,KAAK6T,UAAU,GACnDnC,IACF1R,KAAKnE,GAAG0Y,oBAAoB,YAAa/B,GACzCxS,KAAKnE,GAAG0Y,oBAAoB,WAAY9B,WAEnCzS,KAAKyT,cACLzT,KAAKsU,eACZjQ,EAAEoQ,kBACFpQ,EAAE6N,gBACJ,CAGUwC,cAAcC,EAAcxR,GAEpC,OADInD,KAAKwT,OAAOmB,IAAO3U,KAAKwT,OAAOmB,GAAMxR,GAClCnD,IACT,EA/FiB,EAAAiU,OAAS,gBCrBrB,MAAeW,EAAtB,cAOY,KAAAC,eAEN,CAAC,CA0BP,CAjCaC,eAAwB,OAAO9U,KAAK+U,SAAW,CASnDC,GAAG7R,EAAe8R,GACvBjV,KAAK6U,eAAe1R,GAAS8R,CAC/B,CAEOC,IAAI/R,UACFnD,KAAK6U,eAAe1R,EAC7B,CAEOgS,SACLnV,KAAK+U,WAAY,CACnB,CAEOK,UACLpV,KAAK+U,WAAY,CACnB,CAEOV,iBACErU,KAAK6U,cACd,CAEOpI,aAAa4I,EAAmBlS,GACrC,IAAKnD,KAAK8U,UAAY9U,KAAK6U,gBAAkB7U,KAAK6U,eAAeQ,GAC/D,OAAOrV,KAAK6U,eAAeQ,GAAWlS,EAC1C,ECdF,MAAamS,UAAoBV,EA2B/BvB,YAAYxX,EAAiBY,EAAuB,CAAC,GACnD8Y,QAkQQ,KAAAC,IAAM,KACd,MAAM,OAAE1P,EAAM,OAAEC,GAAWzK,EAAMma,mBAAmBzV,KAAKnE,IACnD6Z,EAAU,CACdlU,MAAOxB,KAAK2V,aAAanU,MACzBC,OAASzB,KAAK2V,aAAalU,OAASzB,KAAK4V,SACzCtU,KAAMtB,KAAK2V,aAAarU,KACxBC,IAAMvB,KAAK2V,aAAapU,IAAMvB,KAAK4V,UAE/BvT,EAAOrC,KAAK6V,cAAgBH,EAClC,MAAO,CACLtU,SAAU,CACRE,KAAMe,EAAKf,KAAOwE,EAClBvE,IAAKc,EAAKd,IAAMwE,GAElB+P,KAAM,CACJtU,MAAOa,EAAKb,MAAQsE,EACpBrE,OAAQY,EAAKZ,OAASsE,GAezB,EAhSD/F,KAAKnE,GAAKA,EACVmE,KAAKwT,OAAS/W,EAEduD,KAAK+V,WAAa/V,KAAK+V,WAAWpC,KAAK3T,MACvCA,KAAKgW,UAAYhW,KAAKgW,UAAUrC,KAAK3T,MACrCA,KAAKmV,SACLnV,KAAKiW,eAAejW,KAAKwT,OAAO0C,UAChClW,KAAKmW,gBACP,CAEOnB,GAAG7R,EAAgD8R,GACxDM,MAAMP,GAAG7R,EAAO8R,EAClB,CAEOC,IAAI/R,GACToS,MAAML,IAAI/R,EACZ,CAEOgS,SACLI,MAAMJ,SACNnV,KAAKnE,GAAGkY,UAAUlV,OAAO,yBACzBmB,KAAKiW,eAAejW,KAAKwT,OAAO0C,SAClC,CAEOd,UACLG,MAAMH,UACNpV,KAAKnE,GAAGkY,UAAUC,IAAI,yBACtBhU,KAAKiW,gBAAe,EACtB,CAEO5B,UACLrU,KAAKoW,kBACLpW,KAAKiW,gBAAe,UACbjW,KAAKnE,GACZ0Z,MAAMlB,SACR,CAEOgC,aAAa5Z,GAClB,IAAI6Z,EAAiB7Z,EAAK6U,SAAW7U,EAAK6U,UAAYtR,KAAKwT,OAAOlC,QAC9DiF,EAAkB9Z,EAAKyZ,UAAYzZ,EAAKyZ,WAAalW,KAAKwT,OAAO0C,SASrE,OARArb,OAAOqF,KAAKzD,GAAMqD,SAAQnF,GAAOqF,KAAKwT,OAAO7Y,GAAO8B,EAAK9B,KACrD2b,IACFtW,KAAKoW,kBACLpW,KAAKmW,kBAEHI,GACFvW,KAAKiW,eAAejW,KAAKwT,OAAO0C,UAE3BlW,IACT,CAGUiW,eAAe9F,GAcvB,OAbIA,GACFnQ,KAAKnE,GAAGkY,UAAUC,IAAI,yBAEtBhU,KAAKnE,GAAGuY,iBAAiB,YAAapU,KAAK+V,YAC3C/V,KAAKnE,GAAGuY,iBAAiB,WAAYpU,KAAKgW,aAE1ChW,KAAKnE,GAAGkY,UAAUlV,OAAO,yBACzBmB,KAAKnE,GAAG0Y,oBAAoB,YAAavU,KAAK+V,YAC9C/V,KAAKnE,GAAG0Y,oBAAoB,WAAYvU,KAAKgW,WACzCvE,EAAU+E,oBAAsBxW,aAC3ByR,EAAU+E,mBAGdxW,IACT,CAIU+V,WAAW1R,GAGfoN,EAAU+E,mBAAqB/E,EAAUoB,cAC7CpB,EAAU+E,kBAAoBxW,KAE9BA,KAAKnE,GAAGkY,UAAUlV,OAAO,yBAC3B,CAIUmX,UAAU3R,GAEdoN,EAAU+E,oBAAsBxW,cAC7ByR,EAAU+E,kBAEjBxW,KAAKnE,GAAGkY,UAAUC,IAAI,yBACxB,CAGUmC,iBACR,IAAIM,EAAmBzW,KAAKwT,OAAOlC,SAAW,SAiB9C,MAhByB,QAArBmF,IACFA,EAAmB,uBAErBzW,KAAK0W,SAAWD,EAAiBE,MAAM,KACpC3J,KAAI1P,GAAOA,EAAIsZ,SACf5J,KAAI1P,GAAO,IAAI8V,EAAkBpT,KAAKnE,GAAIyB,EAAK,CAC9CuZ,MAAQ1T,IACNnD,KAAK8W,aAAa3T,EAAM,EAE1B4T,KAAO5T,IACLnD,KAAKgX,YAAY7T,EAAM,EAEzByM,KAAOzM,IACLnD,KAAKiX,UAAU9T,EAAO7F,EAAI,MAGzB0C,IACT,CAGU8W,aAAa3T,GACrBnD,KAAK2V,aAAe3V,KAAKnE,GAAGyG,wBAC5BtC,KAAK8C,SAAWxH,EAAM0G,iBAAiBhC,KAAKnE,IAC5CmE,KAAKkX,QAAUlX,KAAK8C,SAASE,UAC7BhD,KAAK4V,SAAW,EAChB5V,KAAKmX,WAAahU,EAClBnD,KAAKoX,eACLpX,KAAKqX,eACL,MAAMC,EAAKhc,EAAMic,UAAsBpU,EAAO,CAAEqB,KAAM,cAAe5E,OAAQI,KAAKnE,KAMlF,OALImE,KAAKwT,OAAOqD,OACd7W,KAAKwT,OAAOqD,MAAMS,EAAItX,KAAKwV,OAE7BxV,KAAKnE,GAAGkY,UAAUC,IAAI,yBACtBhU,KAAKyM,aAAa,cAAe6K,GAC1BtX,IACT,CAGUiX,UAAU9T,EAAmB7F,GACrC0C,KAAK4V,SAAW5V,KAAK8C,SAASE,UAAYhD,KAAKkX,QAC/ClX,KAAK6V,aAAe7V,KAAKwX,WAAWrU,EAAO7F,GAC3C0C,KAAKqX,eACL,MAAMC,EAAKhc,EAAMic,UAAsBpU,EAAO,CAAEqB,KAAM,SAAU5E,OAAQI,KAAKnE,KAK7E,OAJImE,KAAKwT,OAAOiE,QACdzX,KAAKwT,OAAOiE,OAAOH,EAAItX,KAAKwV,OAE9BxV,KAAKyM,aAAa,SAAU6K,GACrBtX,IACT,CAGUgX,YAAY7T,GACpB,MAAMmU,EAAKhc,EAAMic,UAAsBpU,EAAO,CAAEqB,KAAM,aAAc5E,OAAQI,KAAKnE,KAYjF,OAXImE,KAAKwT,OAAOuD,MACd/W,KAAKwT,OAAOuD,KAAKO,GAEnBtX,KAAKnE,GAAGkY,UAAUlV,OAAO,yBACzBmB,KAAKyM,aAAa,aAAc6K,GAChCtX,KAAK0X,sBACE1X,KAAKmX,kBACLnX,KAAK2V,oBACL3V,KAAK6V,oBACL7V,KAAKkX,eACLlX,KAAK4V,SACL5V,IACT,CAGUoX,eAQR,OAPApX,KAAK2X,iBAAmBrC,EAAYsC,iBAAiB5K,KAAI9R,GAAQ8E,KAAKnE,GAAGmC,MAAM9C,KAC/E8E,KAAK6X,0BAA4B7X,KAAKnE,GAAGoG,cAAcjE,MAAMoD,SACzDQ,iBAAiB5B,KAAKnE,GAAGoG,eAAeb,SAAS3B,MAAM,YACzDO,KAAKnE,GAAGoG,cAAcjE,MAAMoD,SAAW,YAEzCpB,KAAKnE,GAAGmC,MAAMoD,SAAW,WACzBpB,KAAKnE,GAAGmC,MAAM8Z,QAAU,MACjB9X,IACT,CAGU0X,eAKR,OAJApC,EAAYsC,iBAAiB9X,SAAQ,CAAC5E,EAAMuF,KAC1CT,KAAKnE,GAAGmC,MAAM9C,GAAQ8E,KAAK2X,iBAAiBlX,IAAM,IAAI,IAExDT,KAAKnE,GAAGoG,cAAcjE,MAAMoD,SAAWpB,KAAK6X,2BAA6B,KAClE7X,IACT,CAGUwX,WAAWrU,EAAmB7F,GACtC,MAAMya,EAAS/X,KAAKmX,WAEda,EADmB1c,EAAM4G,4BAA4BlC,KAAKnE,GAAGoG,eAC5BK,wBAEjCoT,EAAU,CACdlU,MAAOxB,KAAK2V,aAAanU,MACzBC,OAAQzB,KAAK2V,aAAalU,OAASzB,KAAK4V,SACxCtU,KAAMtB,KAAK2V,aAAarU,KAAO0W,EAAc1W,KAC7CC,IAAKvB,KAAK2V,aAAapU,IAAMvB,KAAK4V,SAAWoC,EAAczW,KAGvD0W,EAAU9U,EAAMmC,QAAUyS,EAAOzS,QACjC4S,EAAU/U,EAAMG,QAAUyU,EAAOzU,QAEnChG,EAAI6a,QAAQ,MAAQ,EACtBzC,EAAQlU,OAASyW,EACR3a,EAAI6a,QAAQ,MAAQ,IAC7BzC,EAAQlU,OAASyW,EACjBvC,EAAQpU,MAAQ2W,GAEd3a,EAAI6a,QAAQ,MAAQ,EACtBzC,EAAQjU,QAAUyW,EACT5a,EAAI6a,QAAQ,MAAQ,IAC7BzC,EAAQjU,QAAUyW,EAClBxC,EAAQnU,KAAO2W,GAEjB,MAAME,EAAYpY,KAAKqY,eAAe3C,EAAQlU,MAAOkU,EAAQjU,QAa7D,OAZI/D,KAAKqR,MAAM2G,EAAQlU,SAAW9D,KAAKqR,MAAMqJ,EAAU5W,SACjDlE,EAAI6a,QAAQ,MAAQ,IACtBzC,EAAQpU,MAAQoU,EAAQlU,MAAQ4W,EAAU5W,OAE5CkU,EAAQlU,MAAQ4W,EAAU5W,OAExB9D,KAAKqR,MAAM2G,EAAQjU,UAAY/D,KAAKqR,MAAMqJ,EAAU3W,UAClDnE,EAAI6a,QAAQ,MAAQ,IACtBzC,EAAQnU,KAAOmU,EAAQjU,OAAS2W,EAAU3W,QAE5CiU,EAAQjU,OAAS2W,EAAU3W,QAEtBiU,CACT,CAGU2C,eAAeC,EAAgBC,GACvC,MAAM,OAAEzS,EAAM,OAAEC,GAAWzK,EAAMma,mBAAmBzV,KAAKnE,IACnDjB,EAAIoF,KAAKwT,OACTgF,EAAW5d,EAAE4d,SAAW5d,EAAE4d,SAAW1S,EAASxG,OAAOmZ,iBACrDC,EAAW9d,EAAE8d,SAAW9d,EAAE8d,SAAW5S,EAASwS,EAC9CK,EAAY/d,EAAE+d,UAAY/d,EAAE+d,UAAY5S,EAASzG,OAAOmZ,iBACxDG,EAAYhe,EAAEge,UAAYhe,EAAEge,UAAY7S,EAASwS,EAGvD,MAAO,CAAE/W,MAFK9D,KAAK4L,IAAIkP,EAAU9a,KAAKC,IAAI+a,EAAUJ,IAEpC7W,OADD/D,KAAK4L,IAAIqP,EAAWjb,KAAKC,IAAIib,EAAWL,IAEzD,CAGUlB,eACR,IAAKrX,KAAK6V,aAAc,OAAO7V,KAC/B,MAAM,OAAE8F,EAAM,OAAEC,GAAWzK,EAAMma,mBAAmBzV,KAAKnE,IAKzD,OAJAmE,KAAKnE,GAAGmC,MAAMwD,MAAQ,GAAG9D,KAAKqR,MAAM/O,KAAK6V,aAAarU,MAAQsE,OAC9D9F,KAAKnE,GAAGmC,MAAMyD,OAAS,GAAG/D,KAAKqR,MAAM/O,KAAK6V,aAAapU,OAASsE,OAChE/F,KAAKnE,GAAGmC,MAAMuD,IAAM,GAAG7D,KAAKqR,MAAM/O,KAAK6V,aAAatU,IAAMwE,OAC1D/F,KAAKnE,GAAGmC,MAAMsD,KAAO,GAAG5D,KAAKqR,MAAM/O,KAAK6V,aAAavU,KAAOwE,OACrD9F,IACT,CAGUoW,kBAGR,OAFApW,KAAK0W,SAAS5W,SAAQ0Q,GAAUA,EAAO6D,mBAChCrU,KAAK0W,SACL1W,IACT,EAlQiB,EAAA4X,iBAAmB,CAAC,QAAS,SAAU,WAAY,OAAQ,MAAO,UAAW,UClBhG,MAAaiB,UAAoBjE,EAuB/BvB,YAAYxX,EAAiB2X,EAAyB,CAAC,GACrD+B,QACAvV,KAAKnE,GAAKA,EACVmE,KAAKwT,OAASA,EAGd,IAAIsF,EAAatF,EAAOhD,OAAOpU,UAAU,GACzC4D,KAAK+Y,OAASld,EAAGkY,UAAUiF,SAASF,GAAcjd,EAAKA,EAAGQ,cAAcmX,EAAOhD,SAAW3U,EAE1FmE,KAAK0T,WAAa1T,KAAK0T,WAAWC,KAAK3T,MACvCA,KAAK4T,WAAa5T,KAAK4T,WAAWD,KAAK3T,MACvCA,KAAK6T,SAAW7T,KAAK6T,SAASF,KAAK3T,MACnCA,KAAKmV,QACP,CAEOH,GAAG7R,EAAoB8R,GAC5BM,MAAMP,GAAG7R,EAAO8R,EAClB,CAEOC,IAAI/R,GACToS,MAAML,IAAI/R,EACZ,CAEOgS,UACiB,IAAlBnV,KAAK8U,WACTS,MAAMJ,SACNnV,KAAK+Y,OAAO3E,iBAAiB,YAAapU,KAAK0T,YAC3ChC,IACF1R,KAAK+Y,OAAO3E,iBAAiB,aAAc9B,GAC3CtS,KAAK+Y,OAAO3E,iBAAiB,cAAetB,IAG9C9S,KAAKnE,GAAGkY,UAAUlV,OAAO,yBAC3B,CAEOuW,QAAQ6D,GAAa,IACJ,IAAlBjZ,KAAK8U,WACTS,MAAMH,UACNpV,KAAK+Y,OAAOxE,oBAAoB,YAAavU,KAAK0T,YAC9ChC,IACF1R,KAAK+Y,OAAOxE,oBAAoB,aAAcjC,GAC9CtS,KAAK+Y,OAAOxE,oBAAoB,cAAezB,IAE5CmG,GAAYjZ,KAAKnE,GAAGkY,UAAUC,IAAI,yBACzC,CAEOK,UACDrU,KAAKkZ,aAAa1W,OAAOmQ,aAAa3S,KAAKkZ,oBACxClZ,KAAKkZ,YACRlZ,KAAKmZ,UAAUnZ,KAAK6T,SAAS7T,KAAKsU,gBACtCtU,KAAKoV,SAAQ,UACNpV,KAAKnE,UACLmE,KAAKoZ,cACLpZ,KAAKwT,OACZ+B,MAAMlB,SACR,CAEOgC,aAAa5Z,GAElB,OADA5B,OAAOqF,KAAKzD,GAAMqD,SAAQnF,GAAOqF,KAAKwT,OAAO7Y,GAAO8B,EAAK9B,KAClDqF,IACT,CAGU0T,WAAWrP,GAEnB,IAAIoN,EAAU4H,aACd,OAAiB,IAAbhV,EAAEI,QAGDJ,EAAEzE,OAAuB0Z,QAhGZ,sFAiGdtZ,KAAKwT,OAAO+F,QACTlV,EAAEzE,OAAuB0Z,QAAQtZ,KAAKwT,OAAO+F,UAWpDvZ,KAAKsU,eAAiBjQ,SACfrE,KAAKmZ,gBACL1H,EAAUoB,mBACVpB,EAAU+H,YAEjB/d,SAAS2Y,iBAAiB,YAAapU,KAAK4T,YAAY,GACxDnY,SAAS2Y,iBAAiB,UAAWpU,KAAK6T,UAAU,GAChDnC,IACF1R,KAAK+Y,OAAO3E,iBAAiB,YAAa5B,GAC1CxS,KAAK+Y,OAAO3E,iBAAiB,WAAY3B,IAG3CpO,EAAE6N,iBAGEzW,SAASge,eAAgBhe,SAASge,cAA8BC,OAEpEjI,EAAU4H,cAAe,IAjCE,CAmC7B,CAGUM,UAAUtV,GAClB,IAAKrE,KAAKmZ,SAAU,OACpB,MAAM7B,EAAKhc,EAAMic,UAAqBlT,EAAG,CAAEzE,OAAQI,KAAKnE,GAAI2I,KAAM,SAC9DxE,KAAKwT,OAAOoG,MACd5Z,KAAKwT,OAAOoG,KAAKtC,EAAItX,KAAK6Z,MAE5B7Z,KAAKyM,aAAa,OAAQ6K,EAC5B,CAGU1D,WAAWvP,GAEnB,IAAIF,EAAInE,KAAKsU,eAEb,GAAItU,KAAKmZ,SAGP,GAFAnZ,KAAK8Z,YAAYzV,GAEboN,EAAUsI,UAAW,CACvB,MAAMC,EAAQ1a,OAAO2a,UAAUxI,EAAUsI,WAAatI,EAAUsI,UAAsB,IAClF/Z,KAAKkZ,aAAa1W,OAAOmQ,aAAa3S,KAAKkZ,aAC/ClZ,KAAKkZ,YAAc1W,OAAOrB,YAAW,IAAMnB,KAAK2Z,UAAUtV,IAAI2V,QAE9Dha,KAAK2Z,UAAUtV,QAEZ,GAAI3G,KAAKwF,IAAImB,EAAEvH,EAAIqH,EAAErH,GAAKY,KAAKwF,IAAImB,EAAEzH,EAAIuH,EAAEvH,GAAK,EAAG,CAIxDoD,KAAKmZ,UAAW,EAChB1H,EAAUoB,YAAc7S,KAExB,IAAIzD,EAAQyD,KAAKnE,GAA2BsR,eAAe5Q,KACvDA,EACFkV,EAAU+H,YAAejd,EAAKV,GAAqBqe,UAAUC,mBAEtD1I,EAAU+H,YAEnB,MAAMnX,EAAOrC,KAAKnE,GAAGyG,wBACrBtC,KAAKoa,kBAAoB,CAAEtd,EAAGqH,EAAEmB,QAAUjD,EAAKf,KAAM1E,EAAGuH,EAAEb,QAAUjB,EAAKd,KACzEvB,KAAKoZ,OAASpZ,KAAKqa,cAAchW,GACjCrE,KAAKsa,+BACL,MAAMhD,EAAKhc,EAAMic,UAAqBlT,EAAG,CAAEzE,OAAQI,KAAKnE,GAAI2I,KAAM,cAElExE,KAAKua,kBAAkBlW,GACnBrE,KAAKwT,OAAOqD,OACd7W,KAAKwT,OAAOqD,MAAMS,EAAItX,KAAK6Z,MAE7B7Z,KAAKyM,aAAa,YAAa6K,GAGjC,OADAjT,EAAE6N,kBACK,CACT,CAGU2B,SAASxP,GAOjB,GANA5I,SAAS8Y,oBAAoB,YAAavU,KAAK4T,YAAY,GAC3DnY,SAAS8Y,oBAAoB,UAAWvU,KAAK6T,UAAU,GACnDnC,IACF1R,KAAK+Y,OAAOxE,oBAAoB,YAAa/B,GAAW,GACxDxS,KAAK+Y,OAAOxE,oBAAoB,WAAY9B,GAAU,IAEpDzS,KAAKmZ,SAAU,QACVnZ,KAAKmZ,SAGR1H,EAAU+H,aAAa3d,KAAOmE,KAAKnE,GAAGoG,sBACjCwP,EAAU+H,YAGnBxZ,KAAKwa,kBAAkBxc,MAAMoD,SAAWpB,KAAK6X,2BAA6B,KACtE7X,KAAKoZ,SAAWpZ,KAAKnE,GACvBmE,KAAKya,qBAELza,KAAKoZ,OAAOva,SAEd,MAAMyY,EAAKhc,EAAMic,UAAqBlT,EAAG,CAAEzE,OAAQI,KAAKnE,GAAI2I,KAAM,aAC9DxE,KAAKwT,OAAOuD,MACd/W,KAAKwT,OAAOuD,KAAKO,GAEnBtX,KAAKyM,aAAa,WAAY6K,GAG1B7F,EAAU+H,aACZ/H,EAAU+H,YAAYkB,KAAKrW,UAGxBrE,KAAKoZ,cACLpZ,KAAKsU,sBACL7C,EAAUoB,mBACVpB,EAAU+H,mBACV/H,EAAU4H,aACjBhV,EAAE6N,gBACJ,CAGUmI,cAAclX,GACtB,IAAIiW,EAASpZ,KAAKnE,GAYlB,MAXkC,mBAAvBmE,KAAKwT,OAAO4F,OACrBA,EAASpZ,KAAKwT,OAAO4F,OAAOjW,GACI,UAAvBnD,KAAKwT,OAAO4F,SACrBA,EAAS9d,EAAMyI,UAAU/D,KAAKnE,KAE3BJ,SAASkf,KAAK3B,SAASI,IAC1B9d,EAAMmV,SAAS2I,EAAiC,WAAzBpZ,KAAKwT,OAAO/C,SAAwBzQ,KAAKnE,GAAGoG,cAAgBjC,KAAKwT,OAAO/C,UAE7F2I,IAAWpZ,KAAKnE,KAClBmE,KAAK4a,uBAAyB/B,EAAYgC,gBAAgB7N,KAAI9R,GAAQ8E,KAAKnE,GAAGmC,MAAM9C,MAE/Eke,CACT,CAGUmB,kBAAkBlW,GAC1BrE,KAAKoZ,OAAOrF,UAAUC,IAAI,yBAE1B,MAAMhW,EAAQgC,KAAKoZ,OAAOpb,MAe1B,OAdAA,EAAM8c,cAAgB,OAEtB9c,EAAMwD,MAAQxB,KAAKnE,GAAGoK,YAAc,KACpCjI,EAAMyD,OAASzB,KAAKnE,GAAGoH,aAAe,KAEtCjF,EAAM+c,WAAa,YACnB/c,EAAMoD,SAAW,QACjBpB,KAAK8Z,YAAYzV,GACjBrG,EAAMgd,WAAa,OACnB7Z,YAAW,KACLnB,KAAKoZ,SACPpb,EAAMgd,WAAa,QAEpB,GACIhb,IACT,CAGUya,qBACRza,KAAKoZ,OAAOrF,UAAUlV,OAAO,yBAC7B,IAAI2B,EAAQR,KAAKoZ,QAAgCjM,cAEjD,IAAK3M,GAAMkM,kBAAoB1M,KAAK4a,uBAAwB,CAC1D,IAAIxB,EAASpZ,KAAKoZ,OAMd4B,EAAahb,KAAK4a,uBAAmC,YAAK,KAC9DxB,EAAOpb,MAAMgd,WAAahb,KAAK4a,uBAAmC,WAAI,OACtE/B,EAAYgC,gBAAgB/a,SAAQ5E,GAAQke,EAAOpb,MAAM9C,GAAQ8E,KAAK4a,uBAAuB1f,IAAS,OACtGiG,YAAW,IAAMiY,EAAOpb,MAAMgd,WAAaA,GAAY,IAGzD,cADOhb,KAAK4a,uBACL5a,IACT,CAGU8Z,YAAYzV,GACpB,MAAMrG,EAAQgC,KAAKoZ,OAAOpb,OACpB,OAAE8H,EAAM,OAAEC,GAAWzK,EAAMma,mBAAmBzV,KAAKoZ,QAEnD6B,EADkB3f,EAAM4f,oCAAoClb,KAAKoZ,QAC3B9W,wBAEtC2V,EAAUgD,EAAoB3Z,KAC9B4W,EAAU+C,EAAoB1Z,IAG9BzE,GAAKuH,EAAEiB,QAAU2S,GAAWjY,KAAKoa,mBAAmBtd,GAAK,IAAMgJ,EAC/DlJ,GAAKyH,EAAEf,QAAU4U,GAAWlY,KAAKoa,mBAAmBxd,GAAK,IAAMmJ,EACrE/H,EAAMsD,KAAO,GAAGxE,MAChBkB,EAAMuD,IAAM,GAAG3E,KACjB,CAGU0d,+BAQR,OAPAta,KAAKwa,kBAAoBxa,KAAKoZ,OAAOnX,cACF,UAA/BjC,KAAKoZ,OAAOpb,MAAMoD,WACpBpB,KAAK6X,0BAA4B7X,KAAKwa,kBAAkBxc,MAAMoD,SAC1DQ,iBAAiB5B,KAAKwa,mBAAmBpZ,SAAS3B,MAAM,YAC1DO,KAAKwa,kBAAkBxc,MAAMoD,SAAW,aAGrCpB,IACT,CAGO6Z,KACL,MAAMsB,EAAgBnb,KAAKnE,GAAGoG,cACxBmZ,EAAgB9f,EAAM0G,iBAAiBhC,KAAKnE,GAAGoG,eAC/CoZ,EAAkBF,EAAc7Y,wBAChCgZ,EAAStb,KAAKoZ,OAAO9W,yBACrB,OAAEwD,EAAM,OAAEC,GAAWzK,EAAMma,mBAAmBzV,KAAKoZ,QAGnDmC,EAAgCJ,IAAkBC,EACpD,CAAE7Z,IAAK8Z,EAAgB9Z,IAAM6Z,EAAcpY,UAAW1B,KAAM+Z,EAAgB/Z,KAAO8Z,EAAcI,YACjG,CAAEja,IAAK8Z,EAAgB9Z,IAAKD,KAAM+Z,EAAgB/Z,MAEtD,MAAO,CACLF,SAAU,CACRG,KAAM+Z,EAAO/Z,IAAMga,EAA8Bha,KAAOwE,EACxDzE,MAAOga,EAAOha,KAAOia,EAA8Bja,MAAQwE,GAOjE,EA3TiB,EAAA+U,gBAAkB,CAAC,aAAc,gBAAiB,WAAY,OAAQ,MAAO,WAAY,cC7BrG,MAAMY,UAAoB7G,EAM/BvB,YAAYxX,EAAiBY,EAAuB,CAAC,GACnD8Y,QACAvV,KAAKnE,GAAKA,EACVmE,KAAKwT,OAAS/W,EAEduD,KAAK0b,YAAc1b,KAAK0b,YAAY/H,KAAK3T,MACzCA,KAAK2b,YAAc3b,KAAK2b,YAAYhI,KAAK3T,MACzCA,KAAKmV,SACLnV,KAAK4b,cACP,CAEO5G,GAAG7R,EAAwC8R,GAChDM,MAAMP,GAAG7R,EAAO8R,EAClB,CAEOC,IAAI/R,GACToS,MAAML,IAAI/R,EACZ,CAEOgS,UACiB,IAAlBnV,KAAK8U,WACTS,MAAMJ,SACNnV,KAAKnE,GAAGkY,UAAUC,IAAI,gBACtBhU,KAAKnE,GAAGkY,UAAUlV,OAAO,yBACzBmB,KAAKnE,GAAGuY,iBAAiB,aAAcpU,KAAK0b,aAC5C1b,KAAKnE,GAAGuY,iBAAiB,aAAcpU,KAAK2b,aACxCjK,IACF1R,KAAKnE,GAAGuY,iBAAiB,eAAgBlB,GACzClT,KAAKnE,GAAGuY,iBAAiB,eAAgBjB,IAE7C,CAEOiC,QAAQ6D,GAAa,IACJ,IAAlBjZ,KAAK8U,WACTS,MAAMH,UACNpV,KAAKnE,GAAGkY,UAAUlV,OAAO,gBACpBoa,GAAYjZ,KAAKnE,GAAGkY,UAAUC,IAAI,yBACvChU,KAAKnE,GAAG0Y,oBAAoB,aAAcvU,KAAK0b,aAC/C1b,KAAKnE,GAAG0Y,oBAAoB,aAAcvU,KAAK2b,aAC3CjK,IACF1R,KAAKnE,GAAG0Y,oBAAoB,eAAgBrB,GAC5ClT,KAAKnE,GAAG0Y,oBAAoB,eAAgBpB,IAEhD,CAEOkB,UACLrU,KAAKoV,SAAQ,GACbpV,KAAKnE,GAAGkY,UAAUlV,OAAO,gBACzBmB,KAAKnE,GAAGkY,UAAUlV,OAAO,yBACzB0W,MAAMlB,SACR,CAEOgC,aAAa5Z,GAGlB,OAFA5B,OAAOqF,KAAKzD,GAAMqD,SAAQnF,GAAOqF,KAAKwT,OAAO7Y,GAAO8B,EAAK9B,KACzDqF,KAAK4b,eACE5b,IACT,CAGU0b,YAAYrX,GAEpB,IAAKoN,EAAUoB,YAAa,OAC5B,IAAK7S,KAAK6b,SAASpK,EAAUoB,YAAYhX,IAAK,OAC9CwI,EAAE6N,iBACF7N,EAAEoQ,kBAGEhD,EAAU+H,aAAe/H,EAAU+H,cAAgBxZ,MACrDyR,EAAU+H,YAAYmC,YAAYtX,GAEpCoN,EAAU+H,YAAcxZ,KAExB,MAAMsX,EAAKhc,EAAMic,UAAqBlT,EAAG,CAAEzE,OAAQI,KAAKnE,GAAI2I,KAAM,aAC9DxE,KAAKwT,OAAOnK,MACdrJ,KAAKwT,OAAOnK,KAAKiO,EAAItX,KAAKwV,IAAI/D,EAAUoB,cAE1C7S,KAAKyM,aAAa,WAAY6K,GAC9BtX,KAAKnE,GAAGkY,UAAUC,IAAI,oBAExB,CAGU2H,YAAYtX,GAEpB,IAAKoN,EAAUoB,aAAepB,EAAU+H,cAAgBxZ,KAAM,OAC9DqE,EAAE6N,iBACF7N,EAAEoQ,kBAEF,MAAM6C,EAAKhc,EAAMic,UAAqBlT,EAAG,CAAEzE,OAAQI,KAAKnE,GAAI2I,KAAM,YAMlE,GALIxE,KAAKwT,OAAOsI,KACd9b,KAAKwT,OAAOsI,IAAIxE,EAAItX,KAAKwV,IAAI/D,EAAUoB,cAEzC7S,KAAKyM,aAAa,UAAW6K,GAEzB7F,EAAU+H,cAAgBxZ,KAAM,CAKlC,IAAI+b,SAJGtK,EAAU+H,YAKjB,IAAI1b,EAAwBkC,KAAKnE,GAAGoG,cACpC,MAAQ8Z,GAAcje,GACpBie,EAAaje,EAAOoc,WAAWC,YAC/Brc,EAASA,EAAOmE,cAEd8Z,GACFA,EAAWL,YAAYrX,GAG7B,CAGOqW,KAAKrW,GACVA,EAAE6N,iBACF,MAAMoF,EAAKhc,EAAMic,UAAqBlT,EAAG,CAAEzE,OAAQI,KAAKnE,GAAI2I,KAAM,SAC9DxE,KAAKwT,OAAOkH,MACd1a,KAAKwT,OAAOkH,KAAKpD,EAAItX,KAAKwV,IAAI/D,EAAUoB,cAE1C7S,KAAKyM,aAAa,OAAQ6K,EAC5B,CAGUuE,SAAShgB,GACjB,OAAOA,KAAQmE,KAAKmR,QAAUnR,KAAKmR,OAAOtV,GAC5C,CAGU+f,eACR,OAAK5b,KAAKwT,OAAOrC,QACiB,iBAAvBnR,KAAKwT,OAAOrC,OACrBnR,KAAKmR,OAAUtV,GAAoBA,EAAGkY,UAAUiF,SAAShZ,KAAKwT,OAAOrC,SAAqBtV,EAAGmgB,QAAQhc,KAAKwT,OAAOrC,QAEjHnR,KAAKmR,OAASnR,KAAKwT,OAAOrC,OAErBnR,MANyBA,IAOlC,CAGUwV,IAAIoE,GACZ,MAAO,CACLrJ,UAAWqJ,EAAK/d,MACb+d,EAAKC,KAEZ,EC7JK,MAAMoC,EAEX1gB,YAAYM,GAEV,OADKA,EAAGqe,YAAare,EAAGqe,UAAY,IAAI+B,EAAUpgB,IAC3CA,EAAGqe,SACZ,CAOA7G,YAAYxX,GACVmE,KAAKnE,GAAKA,CACZ,CAEOmZ,GAAGK,EAAmBJ,GAQ3B,OAPIjV,KAAKkc,aAAe,CAAC,OAAQ,YAAa,YAAY/D,QAAQ9C,IAAc,EAC9ErV,KAAKkc,YAAYlH,GAAGK,EAAgDJ,GAC3DjV,KAAKma,aAAe,CAAC,OAAQ,WAAY,WAAWhC,QAAQ9C,IAAc,EACnFrV,KAAKma,YAAYnF,GAAGK,EAA8CJ,GACzDjV,KAAKmc,aAAe,CAAC,cAAe,SAAU,cAAchE,QAAQ9C,IAAc,GAC3FrV,KAAKmc,YAAYnH,GAAGK,EAAsDJ,GAErEjV,IACT,CAEOkV,IAAIG,GAQT,OAPIrV,KAAKkc,aAAe,CAAC,OAAQ,YAAa,YAAY/D,QAAQ9C,IAAc,EAC9ErV,KAAKkc,YAAYhH,IAAIG,GACZrV,KAAKma,aAAe,CAAC,OAAQ,WAAY,WAAWhC,QAAQ9C,IAAc,EACnFrV,KAAKma,YAAYjF,IAAIG,GACZrV,KAAKmc,aAAe,CAAC,cAAe,SAAU,cAAchE,QAAQ9C,IAAc,GAC3FrV,KAAKmc,YAAYjH,IAAIG,GAEhBrV,IACT,CAEOoc,eAAe3f,GAMpB,OALKuD,KAAKkc,YAGRlc,KAAKkc,YAAY7F,aAAa5Z,GAF9BuD,KAAKkc,YAAc,IAAIrD,EAAY7Y,KAAKnE,GAAIY,GAIvCuD,IACT,CAEOqc,iBAKL,OAJIrc,KAAKkc,cACPlc,KAAKkc,YAAY7H,iBACVrU,KAAKkc,aAEPlc,IACT,CAEOsc,eAAe7f,GAMpB,OALKuD,KAAKmc,YAGRnc,KAAKmc,YAAY9F,aAAa5Z,GAF9BuD,KAAKmc,YAAc,IAAI7G,EAAYtV,KAAKnE,GAAIY,GAIvCuD,IACT,CAEOuc,iBAKL,OAJIvc,KAAKmc,cACPnc,KAAKmc,YAAY9H,iBACVrU,KAAKmc,aAEPnc,IACT,CAEOwc,eAAe/f,GAMpB,OALKuD,KAAKma,YAGRna,KAAKma,YAAY9D,aAAa5Z,GAF9BuD,KAAKma,YAAc,IAAIsB,EAAYzb,KAAKnE,GAAIY,GAIvCuD,IACT,CAEOyc,iBAKL,OAJIzc,KAAKma,cACPna,KAAKma,YAAY9F,iBACVrU,KAAKma,aAEPna,IACT,EC7EF,MAAM0c,EAAK,ICOJ,MAEErL,UAAUxV,EAAyBY,EAAc9B,EAAa0E,GAuBnE,OAtBAW,KAAK2c,eAAe9gB,GAAIiE,SAAQ8c,IAC9B,GAAa,YAATngB,GAA+B,WAATA,EACxBmgB,EAAIT,aAAeS,EAAIT,YAAY1f,UAC9B,GAAa,YAATA,EACTmgB,EAAIT,aAAeS,EAAIL,sBAClB,GAAa,WAAT9f,EACTmgB,EAAIN,eAAe,CAAE,CAAC3hB,GAAM0E,QACvB,CACL,MAAM9C,EAAOqgB,EAAI/gB,GAAGsR,cAAc5Q,KAClC,IAAI+U,EAAUsL,EAAI/gB,GAAGghB,aAAa,qBAAuBD,EAAI/gB,GAAGghB,aAAa,qBAAuBtgB,EAAKE,KAAK4U,UAAUC,QACpH4E,GAAY3Z,EAAKE,KAAKwT,uBAC1B2M,EAAIN,eAAe,IACd/f,EAAKE,KAAK4U,UACRC,UAAS4E,WAEZW,MAAOpa,EAAKoa,MACZE,KAAMta,EAAKsa,KACXU,OAAQhb,EAAKgb,aAKdzX,IACT,CAEOuQ,UAAU1U,EAAyBY,EAAc9B,EAAa0E,GAqBnE,OApBAW,KAAK2c,eAAe9gB,GAAIiE,SAAQ8c,IAC9B,GAAa,YAATngB,GAA+B,WAATA,EACxBmgB,EAAIV,aAAeU,EAAIV,YAAYzf,UAC9B,GAAa,YAATA,EACTmgB,EAAIV,aAAeU,EAAIP,sBAClB,GAAa,WAAT5f,EACTmgB,EAAIR,eAAe,CAAE,CAACzhB,GAAM0E,QACvB,CACL,MAAM9C,EAAOqgB,EAAI/gB,GAAGsR,cAAc5Q,KAClCqgB,EAAIR,eAAe,IACd7f,EAAKE,KAAK8T,UAGXsG,MAAOpa,EAAKoa,MACZE,KAAMta,EAAKsa,KACX6C,KAAMnd,EAAKmd,WAKZ5Z,IACT,CAEO8c,OAAOjhB,EAAsBY,GAElC,OADAuD,KAAK2c,eAAe9gB,GAAIiE,SAAQ8c,GAAOA,EAAIR,eAAe3f,KACnDuD,IACT,CAEO+c,UAAUlhB,EAAyBY,EAA0B9B,EAAa0E,GAkB/E,MAjB2B,mBAAhB5C,EAAK0U,QAA0B1U,EAAKugB,UAC7CvgB,EAAKugB,QAAUvgB,EAAK0U,OACpB1U,EAAK0U,OAAUtV,GAAOY,EAAKugB,QAAQnhB,IAErCmE,KAAK2c,eAAe9gB,GAAIiE,SAAQ8c,IACjB,YAATngB,GAA+B,WAATA,EACxBmgB,EAAIzC,aAAeyC,EAAIzC,YAAY1d,KACjB,YAATA,EACLmgB,EAAIzC,aACNyC,EAAIH,iBAEY,WAAThgB,EACTmgB,EAAIJ,eAAe,CAAE,CAAC7hB,GAAM0E,IAE5Bud,EAAIJ,eAAe/f,MAGhBuD,IACT,CAGOid,YAAYphB,GACjB,UAAUA,GAAMA,EAAGqe,WAAare,EAAGqe,UAAUC,cAAgBte,EAAGqe,UAAUC,YAAYrF,SACxF,CAGOoI,YAAYrhB,GACjB,UAAUA,GAAMA,EAAGqe,WAAare,EAAGqe,UAAUgC,cAAgBrgB,EAAGqe,UAAUgC,YAAYpH,SACxF,CAGOqI,YAAYthB,GACjB,UAAUA,GAAMA,EAAGqe,WAAare,EAAGqe,UAAUiC,cAAgBtgB,EAAGqe,UAAUiC,YAAYrH,SACxF,CAEOE,GAAGnZ,EAAyB8Y,EAAcM,GAS/C,OARAjV,KAAK2c,eAAe9gB,GAAIiE,SAAQ8c,GAC9BA,EAAI5H,GAAGL,GAAOxR,IACZ8R,EACE9R,EACAsO,EAAUoB,YAAcpB,EAAUoB,YAAYhX,GAAKsH,EAAMvD,OACzD6R,EAAUoB,YAAcpB,EAAUoB,YAAYuG,OAAS,KAAK,MAG3DpZ,IACT,CAEOkV,IAAIrZ,EAAyB8Y,GAElC,OADA3U,KAAK2c,eAAe9gB,GAAIiE,SAAQ8c,GAAOA,EAAI1H,IAAIP,KACxC3U,IACT,CAGU2c,eAAenhB,EAAuB4hB,GAAS,GACvD,IAAIC,EAAQ/hB,EAAMgiB,YAAY9hB,GAC9B,IAAK6hB,EAAMphB,OAAQ,MAAO,GAC1B,IAAIF,EAAOshB,EAAMrQ,KAAI3I,GAAKA,EAAE6V,YAAckD,EAASnB,EAAUsB,KAAKlZ,GAAK,QAEvE,OADK+Y,GAAUrhB,EAAK2M,QAAO8U,GAAKA,IACzBzhB,CACT,GD9EF,MAAa0hB,EAeJliB,YAAYwC,EAA4B,CAAC,EAAG2f,EAA+B,eAChF,IAAI7hB,EAAK4hB,EAAUE,eAAeD,GAClC,OAAK7hB,GASAA,EAAG+hB,YACN/hB,EAAG+hB,UAAY,IAAIH,EAAU5hB,EAAIP,EAAMwI,UAAU/F,KAE5ClC,EAAG+hB,YAXkB,iBAAfF,EACTG,QAAQC,MAAM,wDAA0DJ,EAA1D,+IAGdG,QAAQC,MAAM,gDAET,KAMX,CAWOviB,eAAewC,EAA4B,CAAC,EAAGe,EAAW,eAC/D,IAAIif,EAAqB,GAWzB,OAVAN,EAAUO,gBAAgBlf,GAAUgB,SAAQjE,IACrCA,EAAG+hB,YACN/hB,EAAG+hB,UAAY,IAAIH,EAAU5hB,EAAIP,EAAMwI,UAAU/F,KAEnDggB,EAAMzR,KAAKzQ,EAAG+hB,UAAU,IAEL,IAAjBG,EAAM9hB,QACR4hB,QAAQC,MAAM,wDAA0Dhf,EAA1D,+IAGTif,CACT,CASOxiB,eAAeuC,EAAqB2J,EAAwB,CAAC,GAClE,IAAK3J,EAAQ,OAAO,KAEpB,IAAIjC,EAAKiC,EACT,GAAIjC,EAAG+hB,UAAW,CAEhB,MAAMrhB,EAAOV,EAAG+hB,UAGhB,OAFInW,IAAKlL,EAAKE,KAAO,IAAIF,EAAKE,QAASgL,SAClB9L,IAAjB8L,EAAIwW,UAAwB1hB,EAAK2hB,KAAKzW,EAAIwW,UACvC1hB,EAKT,IADqBuB,EAAOiW,UAAUiF,SAAS,eAC1ByE,EAAUU,YAC7B,GAAIV,EAAUU,YACZtiB,EAAK4hB,EAAUU,YAAYrgB,EAAQ2J,GAAK,GAAM,OACzC,CACL,IAAI/L,EAAMD,SAAS2iB,eAAeC,mBAAmB,IACrD3iB,EAAIif,KAAK2D,UAAY,0BAA0B7W,EAAI8W,OAAS,aAC5D1iB,EAAKH,EAAIif,KAAKsD,SAAS,GACvBngB,EAAOQ,YAAYzC,GAMvB,OADW4hB,EAAUF,KAAK9V,EAAK5L,EAEjC,CAMAN,sBAAsBijB,GACpBf,EAAUe,YAAcA,CAC1B,CAiDWC,kBACT,IAAKze,KAAK0e,aAAc,CACtB,IAAIC,EAAmBljB,SAASwC,cAAc,OAC9C0gB,EAAiBC,UAAY,sBACzB5e,KAAKvD,KAAKwU,kBACZ0N,EAAiBL,UAAYte,KAAKvD,KAAKwU,iBAEzCjR,KAAK0e,aAAejjB,SAASwC,cAAc,OAC3C+B,KAAK0e,aAAa3K,UAAUC,IAAIhU,KAAKvD,KAAKuU,iBAAkBhB,EAAaW,UAAW3Q,KAAKvD,KAAKkU,WAC9F3Q,KAAKye,YAAYngB,YAAYqgB,GAE/B,OAAO3e,KAAK0e,YACd,CA8BA,YAAmB7iB,EAAqBY,EAAyB,CAAC,GAtB3D,KAAAoiB,gBAAkB,CAAC,EAYhB,KAAAC,cAAgB,EAWxB9e,KAAKnE,GAAKA,EACVY,EAAOA,GAAQ,CAAC,EAEXZ,EAAGkY,UAAUiF,SAAS,eACzBhZ,KAAKnE,GAAGkY,UAAUC,IAAI,cAIpBvX,EAAK0R,MACP1R,EAAKqU,OAASrU,EAAK4J,OAAS5J,EAAK0R,WAC1B1R,EAAK0R,KAEd,IAAI4Q,EAAUzjB,EAAM0jB,SAASnjB,EAAGghB,aAAa,WAGzB,SAAhBpgB,EAAKc,eACAd,EAAKc,YAGsB5B,IAAhCc,EAAKwT,yBACNxT,EAAkCwiB,wBAA0BxiB,EAAKwT,wBAIpE,IAAIhQ,EAA6B,IAAI3E,EAAMwI,UAAUkM,GACnDzS,OAAQjC,EAAM0jB,SAASnjB,EAAGghB,aAAa,eAAiB7M,EAAazS,OACrEuT,OAAQiO,GAAoBzjB,EAAM0jB,SAASnjB,EAAGghB,aAAa,gBAAkB7M,EAAac,OAC1FzK,OAAQ0Y,GAAoBzjB,EAAM0jB,SAASnjB,EAAGghB,aAAa,gBAAkB7M,EAAa3J,OAC1F6Y,WAAY5jB,EAAM6jB,OAAOtjB,EAAGghB,aAAa,eAAiB7M,EAAakP,WACvE3O,UAAW,CACTC,QAAS/T,EAAK2iB,YAAc,IAAM3iB,EAAK2iB,YAAe3iB,EAAK+T,OAAS/T,EAAK+T,OAAS,KAAQR,EAAaO,UAAUC,QAEnHU,iBAAkB,CAChBC,OAAQ1U,EAAKkU,WAAaX,EAAakB,iBAAiBC,OACxDC,QAASpB,EAAakB,iBAAiBE,UAGvCvV,EAAGghB,aAAa,gBAClB5c,EAASiQ,QAAU5U,EAAM6jB,OAAOtjB,EAAGghB,aAAa,gBAGlD7c,KAAKvD,KAAOnB,EAAM2E,SAASxD,EAAMwD,GACjCxD,EAAO,KACPuD,KAAKqf,cAGoB,IAArBrf,KAAKvD,KAAKc,SAAiByC,KAAKvD,KAAK6iB,sBAAwBtf,KAAKuf,qBAAuBvf,KAAKvD,KAAKsU,gBACrG/Q,KAAKwf,YAAcxf,KAAKyf,YACxBzf,KAAKvD,KAAKc,OAAS,GAGC,SAAlByC,KAAKvD,KAAK8U,MACZvR,KAAKvD,KAAK8U,IAA8B,QAAvB1V,EAAGmC,MAAMuV,WAExBvT,KAAKvD,KAAK8U,KACZvR,KAAKnE,GAAGkY,UAAUC,IAAI,kBAIxB,MAAM0L,EAAmC1f,KAAKnE,GAAGoG,eAAeA,cAChE,IAAI0d,EAAiBD,GAAa3L,UAAUiF,SAAShJ,EAAaW,WAAa+O,EAAYvS,mBAAgBxR,EACvGgkB,IACFA,EAAeC,QAAU5f,KACzBA,KAAK2f,eAAiBA,EACtB3f,KAAKnE,GAAGkY,UAAUC,IAAI,qBACtB2L,EAAe9jB,GAAGkY,UAAUC,IAAI,wBAGlChU,KAAK6f,kBAA8C,SAAzB7f,KAAKvD,KAAK2T,WAChCpQ,KAAK6f,mBAA8C,YAAzB7f,KAAKvD,KAAK2T,WAEtCpQ,KAAKoQ,gBAAWzU,GAAW,IAGQ,iBAAxBqE,KAAKvD,KAAK2T,YAA0BpQ,KAAKvD,KAAK6T,gBAAkBtQ,KAAKvD,KAAK6T,iBAAmBN,EAAaM,iBACnHtQ,KAAKvD,KAAK2T,WAAapQ,KAAKvD,KAAK2T,WAAapQ,KAAKvD,KAAK6T,sBACjDtQ,KAAKvD,KAAK6T,gBAEnBtQ,KAAKoQ,WAAWpQ,KAAKvD,KAAK2T,YAAY,IAIC,WAArCpQ,KAAKvD,KAAKwT,yBACZjQ,KAAKvD,KAAKwT,uBAAyByB,GAGrC1R,KAAK8f,iBAAmB,SAAW5Z,EAAgB4E,SACnD9K,KAAKnE,GAAGkY,UAAUC,IAAIhU,KAAK8f,kBAE3B9f,KAAK+f,kBAEL,IAAIvB,EAAcxe,KAAKvD,KAAK+hB,aAAef,EAAUe,aAAetY,EA6BpE,GA5BAlG,KAAKggB,OAAS,IAAIxB,EAAY,CAC5BjhB,OAAQyC,KAAKyf,YACblZ,MAAOvG,KAAKvD,KAAK8J,MACjBF,OAAQrG,KAAKvD,KAAK4J,OAClBG,SAAWyZ,IACT,IAAI1f,EAAO,EACXP,KAAKggB,OAAO3iB,MAAMyC,SAAQxD,IAAOiE,EAAO7C,KAAKC,IAAI4C,EAAMjE,EAAEM,EAAIN,EAAEO,EAAE,IACjEojB,EAAQngB,SAAQxD,IACd,IAAIT,EAAKS,EAAET,GACNA,IACDS,EAAE+P,YACAxQ,GAAIA,EAAGgD,gBACJvC,EAAE+P,YAETrM,KAAKkgB,cAAcrkB,EAAIS,OAG3B0D,KAAKmgB,eAAc,EAAO5f,EAAK,IAI/BP,KAAKvD,KAAK0T,OACZnQ,KAAKyG,cACLzG,KAAKogB,eAAetgB,SAAQjE,GAAMmE,KAAKqgB,gBAAgBxkB,KACvDmE,KAAKyG,aAAY,IAIfzG,KAAKvD,KAAKwhB,SAAU,CACtB,IAAIA,EAAWje,KAAKvD,KAAKwhB,gBAClBje,KAAKvD,KAAKwhB,SACbA,EAAShiB,QAAQ+D,KAAKke,KAAKD,GAGjCje,KAAKsgB,aAAatgB,KAAKvD,KAAKyT,SAE5BlQ,KAAKmgB,gBACLngB,KAAKnE,GAAGkY,UAAUC,IAAI,MAAQhU,KAAKvD,KAAKc,QAGpCyC,KAAKvD,KAAKoR,iBAAmB4D,EAAUsI,YAAWtI,EAAUsI,WAAY,QACzCpe,IAA/BqE,KAAKvD,KAAK8T,WAAWyJ,QAAqBvI,EAAUsI,UAAY/Z,KAAKvD,KAAK8T,UAAUyJ,OAExFha,KAAKugB,mBACLvgB,KAAKwgB,qBACLxgB,KAAKygB,oBACP,CAiBOC,UAAUllB,EAA0CuC,GAKzD,IAAIlC,EACA2E,EACJ,GAAmB,iBAARhF,EAAkB,CAC3B,IAAIE,EAAMD,SAAS2iB,eAAeC,mBAAmB,IACrD3iB,EAAIif,KAAK2D,UAAY9iB,EACrBK,EAAKH,EAAIif,KAAKsD,SAAS,QAClB,GAAyB,IAArB0C,UAAU1kB,QAAqC,IAArB0kB,UAAU1kB,cAT7BN,KADSoB,EAUsDvB,GATtEK,SAA4BF,IAARoB,EAAED,QAA2BnB,IAARoB,EAAEH,QAA2BjB,IAARoB,EAAEA,QAA2BpB,IAARoB,EAAEF,QAAiClB,IAAdoB,EAAEyQ,SAWnH,GADAhN,EAAOzC,EAAUvC,EACbgF,GAAM3E,GACRA,EAAK2E,EAAK3E,QACL,GAAI4hB,EAAUU,YACnBtiB,EAAK4hB,EAAUU,YAAYne,KAAKnE,GAAIkC,GAAS,GAAM,OAC9C,CACL,IAAIyP,EAAUzP,GAASyP,SAAW,GAC9B9R,EAAMD,SAAS2iB,eAAeC,mBAAmB,IACrD3iB,EAAIif,KAAK2D,UAAY,+BAA+Bte,KAAKvD,KAAKkU,WAAa,4CAA4CnD,gBACvH3R,EAAKH,EAAIif,KAAKsD,SAAS,QAGzBpiB,EAAKL,EAvBP,IAA2BuB,EA0B3B,IAAKlB,EAAI,OAIT,GADA2E,EAAO3E,EAAGsR,cACN3M,GAAQ3E,EAAGoG,gBAAkBjC,KAAKnE,IAAMmE,KAAKggB,OAAO3iB,MAAMuG,MAAKtH,GAAKA,EAAEiM,MAAQ/H,EAAK+H,MAAM,OAAO1M,EAKpG,IAAI+kB,EAAU5gB,KAAK6gB,UAAUhlB,GAc7B,OAbAkC,EAAUzC,EAAMwI,UAAU/F,IAAY,CAAC,EACvCzC,EAAM2E,SAASlC,EAAS6iB,GACxBpgB,EAAOR,KAAKggB,OAAOpV,YAAY7M,GAC/BiC,KAAK8gB,WAAWjlB,EAAIkC,GAEhBiC,KAAK+gB,iBACP/gB,KAAKnE,GAAGmlB,QAAQnlB,GAEhBmE,KAAKnE,GAAGyC,YAAYzC,GAGtBmE,KAAKihB,WAAWplB,EAAIkC,GAEblC,CACT,CAUOqS,YAAYrS,EAAyBqlB,EAAwBC,EAA2BC,GAAc,GAC3G,IAOIC,EAPA7gB,EAAO3E,EAAGsR,cAId,GAHK3M,IACHA,EAAOR,KAAKihB,WAAWplB,GAAIsR,eAEzB3M,EAAKof,SAAS/jB,GAAI,OAAO2E,EAAKof,QAIlC,IAUI0B,EAVA/kB,EAAkByD,KACtB,KAAOzD,IAAS8kB,GACdA,EAAkB9kB,EAAKE,MAAM8kB,YAC7BhlB,EAAOA,EAAKojB,gBAAgBpjB,KAG9B2kB,EAAM5lB,EAAMwI,UAAU,IAAKud,GAAmB,CAAC,EAAIpD,cAAUtiB,KAAeulB,GAAO1gB,EAAK+gB,cACxF/gB,EAAK+gB,YAAcL,EAIA,SAAfA,EAAI3jB,SACN+jB,GAAa,EACbJ,EAAI3jB,OAASG,KAAKC,IAAI6C,EAAKzD,GAAK,EAAGokB,GAAWpkB,GAAK,GACnDmkB,EAAI5B,sBAAuB,GAI7B,IACIkC,EACAC,EAFAjU,EAAUhN,EAAK3E,GAAGQ,cAAc,4BAGpC,GAAI+kB,EAAa,CASf,GARAphB,KAAK0hB,UAAUlhB,EAAK3E,IACpB4lB,EAAa,IAAIjhB,EAAM1D,EAAE,EAAGF,EAAE,GAC9BtB,EAAMsT,sBAAsB6S,UACrBA,EAAWF,YACd/gB,EAAKgN,UACPiU,EAAWjU,QAAUhN,EAAKgN,eACnBhN,EAAKgN,SAEViQ,EAAUU,YACZqD,EAAU/D,EAAUU,YAAYne,KAAKnE,GAAI4lB,GAAY,GAAM,OACtD,CACL,IAAI/lB,EAAMD,SAAS2iB,eAAeC,mBAAmB,IACrD3iB,EAAIif,KAAK2D,UAAY,sCACrBkD,EAAU9lB,EAAIif,KAAKsD,SAAS,GAC5BuD,EAAQljB,YAAYkP,GACpB9R,EAAIif,KAAK2D,UAAY,8CACrB9Q,EAAU9R,EAAIif,KAAKsD,SAAS,GAC5Bzd,EAAK3E,GAAGyC,YAAYkP,GAEtBxN,KAAK2hB,uBAAuBnhB,GAI9B,GAAI2gB,EAAW,CACb,IAAIpkB,EAAIukB,EAAaJ,EAAI3jB,OAASiD,EAAKzD,EACnCF,EAAI2D,EAAK3D,EAAIskB,EAAUtkB,EACvBmB,EAAQwC,EAAK3E,GAAGmC,MACpBA,EAAMgd,WAAa,OACnBhb,KAAK4hB,OAAOphB,EAAK3E,GAAI,CAACkB,IAAGF,MACzBsE,YAAW,IAAOnD,EAAMgd,WAAa,OAGvC,IAAI4E,EAAUpf,EAAKof,QAAUnC,EAAUoE,QAAQrU,EAAS0T,GAkBxD,OAjBIC,GAAW9Z,UAASuY,EAAQ9R,SAAU,GACtCwT,IAAY1B,EAAQkC,aAAc,GAGlCV,GACFxB,EAAQc,UAAUc,EAASC,GAIzBN,IACEA,EAAU9Z,QAEZ7E,OAAOrB,YAAW,IAAM7F,EAAM0W,mBAAmBmP,EAAUY,OAAQ,aAAcnC,EAAQ/jB,KAAK,GAE9F+jB,EAAQc,UAAUlgB,EAAK3E,GAAI2E,IAGxBof,CACT,CAMOoC,gBAAgBC,GACrB,IAAIC,EAAQliB,KAAK2f,gBAAgBpjB,KAC5B2lB,IAELA,EAAMzb,cACNyb,EAAMC,aAAaniB,KAAK2f,eAAe9jB,IAAI,GAAM,GACjDmE,KAAKggB,OAAO3iB,MAAMyC,SAAQxD,IAExBA,EAAEQ,GAAKkD,KAAK2f,eAAe7iB,EAC3BR,EAAEM,GAAKoD,KAAK2f,eAAe/iB,EAC3BslB,EAAMxB,UAAUpkB,EAAET,GAAIS,EAAE,IAE1B4lB,EAAMzb,aAAY,GACdzG,KAAK2f,uBAAuB3f,KAAK2f,eAAeC,eAC7C5f,KAAK2f,eAGRsC,GACFzf,OAAOrB,YAAW,IAAM7F,EAAM0W,mBAAmBiQ,EAAgBF,OAAQ,aAAcG,EAAMrmB,KAAK,GAEtG,CAWOyS,KAAK8S,GAAc,EAAMgB,GAAc,EAAO5T,EAASiP,EAAUjP,QAEtE,IAAIzS,EAAOiE,KAAKggB,OAAO1R,KAAK8S,EAAa5S,GAqBzC,GAlBAzS,EAAK+D,SAAQxD,IACX,GAAI8kB,GAAe9kB,EAAET,KAAOS,EAAEsjB,UAAYpR,EAAQ,CAChD,IAAI6T,EAAM/lB,EAAET,GAAGQ,cAAc,4BAC7BC,EAAEkR,QAAU6U,EAAMA,EAAI/D,eAAY3iB,EAC7BW,EAAEkR,gBAAgBlR,EAAEkR,aAIzB,GAFK4T,GAAgB5S,UAAiBlS,EAAEkR,QAEpClR,EAAEsjB,SAAS/jB,GAAI,CACjB,MAAMymB,EAAYhmB,EAAEsjB,QAAQtR,KAAK8S,EAAagB,EAAa5T,GAC3DlS,EAAEilB,YAAea,EAAcE,EAAY,CAACrE,SAAUqE,UAC/ChmB,EAAEsjB,eAGNtjB,EAAET,EAAE,IAITumB,EAAa,CACf,IAAIxnB,EAA8BU,EAAMwI,UAAU9D,KAAKvD,MAEnD7B,EAAE2nB,eAAiB3nB,EAAE4nB,WAAa5nB,EAAE6nB,cAAgB7nB,EAAE8nB,YAAc9nB,EAAE4nB,YAAc5nB,EAAE6nB,cACxF7nB,EAAEgW,OAAShW,EAAE4nB,iBACN5nB,EAAE4nB,iBAAkB5nB,EAAE6nB,mBAAoB7nB,EAAE2nB,oBAAqB3nB,EAAE8nB,YAExE9nB,EAAE2W,OAAqC,QAA5BvR,KAAKnE,GAAGmC,MAAMuV,aAAwB3Y,EAAE2W,IAAM,QACzDvR,KAAK6f,oBACPjlB,EAAEwV,WAAa,QAEbpQ,KAAK8hB,cACPlnB,EAAE2C,OAAS,cACJ3C,EAAE0kB,sBAEX,MAAMqD,EAAW/nB,EAAEqkB,wBASnB,cAROrkB,EAAEqkB,6BACQtjB,IAAbgnB,EACF/nB,EAAEqV,uBAAyB0S,SAEpB/nB,EAAEqV,uBAEX3U,EAAMsnB,sBAAsBhoB,EAAGoV,GAC/BpV,EAAEqjB,SAAWliB,EACNnB,EAGT,OAAOmB,CACT,CAYOmiB,KAAKlU,EAA2B6Y,EAAoCpF,EAAUU,cAAe,GAElG,MAAM2E,EAAY9Y,EAAO2B,MAAK5O,QAAapB,IAARoB,EAAED,QAA2BnB,IAARoB,EAAEH,IAC1D,IAAImmB,EAAQD,EAAYxnB,EAAMsC,KAAKoM,GAAS,EAAGhK,KAAKwf,aAAexf,KAAKyf,aAAezV,EACvFhK,KAAK+gB,iBAAmB+B,EAIpB9iB,KAAKwf,aAAexf,KAAKwf,cAAgBxf,KAAKvD,KAAKc,QAAUwlB,EAAMpX,MAAKrP,IAAOA,EAAEQ,GAAK,GAAKR,EAAES,EAAMiD,KAAKvD,KAAKc,WAC/GyC,KAAKgjB,0BAA2B,EAChChjB,KAAKggB,OAAO7Q,YAAY4T,EAAO/iB,KAAKwf,aAAa,IAInD,MAAMyD,EAASxF,EAAUU,YACC,mBAAhB,IAA4BV,EAAUU,YAAc0E,GAE9D,IAAIK,EAA2B,GAC/BljB,KAAKyG,cAGDoc,GACc,IAAI7iB,KAAKggB,OAAO3iB,OACtByC,SAAQxD,IACLymB,EAAMnf,MAAK7G,GAAKT,EAAEuB,KAAOd,EAAEc,OAEhC4f,EAAUU,aACZV,EAAUU,YAAYne,KAAKnE,GAAIS,GAAG,GAAO,GAC3C4mB,EAAQ5W,KAAKhQ,GACb0D,KAAKmiB,aAAa7lB,EAAET,IAAI,GAAM,OAMpC,IAAIwO,EAAYrK,KAAKggB,OAAO3iB,MAgC5B,OA/BA2C,KAAKggB,OAAO3iB,MAAQ,GACpB0lB,EAAMjjB,SAAQ/C,IACZ,IAAIomB,OAAiBxnB,IAAToB,EAAEc,GAAoBwM,EAAUzG,MAAKtH,GAAKA,EAAEuB,KAAOd,EAAEc,UAAMlC,EACvE,GAAIwnB,GASF,IAPIpmB,EAAE4D,mBAAwBhF,IAARoB,EAAED,QAA2BnB,IAARoB,EAAEH,KAC3CG,EAAEA,EAAIA,EAAEA,GAAKomB,EAAKpmB,EAClBA,EAAEF,EAAIE,EAAEF,GAAKsmB,EAAKtmB,EAClBmD,KAAKggB,OAAOnU,kBAAkB9O,IAEhCiD,KAAKggB,OAAO3iB,MAAMiP,KAAK6W,GACvBnjB,KAAK4hB,OAAOuB,EAAKtnB,GAAIkB,GACjBA,EAAEwkB,aAAatD,SAAU,CAC3B,IAAIoE,EAAMc,EAAKtnB,GAAGQ,cAAc,eAC5BgmB,GAAOA,EAAIzE,YACbyE,EAAIzE,UAAUM,KAAKnhB,EAAEwkB,YAAYtD,UACjCje,KAAK+gB,kBAAmB,SAGnB8B,GACT7iB,KAAK0gB,UAAU3jB,MAInBiD,KAAKggB,OAAO5Z,aAAe8c,EAC3BljB,KAAKyG,aAAY,UAGVzG,KAAKgjB,gCACLhjB,KAAK+gB,iBACZkC,EAASxF,EAAUU,YAAc8E,SAAgBxF,EAAUU,YACpDne,IACT,CAMOyG,YAAYC,GAAO,GAQxB,OAPA1G,KAAKggB,OAAOvZ,YAAYC,GACnBA,IACH1G,KAAKojB,yBACLpjB,KAAKqjB,sBACLrjB,KAAKsjB,mBACLtjB,KAAKujB,uBAEAvjB,IACT,CAKOwjB,cAAcC,GAAa,GAChC,GAAIzjB,KAAKvD,KAAK2T,YAAuC,SAAzBpQ,KAAKvD,KAAK2T,cACjCqT,IAAezjB,KAAKvD,KAAK6T,gBAA+C,OAA7BtQ,KAAKvD,KAAK6T,gBACxD,OAAOtQ,KAAKvD,KAAK2T,WAGnB,IAAIvU,EAAKmE,KAAKnE,GAAGQ,cAAc,IAAM2D,KAAKvD,KAAKkU,WAC/C,GAAI9U,EAAI,CACN,IAAI4F,EAASnG,EAAM0jB,SAASnjB,EAAGghB,aAAa,UAAY,EACxD,OAAOnf,KAAKqR,MAAMlT,EAAGoH,aAAexB,GAGtC,IAAIiiB,EAAOC,SAAS3jB,KAAKnE,GAAGghB,aAAa,mBACzC,OAAO6G,EAAOhmB,KAAKqR,MAAM/O,KAAKnE,GAAGyG,wBAAwBb,OAASiiB,GAAQ1jB,KAAKvD,KAAK2T,UACtF,CAgBOA,WAAW7Q,EAAsBqiB,GAAS,GAY/C,GATIA,QAAkBjmB,IAAR4D,GACRS,KAAK6f,qBAA+B,SAARtgB,KAC9BS,KAAK6f,kBAA6B,SAARtgB,EAC1BS,KAAKygB,sBAGG,YAARlhB,GAA6B,SAARA,IAAkBA,OAAM5D,QAGrCA,IAAR4D,EAAmB,CACrB,IAAIqkB,GAAgB5jB,KAAKvD,KAAKgmB,YAA0BziB,KAAKvD,KAAKimB,WAC7D1iB,KAAKvD,KAAK+lB,UAAwBxiB,KAAKvD,KAAK8lB,aACjDhjB,EAAMS,KAAK6jB,YAAcD,EAG3B,IAAIE,EAAOxoB,EAAMyoB,YAAYxkB,GAC7B,OAAIS,KAAKvD,KAAK6T,iBAAmBwT,EAAKtkB,MAAQQ,KAAKvD,KAAK2T,aAAe0T,EAAKjnB,IAG5EmD,KAAKvD,KAAK6T,eAAiBwT,EAAKtkB,KAChCQ,KAAKvD,KAAK2T,WAAa0T,EAAKjnB,EAE5BmD,KAAKgkB,iBAAgB,GAAO,GAExBpC,GACF5hB,KAAKmgB,eAAc,IARZngB,IAWX,CAGO6jB,YACL,OAAO7jB,KAAKuf,oBAAsBvf,KAAKyf,WACzC,CAEUF,oBAGR,OAAQvf,KAAKnE,GAAGooB,aAAejkB,KAAKnE,GAAGoG,cAAcgiB,aAAezhB,OAAO0hB,UAC7E,CASOna,QAAQC,EAAyB,UAAWC,GAAS,GAG1D,OAFAjK,KAAKggB,OAAOjW,QAAQC,EAAQC,GAC5BjK,KAAKujB,sBACEvjB,IACT,CAWOzC,OAAOA,EAAgByM,EAAwB,aACpD,IAAKzM,GAAUA,EAAS,GAAKyC,KAAKvD,KAAKc,SAAWA,EAAQ,OAAOyC,KACjE,IAeImkB,EAfAC,EAAYpkB,KAAKyf,YAiCrB,OA7Be,IAAXliB,EACFyC,KAAKwf,YAAc4E,SAEZpkB,KAAKwf,YAGdxf,KAAKnE,GAAGkY,UAAUlV,OAAO,MAAQulB,GACjCpkB,KAAKnE,GAAGkY,UAAUC,IAAI,MAAQzW,GAC9ByC,KAAKvD,KAAKc,OAASyC,KAAKggB,OAAOziB,OAASA,EAIzB,IAAXA,GAAgByC,KAAKvD,KAAK4nB,uBAC5BF,EAAW,GACXnkB,KAAKogB,eAAetgB,SAAQjE,IACtBA,EAAGsR,eAAiBgX,EAAS7X,KAAKzQ,EAAGsR,kBAEtCgX,EAASloB,SAAUkoB,OAAWxoB,IAErCqE,KAAKggB,OAAOhR,cAAcoV,EAAW7mB,EAAQ4mB,EAAUna,GACnDhK,KAAK6f,mBAAmB7f,KAAKoQ,aAEjCpQ,KAAKgkB,kBAGLhkB,KAAKgjB,0BAA2B,EAChChjB,KAAKujB,6BACEvjB,KAAKgjB,yBAELhjB,IACT,CAKOyf,YACL,OAAOzf,KAAKvD,KAAKc,MACnB,CAGO6iB,eACL,OAAOlkB,MAAMC,KAAK6D,KAAKnE,GAAGoiB,UACvBvV,QAAQ7M,GAAoBA,EAAGmgB,QAAQ,IAAMhc,KAAKvD,KAAKkU,aAAe9U,EAAGmgB,QAAQ,IAAMhc,KAAKvD,KAAKuU,mBACtG,CAMOqD,QAAQ7H,GAAY,GACzB,GAAKxM,KAAKnE,GAoBV,OAnBAmE,KAAKskB,SACLtkB,KAAKygB,oBAAmB,GACxBzgB,KAAKukB,WAAU,GAAM,GACrBvkB,KAAKsgB,cAAa,GACb9T,EAKHxM,KAAKnE,GAAG+C,WAAW4V,YAAYxU,KAAKnE,KAJpCmE,KAAK2M,UAAUH,GACfxM,KAAKnE,GAAGkY,UAAUlV,OAAOmB,KAAK8f,kBAC9B9f,KAAKnE,GAAGmI,gBAAgB,mBAI1BhE,KAAKwkB,oBACDxkB,KAAK2f,uBAAuB3f,KAAK2f,eAAeC,eAC7C5f,KAAK2f,sBACL3f,KAAKvD,YACLuD,KAAK0e,oBACL1e,KAAKggB,cACLhgB,KAAKnE,GAAG+hB,iBACR5d,KAAKnE,GACLmE,IACT,CAKOuG,MAAMhH,GAKX,OAJIS,KAAKvD,KAAK8J,QAAUhH,IACtBS,KAAKvD,KAAK8J,MAAQvG,KAAKggB,OAAOzZ,MAAQhH,EACtCS,KAAKujB,uBAEAvjB,IACT,CAKOykB,WACL,OAAOzkB,KAAKggB,OAAOzZ,KACrB,CAWOme,iBAAiBtjB,EAAyBujB,GAAiB,GAChE,IAEIC,EAFA3Y,EAAMjM,KAAKnE,GAAGyG,wBAIhBsiB,EADED,EACa,CAACpjB,IAAK0K,EAAI1K,IAAM9F,SAASkG,gBAAgBqB,UAAW1B,KAAM2K,EAAI3K,MAG9D,CAACC,IAAKvB,KAAKnE,GAAGuH,UAAW9B,KAAMtB,KAAKnE,GAAGgpB,YAGxD,IAAIC,EAAe1jB,EAASE,KAAOsjB,EAAatjB,KAC5CyjB,EAAc3jB,EAASG,IAAMqjB,EAAarjB,IAE1CyjB,EAAe/Y,EAAIzK,MAAQxB,KAAKyf,YAChCwF,EAAahZ,EAAIxK,OAASkiB,SAAS3jB,KAAKnE,GAAGghB,aAAa,mBAE5D,MAAO,CAAC/f,EAAGY,KAAKsO,MAAM8Y,EAAeE,GAAcpoB,EAAGc,KAAKsO,MAAM+Y,EAAcE,GACjF,CAGO/X,SACL,OAAOxP,KAAKC,IAAIqC,KAAKggB,OAAO9S,SAAUlN,KAAKvD,KAAKqU,OAClD,CASOhH,YAAYhN,EAAWF,EAAWG,EAAWF,GAClD,OAAOmD,KAAKggB,OAAOlW,YAAYhN,EAAGF,EAAGG,EAAGF,EAC1C,CAgBOokB,WAAWzlB,EAAuBuC,GACvC,IAAIlC,EAAK4hB,EAAUxZ,WAAWzI,GAC9BwE,KAAKqgB,gBAAgBxkB,GAAI,EAAMkC,GAC/B,MAAMyC,EAAO3E,EAAGsR,cAoBhB,OAlBAnN,KAAKojB,yBAELpjB,KAAKgkB,iBAAgB,GAAO,EAAOxjB,GAG/BA,EAAK+gB,aACPvhB,KAAKkO,YAAYrS,EAAI2E,EAAK+gB,iBAAa5lB,GAAW,GAKhDqE,KAAKwf,aAAoC,IAArBxf,KAAKvD,KAAKc,SAChCyC,KAAKgjB,0BAA2B,GAElChjB,KAAKsjB,mBACLtjB,KAAKujB,6BACEvjB,KAAKgjB,yBAELnnB,CACT,CAkBOmZ,GAAGL,EAAsBM,GAE9B,IAA2B,IAAvBN,EAAKwD,QAAQ,KAGf,OAFYxD,EAAKgC,MAAM,KACjB7W,SAAQ6U,GAAQ3U,KAAKgV,GAAGL,EAAMM,KAC7BjV,KAGT,GAAa,WAAT2U,GAA8B,UAATA,GAA6B,YAATA,GAA+B,WAATA,GAA8B,YAATA,EAAoB,CAE1G,IAAIuQ,EAAmB,WAATvQ,GAA8B,YAATA,EAEjC3U,KAAK6e,gBAAgBlK,GADnBuQ,EAC4B/hB,GAAkB8R,EAAmC9R,GAErDA,GAAwB8R,EAAmC9R,EAAOA,EAAMgiB,QAExGnlB,KAAKnE,GAAGuY,iBAAiBO,EAAM3U,KAAK6e,gBAAgBlK,QAClC,SAATA,GAA4B,cAATA,GAAiC,aAATA,GAAgC,gBAATA,GAAmC,WAATA,GACzF,eAATA,GAAkC,YAATA,GAA+B,kBAATA,EAGlD3U,KAAK6e,gBAAgBlK,GAAQM,EAE7B4I,QAAQuH,IAAI,gBAAkBzQ,EAAO,mHAEvC,OAAO3U,IACT,CAMOkV,IAAIP,GAET,OAA2B,IAAvBA,EAAKwD,QAAQ,MACHxD,EAAKgC,MAAM,KACjB7W,SAAQ6U,GAAQ3U,KAAKkV,IAAIP,KACxB3U,OAGI,WAAT2U,GAA8B,UAATA,GAA6B,YAATA,GAA+B,WAATA,GAA8B,YAATA,GAElF3U,KAAK6e,gBAAgBlK,IACvB3U,KAAKnE,GAAG0Y,oBAAoBI,EAAM3U,KAAK6e,gBAAgBlK,WAGpD3U,KAAK6e,gBAAgBlK,GAErB3U,KACT,CAGOskB,SAEL,OADAzpB,OAAOqF,KAAKF,KAAK6e,iBAAiB/e,SAAQnF,GAAOqF,KAAKkV,IAAIva,KACnDqF,IACT,CAQOmiB,aAAa3mB,EAAuBgR,GAAY,EAAMC,GAAe,GA4B1E,OA3BAgR,EAAUH,YAAY9hB,GAAKsE,SAAQjE,IACjC,GAAIA,EAAGoG,eAAiBpG,EAAGoG,gBAAkBjC,KAAKnE,GAAI,OACtD,IAAI2E,EAAO3E,EAAGsR,cAET3M,IACHA,EAAOR,KAAKggB,OAAO3iB,MAAMuG,MAAKtH,GAAKT,IAAOS,EAAET,MAEzC2E,IAEDid,EAAUU,aACZV,EAAUU,YAAYne,KAAKnE,GAAI2E,GAAM,GAAO,UAIvC3E,EAAGsR,cACVnN,KAAK0hB,UAAU7lB,GAEfmE,KAAKggB,OAAOzT,WAAW/L,EAAMgM,EAAWC,GAEpCD,GAAa3Q,EAAGoG,eAClBpG,EAAGgD,aAGH4N,IACFzM,KAAKqjB,sBACLrjB,KAAKujB,uBAEAvjB,IACT,CAMO2M,UAAUH,GAAY,GAQ3B,OANAxM,KAAKggB,OAAO3iB,MAAMyC,SAAQxD,WACjBA,EAAET,GAAGsR,cACZnN,KAAK0hB,UAAUplB,EAAET,GAAG,IAEtBmE,KAAKggB,OAAOrT,UAAUH,GACtBxM,KAAKqjB,sBACErjB,IACT,CAMOsgB,aAAa+E,GAMlB,OALIA,EACFrlB,KAAKnE,GAAGkY,UAAUC,IAAI,sBAEtBhU,KAAKnE,GAAGkY,UAAUlV,OAAO,sBAEpBmB,IACT,CASOukB,UAAUhlB,EAAc+lB,GAAc,EAAMC,GAAU,GAC3D,QAAMvlB,KAAKvD,KAAKyiB,aAAe3f,IAC/BA,EAAMS,KAAKvD,KAAKyiB,YAAa,SAAclf,KAAKvD,KAAKyiB,WACrDlf,KAAKugB,mBACLvgB,KAAKwgB,qBACLxgB,KAAKggB,OAAO3iB,MAAMyC,SAAQxD,IACxB0D,KAAK2hB,uBAAuBrlB,GACxBA,EAAEsjB,SAAW2F,GAASjpB,EAAEsjB,QAAQ2E,UAAUhlB,EAAK+lB,EAAaC,EAAQ,IAEtED,GAAetlB,KAAK+f,mBARmB/f,IAU7C,CAOO4hB,OAAOpmB,EAAuBiM,GAGnC,GAAIkZ,UAAU1kB,OAAS,EAAG,CACxB4hB,QAAQ2H,KAAK,yHAEb,IAAI9oB,EAAIikB,UAAWlgB,EAAI,EAEvB,OADAgH,EAAM,CAAE3K,EAAEJ,EAAE+D,KAAM7D,EAAEF,EAAE+D,KAAM1D,EAAEL,EAAE+D,KAAM5D,EAAEH,EAAE+D,MACnCT,KAAK4hB,OAAOpmB,EAAKiM,GA0D1B,OAvDAgW,EAAUH,YAAY9hB,GAAKsE,SAAQjE,IACjC,IAAIS,EAAIT,GAAIsR,cACZ,IAAK7Q,EAAG,OACR,IAAIS,EAAIzB,EAAMwI,UAAU2D,UACjB1K,EAAE4D,aAGT,IACI8kB,EADAvlB,EAAO,CAAC,IAAK,IAAK,IAAK,KAe3B,GAbIA,EAAKyL,MAAK9H,QAAclI,IAAToB,EAAE8G,IAAoB9G,EAAE8G,KAAOvH,EAAEuH,OAClD4hB,EAAI,CAAC,EACLvlB,EAAKJ,SAAQ+D,IACX4hB,EAAE5hB,QAAelI,IAAToB,EAAE8G,GAAoB9G,EAAE8G,GAAKvH,EAAEuH,UAChC9G,EAAE8G,EAAE,MAIV4hB,IAAM1oB,EAAEqD,MAAQrD,EAAEsD,MAAQtD,EAAEuD,MAAQvD,EAAEwD,QACzCklB,EAAI,CAAC,QAIW9pB,IAAdoB,EAAEyQ,QAAuB,CAC3B,MAAMkY,EAAc7pB,EAAGQ,cAAc,4BACrC,IAAKqpB,GAAeA,EAAYpH,YAAcvhB,EAAEyQ,QAAS,OACzDkY,EAAYpH,UAAYvhB,EAAEyQ,QAEtBlR,EAAEsjB,SAAS/jB,KACb6pB,EAAYpnB,YAAYhC,EAAEsjB,QAAQ/jB,IAC7BS,EAAEsjB,QAAQnjB,KAAKkpB,aAAarpB,EAAEsjB,QAAQO,eAAc,WAEpDpjB,EAAEyQ,QAIX,IAAIoY,GAAU,EACVC,GAAY,EAChB,IAAK,MAAMlrB,KAAOoC,EACD,MAAXpC,EAAI,IAAc2B,EAAE3B,KAASoC,EAAEpC,KACjC2B,EAAE3B,GAAOoC,EAAEpC,GACXirB,GAAU,EACVC,EAAYA,IAAe7lB,KAAKvD,KAAKyiB,aAAuB,aAARvkB,GAA8B,WAARA,GAA4B,WAARA,IAGlGW,EAAMyP,eAAezO,GAGjBmpB,GAAGzlB,KAAKmI,SAAS7L,EAAGmpB,GACpBG,GACF5lB,KAAK8gB,WAAWjlB,EAAIS,GAElBupB,GACF7lB,KAAK2hB,uBAAuBrlB,MAGzB0D,IACT,CAEQmI,SAAS7L,EAAkBmpB,GACjCzlB,KAAKggB,OAAOlZ,aACTsH,YAAY9R,GACZ6L,SAAS7L,EAAGmpB,GACfzlB,KAAKojB,yBACLpjB,KAAKujB,sBACLvjB,KAAKggB,OAAO3R,WACd,CAOOyX,gBAAgBjqB,EAAyBkqB,GAAc,GAC5D,IAAKlqB,EAAI,OAET,GADAA,EAAGkY,UAAUlV,OAAO,wBACfhD,EAAG6G,aAAc,OACtB,IAAIpG,EAAIT,EAAGsR,cACX,IAAK7Q,EAAG,OACR,MAAMC,EAAOD,EAAEC,KACf,IAAKA,EAAM,OACX,GAAIV,EAAGoG,gBAAkB1F,EAAKV,GAAI,OAClC,MAAMmqB,EAAOzpB,EAAKinB,gBAClB,IAAKwC,EAAM,OACX,IACI7C,EADA1hB,EAASskB,GAAezpB,EAAEO,EAAIP,EAAEO,EAAImpB,EAAOnqB,EAAG6G,aAIlD,GAFIpG,EAAE2pB,wBAAuB9C,EAAOtnB,EAAGQ,cAAcC,EAAE2pB,wBAClD9C,IAAMA,EAAOtnB,EAAGQ,cAAcohB,EAAUwI,yBACxC9C,EAAM,OACX,MAAM+C,EAAUrqB,EAAG6G,aAAeygB,EAAKzgB,aACjCyjB,EAAQJ,GAAezpB,EAAEO,EAAIP,EAAEO,EAAImpB,EAAOE,EAAU/C,EAAKzgB,aAC/D,IAAI0jB,EACJ,GAAI9pB,EAAEsjB,QAEJwG,EAAU9pB,EAAEsjB,QAAQ1S,SAAW5Q,EAAEsjB,QAAQ4D,oBACpC,CAEL,MAAM6C,EAAQlD,EAAKmD,kBACnB,IAAKD,EAA2K,YAAlKxI,QAAQuH,IAAI,6BAA6B3H,EAAUwI,8GACjEG,EAAUC,EAAM/jB,wBAAwBb,QAAU0kB,EAEpD,GAAIA,IAAUC,EAAS,OACvB3kB,GAAU2kB,EAAUD,EACpB,IAAItpB,EAAIa,KAAK6oB,KAAK9kB,EAASukB,GAE3B,MAAMQ,EAAUlnB,OAAO2a,UAAU3d,EAAEE,eAAiBF,EAAEE,cAA0B,EAC5EgqB,GAAW3pB,EAAI2pB,IACjB3pB,EAAI2pB,EACJ3qB,EAAGkY,UAAUC,IAAI,wBAEf1X,EAAE+D,MAAQxD,EAAIP,EAAE+D,KAAMxD,EAAIP,EAAE+D,KACvB/D,EAAEiE,MAAQ1D,EAAIP,EAAEiE,OAAM1D,EAAIP,EAAEiE,MACjC1D,IAAMP,EAAEO,IACVN,EAAKymB,0BAA2B,EAChCzmB,EAAK4L,SAAS7L,EAAG,CAACO,aACXN,EAAKymB,yBAEhB,CAGUyD,qBAAqB5qB,EAAyB6qB,GAAU,GAC5DjJ,EAAUkJ,kBAAmBlJ,EAAUkJ,kBAAkB9qB,EAAI6qB,GAC5D1mB,KAAK8lB,gBAAgBjqB,EAAI6qB,EAChC,CAMO9V,OAAOvR,GAGZ,KAFqC,iBAAVA,GAAsBA,EAAMsX,MAAM,KAAK1a,OAAS,GAExD,CACjB,IAAI6nB,EAAOxoB,EAAMyoB,YAAY1kB,GAC7B,GAAIW,KAAKvD,KAAKoU,aAAeiT,EAAKtkB,MAAQQ,KAAKvD,KAAKmU,SAAWkT,EAAKjnB,EAAG,OASzE,OANAmD,KAAKvD,KAAKmU,OAASvR,EACnBW,KAAKvD,KAAK+lB,UAAYxiB,KAAKvD,KAAK8lB,aAAeviB,KAAKvD,KAAKimB,WAAa1iB,KAAKvD,KAAKgmB,iBAAc9mB,EAC9FqE,KAAKqf,cAELrf,KAAKmgB,eAAc,GAEZngB,IACT,CAGO4mB,YAAsB,OAAO5mB,KAAKvD,KAAKmU,MAAkB,CAczDvD,UAAU7M,GAEf,GAAImgB,UAAU1kB,OAAS,EAAG,CACxB4hB,QAAQ2H,KAAK,uHAEb,IAAI9oB,EAAIikB,UAAWlgB,EAAI,EACrB1D,EAAqB,CAAED,EAAEJ,EAAE+D,KAAM7D,EAAEF,EAAE+D,KAAM1D,EAAEL,EAAE+D,KAAM5D,EAAEH,EAAE+D,KAAME,aAAajE,EAAE+D,MAChF,OAAOT,KAAKqN,UAAUtQ,GAExB,OAAOiD,KAAKggB,OAAO3S,UAAU7M,EAC/B,CAGU+iB,sBACR,GAAIvjB,KAAKggB,OAAOpZ,UAAW,OAAO5G,KAClC,IAAI6mB,EAAW7mB,KAAKggB,OAAO1U,eAAc,GAQzC,OAPIub,GAAYA,EAAS5qB,SAClB+D,KAAKgjB,0BACRhjB,KAAKggB,OAAOnR,mBAAmBgY,GAEjC7mB,KAAK0U,cAAc,SAAUmS,IAE/B7mB,KAAKggB,OAAOjZ,cACL/G,IACT,CAGUsjB,mBACR,OAAItjB,KAAKggB,OAAOpZ,WACZ5G,KAAKggB,OAAO7Z,YAAYlK,SACrB+D,KAAKgjB,0BACRhjB,KAAKggB,OAAOnR,mBAAmB7O,KAAKggB,OAAO7Z,YAG7CnG,KAAKggB,OAAO7Z,WAAWrG,SAAQxD,WAAcA,EAAEoN,MAAM,IACrD1J,KAAK0U,cAAc,QAAS1U,KAAKggB,OAAO7Z,YACxCnG,KAAKggB,OAAO7Z,WAAa,IAROnG,IAWpC,CAGOqjB,sBACL,OAAIrjB,KAAKggB,OAAOpZ,WACZ5G,KAAKggB,OAAO5Z,cAAcnK,SAC5B+D,KAAK0U,cAAc,UAAW1U,KAAKggB,OAAO5Z,cAC1CpG,KAAKggB,OAAO5Z,aAAe,IAHKpG,IAMpC,CAGU0U,cAAclQ,EAAcsf,GACpC,IAAI3gB,EAAQ2gB,EAAO,IAAIgD,YAAYtiB,EAAM,CAACI,SAAS,EAAOugB,OAAQrB,IAAS,IAAIiD,MAAMviB,GAErF,OADAxE,KAAKnE,GAAG8J,cAAcxC,GACfnD,IACT,CAGUwkB,oBAMR,OAJIxkB,KAAKgnB,UACP1rB,EAAM2rB,iBAAiBjnB,KAAK8f,yBACrB9f,KAAKgnB,SAEPhnB,IACT,CAGUmgB,cAAc+G,GAAc,EAAO3mB,GAU3C,GARI2mB,GACFlnB,KAAKwkB,oBAGFjkB,IAAMA,EAAOP,KAAKkN,UACvBlN,KAAKojB,yBAGwB,IAAzBpjB,KAAKvD,KAAK2T,WACZ,OAAOpQ,KAGT,IAAIoQ,EAAapQ,KAAKvD,KAAK2T,WACvBE,EAAiBtQ,KAAKvD,KAAK6T,eAC3B2D,EAAS,IAAIjU,KAAK8f,uBAAuB9f,KAAKvD,KAAKkU,YAGvD,IAAK3Q,KAAKgnB,QAAS,CAEjB,IAAIG,EAAgBnnB,KAAKvD,KAAKkpB,iBAAchqB,EAAYqE,KAAKnE,GAAG+C,WAIhE,GAHAoB,KAAKgnB,QAAU1rB,EAAM8rB,iBAAiBpnB,KAAK8f,iBAAkBqH,EAAe,CAC1EjpB,MAAO8B,KAAKvD,KAAKyB,SAEd8B,KAAKgnB,QAAS,OAAOhnB,KAC1BA,KAAKgnB,QAAQK,KAAO,EAGpB/rB,EAAMgsB,WAAWtnB,KAAKgnB,QAAS/S,EAAQ,WAAW7D,IAAaE,KAE/D,IAAI/O,EAAcvB,KAAKvD,KAAK+lB,UAAYxiB,KAAKvD,KAAKoU,WAC9ClO,EAAiB3C,KAAKvD,KAAK8lB,aAAeviB,KAAKvD,KAAKoU,WACpDrH,EAAgBxJ,KAAKvD,KAAKgmB,YAAcziB,KAAKvD,KAAKoU,WAClDvP,EAAetB,KAAKvD,KAAKimB,WAAa1iB,KAAKvD,KAAKoU,WAChDrD,EAAU,GAAGyG,+BACbwK,EAAc,IAAIze,KAAK8f,oEAC3BxkB,EAAMgsB,WAAWtnB,KAAKgnB,QAASxZ,EAAS,QAAQjM,aAAeiI,cAAkB7G,YAAiBrB,MAClGhG,EAAMgsB,WAAWtnB,KAAKgnB,QAASvI,EAAa,QAAQld,aAAeiI,cAAkB7G,YAAiBrB,MAEtGhG,EAAMgsB,WAAWtnB,KAAKgnB,QAAS,GAAG/S,uBAA6B,UAAUzK,KACzElO,EAAMgsB,WAAWtnB,KAAKgnB,QAAS,GAAG/S,sBAA4B,UAAUzK,KACxElO,EAAMgsB,WAAWtnB,KAAKgnB,QAAS,GAAG/S,uBAA6B,UAAUzK,cAAkB7G,KAC3FrH,EAAMgsB,WAAWtnB,KAAKgnB,QAAS,GAAG/S,uBAA6B,SAAS3S,KACxEhG,EAAMgsB,WAAWtnB,KAAKgnB,QAAS,GAAG/S,sBAA4B,SAAS3S,KACvEhG,EAAMgsB,WAAWtnB,KAAKgnB,QAAS,GAAG/S,uBAA6B,SAAS3S,cAAiBqB,KAK3F,IADApC,EAAOA,GAAQP,KAAKgnB,QAAQK,MACjBrnB,KAAKgnB,QAAQK,KAAM,CAC5B,IAAIE,EAAa7D,GAA0BtT,EAAasT,EAAQpT,EAChE,IAAK,IAAI7P,EAAIT,KAAKgnB,QAAQK,KAAO,EAAG5mB,GAAKF,EAAME,IAC7CnF,EAAMgsB,WAAWtnB,KAAKgnB,QAAS,GAAG/S,WAAgBxT,MAAO,QAAQ8mB,EAAU9mB,MAC3EnF,EAAMgsB,WAAWtnB,KAAKgnB,QAAS,GAAG/S,WAAgBxT,EAAE,MAAO,WAAW8mB,EAAU9mB,EAAE,MAEpFT,KAAKgnB,QAAQK,KAAO9mB,EAEtB,OAAOP,IACT,CAGUojB,yBACR,IAAKpjB,KAAKggB,QAAUhgB,KAAKggB,OAAOpZ,UAAW,OAAO5G,KAClD,MAAMlC,EAASkC,KAAK2f,eACpB,IAAIxR,EAAMnO,KAAKkN,SAAWlN,KAAK8e,cAC/B,MAAM1O,EAAapQ,KAAKvD,KAAK2T,WACvB5Q,EAAOQ,KAAKvD,KAAK6T,eACvB,IAAKF,EAAY,OAAOpQ,KAGxB,IAAKlC,EAAQ,CACX,MAAM0pB,EAAelsB,EAAMyoB,YAAYniB,iBAAiB5B,KAAKnE,IAAe,WAC5E,GAAI2rB,EAAa3qB,EAAI,GAAK2qB,EAAahoB,OAASA,EAAM,CACpD,MAAMsR,EAASpT,KAAKsO,MAAMwb,EAAa3qB,EAAIuT,GACvCjC,EAAM2C,IACR3C,EAAM2C,IAkBZ,OAbA9Q,KAAKnE,GAAGsC,aAAa,iBAAkBspB,OAAOtZ,IAC9CnO,KAAKnE,GAAGmC,MAAMqD,eAAe,cAC7BrB,KAAKnE,GAAGmC,MAAMqD,eAAe,UACzB8M,IAEFnO,KAAKnE,GAAGmC,MAAMF,EAAS,YAAc,UAAYqQ,EAAMiC,EAAa5Q,GAIlE1B,IAAWA,EAAOvB,KAAKyjB,OAAOpZ,WAAatL,EAAMosB,oBAAoB5pB,IACvEA,EAAOvB,KAAKkqB,qBAAqB3oB,EAAOjC,IAGnCmE,IACT,CAGUqgB,gBAAgBxkB,EAAyBqQ,GAAkB,EAAO1L,GAC1E3E,EAAGkY,UAAUC,IAAIhU,KAAKvD,KAAKkU,WAC3BnQ,EAAOA,GAAQR,KAAK6gB,UAAUhlB,GAC9BA,EAAGsR,cAAgB3M,EACnBA,EAAK3E,GAAKA,EACV2E,EAAKjE,KAAOyD,KACZ,IAAImL,EAAO,IAAI3K,GAQf,OAPAA,EAAOR,KAAKggB,OAAOxV,QAAQhK,EAAM0L,GAE5B5Q,EAAMqsB,KAAKnnB,EAAM2K,IACpBnL,KAAK8gB,WAAWjlB,EAAI2E,GAElBlF,EAAMosB,oBAAoBlnB,IAAO3E,EAAGkY,UAAUC,IAAI,mBACtDhU,KAAK2hB,uBAAuBnhB,GACrBR,IACT,CAGUkgB,cAAcrkB,EAAiBS,GAKvC,YAJYX,IAARW,EAAEQ,GAA2B,OAARR,EAAEQ,GAAcjB,EAAGsC,aAAa,OAAQspB,OAAOnrB,EAAEQ,SAC9DnB,IAARW,EAAEM,GAA2B,OAARN,EAAEM,GAAcf,EAAGsC,aAAa,OAAQspB,OAAOnrB,EAAEM,IAC1EN,EAAES,EAAI,EAAIlB,EAAGsC,aAAa,OAAQspB,OAAOnrB,EAAES,IAAMlB,EAAGmI,gBAAgB,QACpE1H,EAAEO,EAAI,EAAIhB,EAAGsC,aAAa,OAAQspB,OAAOnrB,EAAEO,IAAMhB,EAAGmI,gBAAgB,QAC7DhE,IACT,CAGU8gB,WAAWjlB,EAAiB2E,GACpC,IAAKA,EAAM,OAAOR,KAClBA,KAAKkgB,cAAcrkB,EAAI2E,GAEvB,IAAIonB,EAA2C,CAC7CjnB,aAAc,mBACdC,SAAU,eACVC,OAAQ,aACRC,OAAQ,YACRjD,GAAI,SAEN,IAAK,MAAMlD,KAAOitB,EACZpnB,EAAK7F,GACPkB,EAAGsC,aAAaypB,EAAMjtB,GAAM8sB,OAAOjnB,EAAK7F,KAExCkB,EAAGmI,gBAAgB4jB,EAAMjtB,IAG7B,OAAOqF,IACT,CAGU6gB,UAAUhlB,EAAiBgsB,GAAmB,GACtD,IAAIvrB,EAAmB,CAAC,EACxBA,EAAEQ,EAAIxB,EAAM0jB,SAASnjB,EAAGghB,aAAa,SACrCvgB,EAAEM,EAAItB,EAAM0jB,SAASnjB,EAAGghB,aAAa,SACrCvgB,EAAES,EAAIzB,EAAM0jB,SAASnjB,EAAGghB,aAAa,SACrCvgB,EAAEO,EAAIvB,EAAM0jB,SAASnjB,EAAGghB,aAAa,SACrCvgB,EAAEqE,aAAerF,EAAM6jB,OAAOtjB,EAAGghB,aAAa,qBAC9CvgB,EAAEsE,SAAWtF,EAAM6jB,OAAOtjB,EAAGghB,aAAa,iBAC1CvgB,EAAEuE,OAASvF,EAAM6jB,OAAOtjB,EAAGghB,aAAa,eACxCvgB,EAAEwE,OAASxF,EAAM6jB,OAAOtjB,EAAGghB,aAAa,cACxCvgB,EAAEuB,GAAKhC,EAAGghB,aAAa,SAGvBvgB,EAAEgE,KAAOhF,EAAM0jB,SAASnjB,EAAGghB,aAAa,aACxCvgB,EAAE8D,KAAO9E,EAAM0jB,SAASnjB,EAAGghB,aAAa,aACxCvgB,EAAEiE,KAAOjF,EAAM0jB,SAASnjB,EAAGghB,aAAa,aACxCvgB,EAAE+D,KAAO/E,EAAM0jB,SAASnjB,EAAGghB,aAAa,aAGpCgL,IACU,IAARvrB,EAAES,GAASlB,EAAGmI,gBAAgB,QACtB,IAAR1H,EAAEO,GAAShB,EAAGmI,gBAAgB,QAC9B1H,EAAEgE,MAAMzE,EAAGmI,gBAAgB,YAC3B1H,EAAE8D,MAAMvE,EAAGmI,gBAAgB,YAC3B1H,EAAEiE,MAAM1E,EAAGmI,gBAAgB,YAC3B1H,EAAE+D,MAAMxE,EAAGmI,gBAAgB,aAIjC,IAAK,MAAMrJ,KAAO2B,EAAG,CACnB,IAAKA,EAAElB,eAAeT,GAAM,OACvB2B,EAAE3B,IAAmB,IAAX2B,EAAE3B,WACR2B,EAAE3B,GAIb,OAAO2B,CACT,CAGUyjB,kBACR,IAAI+H,EAAU,CAAC,qBAUf,OARI9nB,KAAKvD,KAAKyiB,YACZlf,KAAKnE,GAAGkY,UAAUC,OAAO8T,GACzB9nB,KAAKnE,GAAGsC,aAAa,YAAa,UAElC6B,KAAKnE,GAAGkY,UAAUlV,UAAUipB,GAC5B9nB,KAAKnE,GAAGmI,gBAAgB,cAGnBhE,IACT,CAOO+nB,WACL,IAAK/nB,KAAKnE,IAAIooB,YAAa,OAC3B,GAAIjkB,KAAKgoB,YAAchoB,KAAKnE,GAAGooB,YAAa,OAC5CjkB,KAAKgoB,UAAYhoB,KAAKnE,GAAGooB,YAGzBjkB,KAAKyG,cAGL,IAAIuI,GAAgB,EACpB,GAAIhP,KAAK8hB,aAAe9hB,KAAK2f,eACvB3f,KAAKvD,KAAKc,SAAWyC,KAAK2f,eAAe5iB,IAC3CiD,KAAKzC,OAAOyC,KAAK2f,eAAe5iB,EAAG,QACnCiS,GAAgB,OAEb,CAEL,IAAIiZ,GAAajoB,KAAKvD,KAAK6iB,sBAAwBtf,KAAKnE,GAAGooB,aAAejkB,KAAKvD,KAAKsU,eAC9D,IAArB/Q,KAAKvD,KAAKc,SAAiByC,KAAKwf,YACP,IAArBxf,KAAKvD,KAAKc,SAAkB0qB,IAE/BjoB,KAAKzC,OAAO0qB,EAAY,EAAIjoB,KAAKwf,aAEjCxQ,GAAgB,GAiBpB,OAZIhP,KAAK6f,mBAAmB7f,KAAKoQ,aAGjCpQ,KAAKggB,OAAO3iB,MAAMyC,SAAQxD,IACpBA,EAAEsjB,SAAStjB,EAAEsjB,QAAQmI,UAAU,IAGhC/nB,KAAKkoB,oBAAoBloB,KAAKgkB,gBAAgBhV,UAC5ChP,KAAKkoB,mBAEZloB,KAAKyG,aAAY,GAEVzG,IACT,CAEQgkB,gBAAgBhjB,GAAQ,EAAM0lB,GAAU,EAAOpqB,EAAmBX,WAGxEwF,YAAW,KACR,GAAI7E,EACChB,EAAMosB,oBAAoBprB,IAAI0D,KAAKymB,qBAAqBnqB,EAAET,GAAI6qB,QAC5D,GAAI1mB,KAAKggB,OAAO3iB,MAAMsO,MAAKrP,GAAKhB,EAAMosB,oBAAoBprB,KAAK,CACrE,MAAMe,EAAQ,IAAI2C,KAAKggB,OAAO3iB,OAC9B2C,KAAKyG,cACLpJ,EAAMyC,SAAQxD,IACRhB,EAAMosB,oBAAoBprB,IAAI0D,KAAKymB,qBAAqBnqB,EAAET,GAAI6qB,EAAQ,IAE5E1mB,KAAKyG,aAAY,GAGfzG,KAAK6e,gBAA+B,eAAG7e,KAAK6e,gBAA+B,cAAE,KAAMviB,EAAI,CAACA,GAAK0D,KAAKggB,OAAO3iB,MAAM,GAClH2D,EAAQ,IAAW,EACxB,CAGUyf,mBAAmB0H,GAAc,GAGzC,MAAMC,GAAapoB,KAAK2f,iBAAmB3f,KAAK6f,mBAAqB7f,KAAKvD,KAAKD,gBAAkBwD,KAAKvD,KAAK6iB,sBACtGtf,KAAKggB,OAAO3iB,MAAMuG,MAAKtH,GAAKA,EAAEE,iBAanC,OAXK2rB,IAAeC,GAAcpoB,KAAKqoB,gBAK3BF,GAAgBC,IAAcpoB,KAAKqoB,iBAC7CroB,KAAKqoB,eAAeC,oBACbtoB,KAAKqoB,sBACLroB,KAAKuoB,gBAPZvoB,KAAKuoB,cAAgBjtB,EAAMktB,UAAS,IAAMxoB,KAAK+nB,YAAY/nB,KAAKvD,KAAK4T,oBACrErQ,KAAKqoB,eAAiB,IAAII,gBAAeC,GAAW1oB,KAAKuoB,kBACzDvoB,KAAKqoB,eAAeM,QAAQ3oB,KAAKnE,IACjCmE,KAAKkoB,oBAAqB,GAOrBloB,IACT,CAGOzE,kBAAkBC,EAAwB,oBAA2C,OAAOF,EAAM2I,WAAWzI,EAAK,CAElHD,mBAAmBC,EAAwB,oBAA6C,OAAOF,EAAMgiB,YAAY9hB,EAAK,CAEtHD,sBAAsBC,GAA0C,OAAOiiB,EAAUxZ,WAAWzI,EAAK,CAEjGD,uBAAuBC,GAAkC,OAAOF,EAAMgiB,YAAY9hB,EAAK,CAGpF6jB,cAER,IAAIyE,EACAlT,EAAS,EAGTgY,EAAoB,GAsDxB,MArDgC,iBAArB5oB,KAAKvD,KAAKmU,SACnBgY,EAAU5oB,KAAKvD,KAAKmU,OAAO+F,MAAM,MAEZ,IAAnBiS,EAAQ3sB,QACV+D,KAAKvD,KAAK+lB,UAAYxiB,KAAKvD,KAAK8lB,aAAeqG,EAAQ,GACvD5oB,KAAKvD,KAAKimB,WAAa1iB,KAAKvD,KAAKgmB,YAAcmG,EAAQ,IAC3B,IAAnBA,EAAQ3sB,QACjB+D,KAAKvD,KAAK+lB,UAAYoG,EAAQ,GAC9B5oB,KAAKvD,KAAKgmB,YAAcmG,EAAQ,GAChC5oB,KAAKvD,KAAK8lB,aAAeqG,EAAQ,GACjC5oB,KAAKvD,KAAKimB,WAAakG,EAAQ,KAE/B9E,EAAOxoB,EAAMyoB,YAAY/jB,KAAKvD,KAAKmU,QACnC5Q,KAAKvD,KAAKoU,WAAaiT,EAAKtkB,KAC5BoR,EAAS5Q,KAAKvD,KAAKmU,OAASkT,EAAKjnB,QAIPlB,IAAxBqE,KAAKvD,KAAK+lB,UACZxiB,KAAKvD,KAAK+lB,UAAY5R,GAEtBkT,EAAOxoB,EAAMyoB,YAAY/jB,KAAKvD,KAAK+lB,WACnCxiB,KAAKvD,KAAK+lB,UAAYsB,EAAKjnB,SACpBmD,KAAKvD,KAAKmU,aAGYjV,IAA3BqE,KAAKvD,KAAK8lB,aACZviB,KAAKvD,KAAK8lB,aAAe3R,GAEzBkT,EAAOxoB,EAAMyoB,YAAY/jB,KAAKvD,KAAK8lB,cACnCviB,KAAKvD,KAAK8lB,aAAeuB,EAAKjnB,SACvBmD,KAAKvD,KAAKmU,aAGWjV,IAA1BqE,KAAKvD,KAAKgmB,YACZziB,KAAKvD,KAAKgmB,YAAc7R,GAExBkT,EAAOxoB,EAAMyoB,YAAY/jB,KAAKvD,KAAKgmB,aACnCziB,KAAKvD,KAAKgmB,YAAcqB,EAAKjnB,SACtBmD,KAAKvD,KAAKmU,aAGUjV,IAAzBqE,KAAKvD,KAAKimB,WACZ1iB,KAAKvD,KAAKimB,WAAa9R,GAEvBkT,EAAOxoB,EAAMyoB,YAAY/jB,KAAKvD,KAAKimB,YACnC1iB,KAAKvD,KAAKimB,WAAaoB,EAAKjnB,SACrBmD,KAAKvD,KAAKmU,QAEnB5Q,KAAKvD,KAAKoU,WAAaiT,EAAKtkB,KACxBQ,KAAKvD,KAAK+lB,YAAcxiB,KAAKvD,KAAK8lB,cAAgBviB,KAAKvD,KAAKimB,aAAe1iB,KAAKvD,KAAKgmB,aAAeziB,KAAKvD,KAAK+lB,YAAcxiB,KAAKvD,KAAKgmB,cACxIziB,KAAKvD,KAAKmU,OAAS5Q,KAAKvD,KAAK+lB,WAExBxiB,IACT,CAWOzE,eACL,OAAOmhB,CACT,CAUOnhB,mBAAmBuhB,EAAiC+L,EAA6B3uB,EAA+BuB,eACxFE,IAAzBktB,GAAe7O,QACjBvI,EAAUsI,UAAY8O,EAAc7O,OAGtC6O,EAAgB,IAAIrX,KAA0BqX,GAAiB,CAAC,GAChE,IAAIrtB,EAAwC,iBAAXshB,EAAuBxhB,EAAMgiB,YAAYR,EAAQ5iB,GAAQ4iB,EACtFthB,EAAIS,QAAQT,GAAKsE,SAAQjE,IACtB6gB,EAAGQ,YAAYrhB,IAAK6gB,EAAGI,OAAOjhB,EAAIgtB,EAAc,GAEzD,CAQOC,QAAQttB,EAAuB+D,GACpC,OAAIS,KAAKvD,KAAKyiB,YACdzB,EAAUH,YAAY9hB,GAAKsE,SAAQjE,IACjC,IAAIS,EAAIT,EAAGsR,cACN7Q,IACLiD,SAAajD,EAAEuE,OAASvE,EAAEuE,QAAS,EACnCb,KAAK2hB,uBAAuBrlB,GAAE,IALC0D,IAQnC,CAOOqR,UAAU7V,EAAuB+D,GACtC,OAAIS,KAAKvD,KAAKyiB,YACdzB,EAAUH,YAAY9hB,GAAKsE,SAAQjE,IACjC,IAAIS,EAAIT,EAAGsR,cACN7Q,IACLiD,SAAajD,EAAEsE,SAAWtE,EAAEsE,UAAW,EACvCZ,KAAK2hB,uBAAuBrlB,GAAE,IALC0D,IAQnC,CAYOoV,QAAQmQ,GAAU,GACvB,IAAIvlB,KAAKvD,KAAKyiB,WAId,OAHAlf,KAAK+oB,YAAW,EAAOxD,GACvBvlB,KAAKgpB,cAAa,EAAOzD,GACzBvlB,KAAK0U,cAAc,WACZ1U,IACT,CAUOmV,OAAOoQ,GAAU,GACtB,IAAIvlB,KAAKvD,KAAKyiB,WAId,OAHAlf,KAAK+oB,YAAW,EAAMxD,GACtBvlB,KAAKgpB,cAAa,EAAMzD,GACxBvlB,KAAK0U,cAAc,UACZ1U,IACT,CAMO+oB,WAAWE,EAAmB1D,GAAU,GAC7C,OAAIvlB,KAAKvD,KAAKyiB,aACd+J,SAAkBjpB,KAAKvD,KAAKysB,YAAclpB,KAAKvD,KAAKysB,aAAc,EAClElpB,KAAKggB,OAAO3iB,MAAMyC,SAAQxD,IACxB0D,KAAK2hB,uBAAuBrlB,GACxBA,EAAEsjB,SAAW2F,GAASjpB,EAAEsjB,QAAQmJ,WAAWE,EAAU1D,EAAQ,KAJlCvlB,IAOnC,CAMOgpB,aAAaC,EAAmB1D,GAAU,GAC/C,OAAIvlB,KAAKvD,KAAKyiB,aACd+J,SAAkBjpB,KAAKvD,KAAK0sB,cAAgBnpB,KAAKvD,KAAK0sB,eAAgB,EACtEnpB,KAAKggB,OAAO3iB,MAAMyC,SAAQxD,IACxB0D,KAAK2hB,uBAAuBrlB,GACxBA,EAAEsjB,SAAW2F,GAASjpB,EAAEsjB,QAAQoJ,aAAaC,EAAU1D,EAAQ,KAJpCvlB,IAOnC,CAGU0hB,UAAU7lB,GAMlB,OALA6gB,EAAGnM,UAAU1U,EAAI,WAAWwV,UAAUxV,EAAI,WACtCA,EAAGsR,sBACEtR,EAAGsR,cAAcic,eAEnBvtB,EAAGqe,UACHla,IACT,CAGUwgB,qBAGR,GAAIxgB,KAAKvD,KAAKyiB,aAAgBlf,KAAKvD,KAAK4sB,gBAAkBrpB,KAAKvD,KAAK6sB,UAElE,OADA5M,EAAGK,UAAU/c,KAAKnE,GAAI,WACfmE,KAIT,IAAIoQ,EAAoByT,EAEpB0F,EAAS,CAACpmB,EAAkBtH,EAAyBud,KACvD,IAAI5Y,EAAO3E,EAAGsR,cACd,IAAK3M,EAAM,OAEX4Y,EAASA,GAAUvd,EACnB,IAAIiC,EAASkC,KAAKnE,GAAGyG,wBACrB,MAAM,OAAEwD,EAAM,OAAEC,GAAWzK,EAAMma,mBAAmB2D,GACpD,IAAI,IAAC7X,EAAG,KAAED,GAAQ8X,EAAO9W,wBACzBhB,GAAQA,EAAOxD,EAAOwD,MAAQwE,EAC9BvE,GAAOA,EAAMzD,EAAOyD,KAAOwE,EAC3B,IAAI8T,EAAe,CAACzY,SAAU,CAACG,MAAKD,SAEpC,GAAId,EAAK4L,kBAAmB,CAO1B,GANA5L,EAAK1D,EAAIY,KAAKC,IAAI,EAAGD,KAAKqR,MAAMzN,EAAOuiB,IACvCrjB,EAAK5D,EAAIc,KAAKC,IAAI,EAAGD,KAAKqR,MAAMxN,EAAM6O,WAC/B5P,EAAKG,aACZX,KAAKggB,OAAOhV,aAAaxK,IAGpBR,KAAKggB,OAAO3S,UAAU7M,GAAO,CAEhC,GADAA,EAAKG,cAAe,GACfX,KAAKggB,OAAO3S,UAAU7M,GAEzB,YADAkc,EAAGxH,IAAIrZ,EAAI,QAGT2E,EAAK8M,cAEPhS,EAAM8M,QAAQ5H,EAAMA,EAAK8M,oBAClB9M,EAAK8M,aAKhBtN,KAAKwpB,eAAepQ,EAAQjW,EAAO0W,EAAIrZ,EAAMqjB,EAAWzT,QAGxDpQ,KAAKypB,cAAcrQ,EAAQjW,EAAO0W,EAAIrZ,EAAMqjB,EAAWzT,IA+L3D,OA3LAsM,EAAGK,UAAU/c,KAAKnE,GAAI,CACpBsV,OAAStV,IACP,IAAI2E,EAAsB3E,EAAGsR,cAE7B,GAAI3M,GAAMjE,OAASyD,KAAM,OAAO,EAChC,IAAKA,KAAKvD,KAAK4sB,cAAe,OAAO,EAErC,IAAIK,GAAY,EAChB,GAAuC,mBAA5B1pB,KAAKvD,KAAK4sB,cACnBK,EAAY1pB,KAAKvD,KAAK4sB,cAAcxtB,OAC/B,CACL,IAAIiD,GAAwC,IAA5BkB,KAAKvD,KAAK4sB,cAAyB,mBAAqBrpB,KAAKvD,KAAK4sB,cAClFK,EAAY7tB,EAAGmgB,QAAQld,GAGzB,GAAI4qB,GAAalpB,GAAQR,KAAKvD,KAAK4J,OAAQ,CACzC,IAAI/J,EAAI,CAACS,EAAGyD,EAAKzD,EAAGF,EAAG2D,EAAK3D,EAAGuD,KAAMI,EAAKJ,KAAMC,KAAMG,EAAKH,MAC3DqpB,EAAY1pB,KAAKggB,OAAO3S,UAAU/Q,GAEpC,OAAOotB,CAAS,IAMjB1U,GAAGhV,KAAKnE,GAAI,YAAY,CAACsH,EAActH,EAAyBud,KAE/D,IAAI5Y,EAAO3E,EAAGsR,cAEd,GAAI3M,GAAMjE,OAASyD,OAASQ,EAAK4L,kBAE/B,OAAO,EAIL5L,GAAMjE,MAAQiE,EAAKjE,OAASyD,OAASQ,EAAK4L,mBAE5B5L,EAAKjE,KACXotB,OAAO9tB,EAAIud,GAIvByK,EAAY7jB,KAAK6jB,YACjBzT,EAAapQ,KAAKwjB,eAAc,GAG3BhjB,IACHA,EAAOR,KAAK6gB,UAAUhlB,GAAI,IAEvB2E,EAAKjE,OACRiE,EAAKopB,aAAc,EACnB/tB,EAAGsR,cAAgB3M,GAIrB4Y,EAASA,GAAUvd,EACnB,IAAIkB,EAAIyD,EAAKzD,GAAKW,KAAKqR,MAAMqK,EAAOnT,YAAc4d,IAAc,EAC5DhnB,EAAI2D,EAAK3D,GAAKa,KAAKqR,MAAMqK,EAAOnW,aAAemN,IAAe,EA2BlE,OAxBI5P,EAAKjE,MAAQiE,EAAKjE,OAASyD,MAGxBnE,EAAGguB,qBAAoBhuB,EAAGguB,mBAAqBrpB,GACpD3E,EAAGsR,cAAgB3M,EAAO,IAAIA,EAAMzD,IAAGF,EAAGN,KAAMyD,aACzCQ,EAAK1D,SACL0D,EAAK5D,EACZoD,KAAKggB,OAAOzS,YAAY/M,GACrBwK,aAAaxK,GAEhBA,EAAK4oB,QACL5oB,EAAKopB,YACLppB,EAAK4L,mBAAoB,IAEzB5L,EAAKzD,EAAIA,EAAGyD,EAAK3D,EAAIA,EACrB2D,EAAK4L,mBAAoB,GAI3BpM,KAAK8pB,cAActpB,EAAK3E,IAAI,GAE5B6gB,EAAG1H,GAAGnZ,EAAI,OAAQ0tB,GAElBA,EAAOpmB,EAAoBtH,EAAIud,IACxB,CAAK,IAKbpE,GAAGhV,KAAKnE,GAAI,WAAW,CAACsH,EAAOtH,EAAyBud,KAEvD,IAAI5Y,EAAO3E,EAAGsR,cACd,QAAK3M,IAGAA,EAAKjE,MAAQiE,EAAKjE,OAASyD,OAC9BA,KAAK2pB,OAAO9tB,EAAIud,GAEZpZ,KAAK8N,SACP9N,KAAKgiB,gBAAgBxhB,KAGlB,EAAK,IAKbwU,GAAGhV,KAAKnE,GAAI,QAAQ,CAACsH,EAAOtH,EAAyBud,KACpD,IAAI5Y,EAAO3E,EAAGsR,cAEd,GAAI3M,GAAMjE,OAASyD,OAASQ,EAAKopB,YAAa,OAAO,EAErD,IAAIG,IAAa/pB,KAAKye,YAAYxc,cAClCjC,KAAKye,YAAY5f,SAIjB,IAAImrB,EAAWnuB,EAAGguB,mBAElB,UADOhuB,EAAGguB,mBACNE,GAAYC,GAAUztB,MAAQytB,EAASztB,OAASyD,KAAM,CACxD,IAAIiqB,EAAQD,EAASztB,KACrB0tB,EAAMjK,OAAOjQ,0BAA0Bia,GACvCC,EAAMjK,OAAO5Z,aAAakG,KAAK0d,GAC/BC,EAAM5G,sBAAsBE,sBAExB0G,EAAMtK,iBAAmBsK,EAAMjK,OAAO3iB,MAAMpB,QAAUguB,EAAMxtB,KAAKoR,gBACnEoc,EAAMjI,kBAIV,IAAKxhB,EAAM,OAAO,EAoBlB,GAjBIupB,IACF/pB,KAAKggB,OAAOzS,YAAY/M,GACxBA,EAAKjE,KAAOyD,MAEd0c,EAAGxH,IAAIrZ,EAAI,QAGPud,IAAWvd,GACbud,EAAOva,SACPhD,EAAGsR,cAAgB6c,EACfD,IACFluB,EAAKA,EAAGkI,WAAU,MAGpBlI,EAAGgD,SACHmB,KAAK0hB,UAAU7lB,KAEZkuB,EAAU,OAAO,EACtBluB,EAAGsR,cAAgB3M,EACnBA,EAAK3E,GAAKA,EACV,IAAI+jB,EAAUpf,EAAKof,SAAS/jB,IAAI+hB,UAgChC,OA9BAtiB,EAAM8M,QAAQ5H,EAAMR,KAAK6gB,UAAU7gB,KAAKye,cACxCnjB,EAAM4uB,wBAAwBruB,GAC9BmE,KAAK8gB,WAAWjlB,EAAI2E,GACpB3E,EAAGkY,UAAUC,IAAIhE,EAAaW,UAAW3Q,KAAKvD,KAAKkU,WACnD3Q,KAAKnE,GAAGyC,YAAYzC,GAChB+jB,IACFA,EAAQD,eAAiBnf,EACpBof,EAAQnjB,KAAKkpB,aAAa/F,EAAQO,eAAc,IAEvDngB,KAAKojB,yBACLpjB,KAAKggB,OAAO7Z,WAAWmG,KAAK9L,GAC5BR,KAAKsjB,mBACLtjB,KAAKujB,sBAELvjB,KAAKggB,OAAO3R,YACRrO,KAAK6e,gBAAyB,SAChC7e,KAAK6e,gBAAyB,QAAE,IAAI1b,EAAOqB,KAAM,WAAYwlB,GAAYA,EAASztB,KAAOytB,OAAWruB,EAAW6E,GAIjHgC,OAAOrB,YAAW,KAEZX,EAAK3E,IAAM2E,EAAK3E,GAAGoG,cACrBjC,KAAK2hB,uBAAuBnhB,GAE5BR,KAAKggB,OAAOzT,WAAW/L,UAElBA,EAAKjE,KAAKuR,OAAO,KAGnB,CAAK,IAET9N,IACT,CAGQ8pB,cAAcjuB,EAAyBgD,GAC7C,IAAI2B,EAAO3E,EAAKA,EAAGsR,mBAAgBxR,EAC9B6E,GAASA,EAAKjE,OAAQV,EAAGkY,UAAUiF,SAAShZ,KAAKvD,KAAKyU,iBAAiBE,WAC5EvS,EAAS2B,EAAKkM,kBAAmB,SAAclM,EAAKkM,iBACpD7N,EAAShD,EAAGkY,UAAUC,IAAI,4BAA8BnY,EAAGkY,UAAUlV,OAAO,4BAC9E,CAGU0hB,mBACR,IAAKvgB,KAAKvD,KAAKyiB,YAA6C,iBAAxBlf,KAAKvD,KAAK6sB,UAAwB,CACpE,IAAIa,EAAU1uB,SAASY,cAAc2D,KAAKvD,KAAK6sB,WAC/C,IAAKa,EAAS,OAAOnqB,KAIhB0c,EAAGO,YAAYkN,IAClBzN,EAAGK,UAAUoN,EAASnqB,KAAKvD,KAAKyU,kBAC7B8D,GAAGmV,EAAS,YAAY,CAAChnB,EAAOtH,IAAOmE,KAAK8pB,cAAcjuB,GAAI,KAC9DmZ,GAAGmV,EAAS,WAAY,CAAChnB,EAAOtH,IAAOmE,KAAK8pB,cAAcjuB,GAAI,KAGrE,OAAOmE,IACT,CAGU2hB,uBAAuBnhB,GAC/B,IAAI3E,EAAK2E,EAAK3E,GACd,MAAMgF,EAASL,EAAKK,QAAUb,KAAKvD,KAAKysB,YAClCtoB,EAAWJ,EAAKI,UAAYZ,KAAKvD,KAAK0sB,cAG5C,GAAInpB,KAAKvD,KAAKyiB,YAAere,GAAUD,EAMrC,OALIJ,EAAK4oB,UACPppB,KAAK0hB,UAAU7lB,UACR2E,EAAK4oB,SAEdvtB,EAAGkY,UAAUC,IAAI,wBAAyB,yBACnChU,KAGT,IAAKQ,EAAK4oB,QAAS,CAEjB,IAAIvF,EACAzT,EAGAga,EAAgB,CAACjnB,EAAc0W,KAE7B7Z,KAAK6e,gBAAgB1b,EAAMqB,OAC7BxE,KAAK6e,gBAAgB1b,EAAMqB,MAAMrB,EAAOA,EAAMvD,QAEhDikB,EAAY7jB,KAAK6jB,YACjBzT,EAAapQ,KAAKwjB,eAAc,GAEhCxjB,KAAKwpB,eAAe3tB,EAAIsH,EAAO0W,EAAIrZ,EAAMqjB,EAAWzT,EAAW,EAI7Dia,EAAe,CAAClnB,EAAmB0W,KACrC7Z,KAAKypB,cAAc5tB,EAAIsH,EAAO0W,EAAIrZ,EAAMqjB,EAAWzT,EAAW,EAI5Dka,EAAennB,IACjBnD,KAAKye,YAAY5f,gBACV2B,EAAK6G,eACL7G,EAAKuhB,cACLvhB,EAAKkL,WAGZ,IAAI9L,EAA8BuD,EAAMvD,OACxC,GAAKA,EAAOuN,eAAiBvN,EAAOuN,cAAc5Q,OAASyD,KAA3D,CAIA,GAFAQ,EAAK3E,GAAK+D,EAENY,EAAKkM,iBAAkB,CACzB,IAAInQ,EAAOV,EAAGsR,cAAc5Q,KACxBA,EAAKsiB,gBAAgB1b,EAAMqB,OAC7BjI,EAAKsiB,gBAAgB1b,EAAMqB,MAAMrB,EAAOvD,GAE1CrD,EAAKyjB,OAAO3iB,MAAMiP,KAAK9L,GACvBjE,EAAK4lB,aAAatmB,GAAI,GAAM,QAE5BP,EAAM4uB,wBAAwBtqB,GAC1BY,EAAK4L,mBAEP9Q,EAAM8M,QAAQ5H,EAAMA,EAAKkK,OACzB1K,KAAKkgB,cAActgB,EAAQY,GAC3BR,KAAKggB,OAAOxV,QAAQhK,IAGpBR,KAAKkgB,cAActgB,EAAQY,GAEzBR,KAAK6e,gBAAgB1b,EAAMqB,OAC7BxE,KAAK6e,gBAAgB1b,EAAMqB,MAAMrB,EAAOvD,GAI5CI,KAAK8e,cAAgB,EACrB9e,KAAKojB,yBACLpjB,KAAKujB,sBAELvjB,KAAKggB,OAAO3R,YAEO,eAAflL,EAAMqB,OACJlF,OAAO2a,UAAUzZ,EAAKhE,iBAAgBgE,EAAKhE,cAAgBgE,EAAK3D,GACpEmD,KAAKgkB,iBAAgB,GAAO,EAAMxjB,GAnCmC,GAuCzEkc,EAAGnM,UAAU1U,EAAI,CACfgb,MAAOuT,EACPrT,KAAMuT,EACN1Q,KAAMyQ,IACLhZ,UAAUxV,EAAI,CACfgb,MAAOuT,EACPrT,KAAMuT,EACN7S,OAAQ4S,IAEV7pB,EAAK4oB,SAAU,EAOjB,OAHA1M,EAAGnM,UAAU1U,EAAIgF,EAAS,UAAY,UACnCwQ,UAAUxV,EAAI+E,EAAW,UAAY,UAEjCZ,IACT,CAGUwpB,eAAe3tB,EAAyBsH,EAAc0W,EAAcrZ,EAAqBqjB,EAAmBzT,GACpHpQ,KAAKggB,OAAOlZ,aACTsH,YAAY5N,GAEfR,KAAKkgB,cAAclgB,KAAKye,YAAaje,GACrCR,KAAKnE,GAAGyC,YAAY0B,KAAKye,aAGzBje,EAAK3E,GAAKmE,KAAKye,YACfje,EAAK+pB,gBAAkB1Q,EAAGzY,SAC1BZ,EAAKgqB,UAAY3Q,EAAGzY,SAASG,IAC7Bf,EAAK6G,QAA0B,cAAflE,EAAMqB,YACfhE,EAAKkL,WAEO,aAAfvI,EAAMqB,MAAuBhE,EAAK4L,oBAEpCpM,KAAKggB,OAAOxV,QAAQhK,GACpBA,EAAK6G,SAAU,GAIjBrH,KAAKggB,OAAOzW,WAAWsa,EAAWzT,EAAYpQ,KAAKvD,KAAK+lB,UAAqBxiB,KAAKvD,KAAKgmB,YAAuBziB,KAAKvD,KAAK8lB,aAAwBviB,KAAKvD,KAAKimB,YACvI,gBAAfvf,EAAMqB,OACRkY,EAAGrL,UAAUxV,EAAI,SAAU,WAAYgoB,GAAarjB,EAAKJ,MAAQ,IAC9DiR,UAAUxV,EAAI,SAAU,YAAauU,GAAc5P,EAAKH,MAAQ,IAC/DG,EAAKF,MAAQoc,EAAGrL,UAAUxV,EAAI,SAAU,WAAYgoB,EAAYrjB,EAAKF,MACrEE,EAAKD,MAAQmc,EAAGrL,UAAUxV,EAAI,SAAU,YAAauU,EAAa5P,EAAKD,MAE/E,CAGUkpB,cAAc5tB,EAAyBsH,EAAmB0W,EAAcrZ,EAAqBqjB,EAAmBzT,GACxH,IACIvF,EADA9F,EAAI,IAAIvE,EAAKkK,OAEb+f,EAAQzqB,KAAKvD,KAAKimB,WACpBgI,EAAS1qB,KAAKvD,KAAKgmB,YACnBkI,EAAO3qB,KAAKvD,KAAK+lB,UACjBoI,EAAU5qB,KAAKvD,KAAK8lB,aAGlBsI,EAAUntB,KAAKqR,MAAmB,GAAbqB,GACvB0a,EAASptB,KAAKqR,MAAkB,GAAZ8U,GAMtB,GALA4G,EAAQ/sB,KAAK4L,IAAImhB,EAAOK,GACxBJ,EAAShtB,KAAK4L,IAAIohB,EAAQI,GAC1BH,EAAOjtB,KAAK4L,IAAIqhB,EAAME,GACtBD,EAAUltB,KAAK4L,IAAIshB,EAASC,GAET,SAAf1nB,EAAMqB,KAAiB,CACzB,GAAIhE,EAAK4L,kBAAmB,OAC5B,IAAIhK,EAAWyX,EAAGzY,SAASG,IAAMf,EAAKgqB,UACtChqB,EAAKgqB,UAAY3Q,EAAGzY,SAASG,KACM,IAA/BvB,KAAKvD,KAAK8T,UAAUG,QACtBpV,EAAMyvB,qBAAqBlvB,EAAIge,EAAGzY,SAAUgB,GAI9C,IAAId,EAAOuY,EAAGzY,SAASE,MAAQuY,EAAGzY,SAASE,KAAOd,EAAK+pB,gBAAgBjpB,MAASopB,EAASD,GACrFlpB,EAAMsY,EAAGzY,SAASG,KAAOsY,EAAGzY,SAASG,IAAMf,EAAK+pB,gBAAgBhpB,KAAQqpB,EAAUD,GACtF5lB,EAAEjI,EAAIY,KAAKqR,MAAMzN,EAAOuiB,GACxB9e,EAAEnI,EAAIc,KAAKqR,MAAMxN,EAAM6O,GAGvB,IAAI4a,EAAOhrB,KAAK8e,cAChB,GAAI9e,KAAKggB,OAAOxY,QAAQhH,EAAMuE,GAAI,CAChC,IAAIoJ,EAAMnO,KAAKkN,SACX+d,EAAQvtB,KAAKC,IAAI,EAAIoH,EAAEnI,EAAI4D,EAAK3D,EAAKsR,GACrCnO,KAAKvD,KAAK4J,QAAU8H,EAAM8c,EAAQjrB,KAAKvD,KAAK4J,SAC9C4kB,EAAQvtB,KAAKC,IAAI,EAAGqC,KAAKvD,KAAK4J,OAAS8H,IAEzCnO,KAAK8e,cAAgBmM,OAChBjrB,KAAK8e,cAAgB,EAG5B,GAFI9e,KAAK8e,gBAAkBkM,GAAMhrB,KAAKojB,yBAElC5iB,EAAK1D,IAAMiI,EAAEjI,GAAK0D,EAAK5D,IAAMmI,EAAEnI,EAAG,YAGjC,GAAmB,WAAfuG,EAAMqB,KAAoB,CACnC,GAAIO,EAAEjI,EAAI,EAAG,OAOb,GALAxB,EAAM4vB,mBAAmB/nB,EAAOtH,EAAIuU,GAGpCrL,EAAEhI,EAAIW,KAAKqR,OAAO8K,EAAG/D,KAAKtU,MAAQipB,GAAS5G,GAC3C9e,EAAElI,EAAIa,KAAKqR,OAAO8K,EAAG/D,KAAKrU,OAASkpB,GAAQva,GACvC5P,EAAKzD,IAAMgI,EAAEhI,GAAKyD,EAAK3D,IAAMkI,EAAElI,EAAG,OACtC,GAAI2D,EAAKkL,YAAclL,EAAKkL,WAAW3O,IAAMgI,EAAEhI,GAAKyD,EAAKkL,WAAW7O,IAAMkI,EAAElI,EAAG,OAG/E,IAAIyE,EAAOuY,EAAGzY,SAASE,KAAOmpB,EAC1BlpB,EAAMsY,EAAGzY,SAASG,IAAMopB,EAC5B5lB,EAAEjI,EAAIY,KAAKqR,MAAMzN,EAAOuiB,GACxB9e,EAAEnI,EAAIc,KAAKqR,MAAMxN,EAAM6O,GAEvBvF,GAAW,EAGbrK,EAAKuhB,OAAS5e,EACd3C,EAAKkL,WAAa3G,EAClB,IAAI1C,EAA0B,CAC5BvF,EAAG+c,EAAGzY,SAASE,KAAOmpB,EACtB7tB,EAAGid,EAAGzY,SAASG,IAAMopB,EACrB5tB,GAAI8c,EAAG/D,KAAO+D,EAAG/D,KAAKtU,MAAQhB,EAAKzD,EAAI8mB,GAAa4G,EAAQC,EAC5D7tB,GAAIgd,EAAG/D,KAAO+D,EAAG/D,KAAKrU,OAASjB,EAAK3D,EAAIuT,GAAcua,EAAOC,GAE/D,GAAI5qB,KAAKggB,OAAOnT,cAAcrM,EAAM,IAAIuE,EAAG8e,YAAWzT,aAAY/N,OAAMwI,aAAY,CAClFrK,EAAK+pB,gBAAkB1Q,EAAGzY,SAC1BpB,KAAKggB,OAAOzW,WAAWsa,EAAWzT,EAAYua,EAAMD,EAAQE,EAASH,UAC9DjqB,EAAK8G,UACRuD,GAAYrK,EAAKof,SAASpf,EAAKof,QAAQmI,WAC3C/nB,KAAK8e,cAAgB,EACrB9e,KAAKojB,yBAEL,IAAIxjB,EAASuD,EAAMvD,OACnBI,KAAKkgB,cAActgB,EAAQY,GACvBR,KAAK6e,gBAAgB1b,EAAMqB,OAC7BxE,KAAK6e,gBAAgB1b,EAAMqB,MAAMrB,EAAOvD,GAG9C,CAMU+pB,OAAO9tB,EAAyBud,GACxC,IAAI5Y,EAAO3E,EAAGsR,cACT3M,IAELkc,EAAGxH,IAAIrZ,EAAI,QAGP2E,EAAK4L,oBACT5L,EAAK4L,mBAAoB,EAEzBpM,KAAKggB,OAAOzT,WAAW/L,GACvBA,EAAK3E,GAAK2E,EAAKopB,aAAexQ,EAASA,EAASvd,GAEpB,IAAxBmE,KAAKvD,KAAK6sB,WAEZtpB,KAAK8pB,cAAcjuB,GAAI,GAIrBA,EAAGguB,oBAELhuB,EAAGsR,cAAgBtR,EAAGguB,0BACfhuB,EAAGguB,oBACDrpB,EAAKopB,qBAEPppB,EAAK3E,UACLA,EAAGsR,cAEVnN,KAAKggB,OAAOpU,mBAEhB,CAGOuf,SAA+F,OAA1DnrB,KAAKyG,aAAY,GXt4EvCtL,UWs4EuF6E,IAAM,SA7tErG,EAAAimB,sBAAwB,2BAGxB,EAAA3qB,MAAQA,EAGR,EAAA8vB,OAASllB,EA2jDhB,EAAAmlB,MAAQ","sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/runtime/define property getters","webpack://GridStack/webpack/runtime/hasOwnProperty shorthand","webpack://GridStack/./src/utils.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/types.ts","webpack://GridStack/./src/dd-manager.ts","webpack://GridStack/./src/dd-touch.ts","webpack://GridStack/./src/dd-resizable-handle.ts","webpack://GridStack/./src/dd-base-impl.ts","webpack://GridStack/./src/dd-resizable.ts","webpack://GridStack/./src/dd-draggable.ts","webpack://GridStack/./src/dd-droppable.ts","webpack://GridStack/./src/dd-element.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/dd-gridstack.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/**\r\n * utils.ts 9.3.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **removed** in a future release');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements. optional root which defaults to document (for shadow dom) */\r\n  static getElements(els: GridStackElement, root: HTMLElement | Document = document): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      const doc = ('getElementById' in root) ? root as Document : undefined;\r\n\r\n      // Note: very common for people use to id='1,2,3' which is only legal as HTML5 id, but not CSS selectors\r\n      // so if we start with a number, assume it's an id and just return that one item...\r\n      // see https://github.com/gridstack/gridstack.js/issues/2234#issuecomment-1523796562\r\n      if (doc && !isNaN(+els[0])) { // start with digit\r\n        const el = doc.getElementById(els);\r\n        return el ? [el] : [];\r\n      }\r\n\r\n      let list = root.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = root.querySelectorAll('.' + els);\r\n        if (!list.length) { list = root.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element. optional root which defaults to document (for shadow dom) */\r\n  static getElement(els: GridStackElement, root: HTMLElement | Document = document): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      const doc = ('getElementById' in root) ? root as Document : undefined;\r\n      if (!els.length) return null;\r\n      if (doc && els[0] === '#') {\r\n        return doc.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '#' || els[0] === '.' || els[0] === '[') {\r\n        return root.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if (doc && !isNaN(+els[0])) { // start with digit\r\n        return doc.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id, then class\r\n      let el = root.querySelector(els);\r\n      if (doc && !el) { el = doc.getElementById(els) }\r\n      if (!el) { el = root.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** true if we should resize to content */\r\n  static shouldSizeToContent(n: GridStackNode | undefined): boolean {\r\n    return n?.grid && (!!n.sizeToContent || (n.grid.opts.sizeToContent && n.sizeToContent !== false));\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n\r\n  /** returns the area a and b overlap */\r\n  static areaIntercept(a: GridStackPosition, b: GridStackPosition): number {\r\n    let x0 = (a.x > b.x) ? a.x : b.x;\r\n    let x1 = (a.x+a.w < b.x+b.w) ? a.x+a.w : b.x+b.w;\r\n    if (x1 <= x0) return 0; // no overlap\r\n    let y0 = (a.y > b.y) ? a.y : b.y;\r\n    let y1 = (a.y+a.h < b.y+b.h) ? a.y+a.h : b.y+b.h;\r\n    if (y1 <= y0) return 0; // no overlap\r\n    return (x1-x0) * (y1-y0);\r\n  }\r\n\r\n  /** returns the area */\r\n  static area(a: GridStackPosition): number {\r\n    return a.w * a.h;\r\n  }\r\n\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir: 1 | -1 = 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => ((b.x ?? 1000) + (b.y ?? 1000) * column)-((a.x ?? 1000) + (a.y ?? 1000) * column));\r\n    else\r\n      return nodes.sort((b, a) => ((b.x ?? 1000) + (b.y ?? 1000) * column)-((a.x ?? 1000) + (a.y ?? 1000) * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement, options?: { nonce?: string }): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    const nonce = options?.nonce\r\n    if (nonce) style.nonce = nonce\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      if (val === 'auto') h = 0;\r\n      else {\r\n        let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n        if (!match) {\r\n          throw new Error('Invalid height');\r\n        }\r\n        unit = match[2] || 'px';\r\n        h = parseFloat(match[1]);\r\n      }\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and optionally min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    if (b.x !== undefined) a.x = b.x;\r\n    if (b.y !== undefined) a.y = b.y;\r\n    if (b.w !== undefined) a.w = b.w;\r\n    if (b.h !== undefined) a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** given a node, makes sure it's min/max are valid */\r\n  static sanitizeMinMax(node: GridStackNode) {\r\n    // remove 0, undefine, null\r\n    if (!node.minW) { delete node.minW; }\r\n    if (!node.minH) { delete node.minH; }\r\n    if (!node.maxW) { delete node.maxW; }\r\n    if (!node.maxH) { delete node.maxH; }\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** removes internal fields '_' and default values for saving */\r\n  static removeInternalForSave(n: GridStackNode, removeEl = true): void {\r\n    for (let key in n) { if (key[0] === '_' || n[key] === null || n[key] === undefined ) delete n[key]; }\r\n    delete n.grid;\r\n    if (removeEl) delete n.el;\r\n    // delete default values (will be re-created on read)\r\n    if (!n.autoPosition) delete n.autoPosition;\r\n    if (!n.noResize) delete n.noResize;\r\n    if (!n.noMove) delete n.noMove;\r\n    if (!n.locked) delete n.locked;\r\n    if (n.w === 1 || n.w === n.minW) delete n.w;\r\n    if (n.h === 1 || n.h === n.minH) delete n.h;\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  // static closestUpByClass(el: HTMLElement, name: string): HTMLElement {\r\n  //   while (el) {\r\n  //     if (el.classList.contains(name)) return el;\r\n  //     el = el.parentElement\r\n  //   }\r\n  //   return null;\r\n  // }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  static getPositionContainerElement(el: HTMLElement): HTMLElement {\r\n    if (!el) return null;\r\n\r\n    const style = getComputedStyle(el);\r\n\r\n    if (style.position === 'relative' || style.position === 'absolute' || style.position === 'fixed') {\r\n      return el;\r\n    } else {\r\n      return Utils.getPositionContainerElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  static getContainerForPositionFixedElement(el: HTMLElement): HTMLElement {\r\n    while (el !== document.documentElement && el.parentElement && getComputedStyle(el as HTMLElement).transform === 'none') {\r\n      el = el.parentElement;\r\n    }\r\n\r\n    return el;\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // list of fields we will skip during cloneDeep (nested objects, other internal)\r\n    const skipFields = ['parentGrid', 'el', 'grid', 'subGrid', 'engine'];\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /** deep clone the given HTML node, removing teh unique id field */\r\n  public static cloneNode(el: HTMLElement): HTMLElement {\r\n    const node = el.cloneNode(true) as HTMLElement;\r\n    node.removeAttribute('id');\r\n    return node;\r\n  }\r\n\r\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement): void {\r\n    let parentNode: HTMLElement;\r\n    if (typeof parent === 'string') {\r\n      parentNode = Utils.getElement(parent);\r\n    } else {\r\n      parentNode = parent;\r\n    }\r\n    if (parentNode) {\r\n      parentNode.appendChild(el);\r\n    }\r\n  }\r\n\r\n  // public static setPositionRelative(el: HTMLElement): void {\r\n  //   if (!(/^(?:r|a|f)/).test(getComputedStyle(el).position)) {\r\n  //     el.style.position = \"relative\";\r\n  //   }\r\n  // }\r\n\r\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\r\n    if (styles instanceof Object) {\r\n      for (const s in styles) {\r\n        if (styles.hasOwnProperty(s)) {\r\n          if (Array.isArray(styles[s])) {\r\n            // support fallback value\r\n            (styles[s] as string[]).forEach(val => {\r\n              el.style[s] = val;\r\n            });\r\n          } else {\r\n            el.style[s] = styles[s];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\r\n    const evt = { type: info.type };\r\n    const obj = {\r\n      button: 0,\r\n      which: 0,\r\n      buttons: 1,\r\n      bubbles: true,\r\n      cancelable: true,\r\n      target: info.target ? info.target : e.target\r\n    };\r\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\r\n    if ((e as DragEvent).dataTransfer) {\r\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\r\n    }\r\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\r\n    return {...evt, ...obj} as unknown as T;\r\n  }\r\n\r\n  /** copies the MouseEvent properties and sends it as another event to the given target */\r\n  public static simulateMouseEvent(e: MouseEvent, simulatedType: string, target?: EventTarget): void {\r\n    const simulatedEvent = document.createEvent('MouseEvents');\r\n    simulatedEvent.initMouseEvent(\r\n      simulatedType, // type\r\n      true,         // bubbles\r\n      true,         // cancelable\r\n      window,       // view\r\n      1,            // detail\r\n      e.screenX,    // screenX\r\n      e.screenY,    // screenY\r\n      e.clientX,    // clientX\r\n      e.clientY,    // clientY\r\n      e.ctrlKey,    // ctrlKey\r\n      e.altKey,     // altKey\r\n      e.shiftKey,   // shiftKey\r\n      e.metaKey,    // metaKey\r\n      0,            // button\r\n      e.target      // relatedTarget\r\n    );\r\n    (target || e.target).dispatchEvent(simulatedEvent);\r\n  }\r\n\r\n  public static getScaleForElement(element: HTMLElement) {\r\n    // Check if element is visible, otherwise the width/height will be of 0\r\n    while (element && !element.offsetParent) {\r\n      element = element.parentElement;\r\n    }\r\n\r\n    if (!element) {\r\n      return { scaleX: 1, scaleY: 1 };\r\n    }\r\n\r\n    const boundingClientRect = element.getBoundingClientRect();\r\n    const scaleX = boundingClientRect.width / element.offsetWidth;\r\n    const scaleY = boundingClientRect.height / element.offsetHeight;\r\n    return { scaleX, scaleY };\r\n  }\r\n\r\n  /** returns true if event is inside the given element rectangle */\r\n  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\r\n  //    this.el.contains(event.relatedTarget as HTMLElement)\r\n  // public static inside(e: MouseEvent, el: HTMLElement): boolean {\r\n  //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\r\n  //   let target: HTMLElement = e.relatedTarget || (e as any).fromElement;\r\n  //   if (!target) {\r\n  //     const { bottom, left, right, top } = el.getBoundingClientRect();\r\n  //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);\r\n  //   }\r\n  //   return el.contains(target);\r\n  // }\r\n}\r\n","/**\n * gridstack-engine.ts 9.3.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts, SaveFcn, CompactOptions } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore back (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter */\n  public static _idSeq = 0;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(flag = true, doPack = true): GridStackEngine {\n    if (!!this.batchMode === flag) return this;\n    this.batchMode = flag;\n    if (flag) {\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n      this.cleanNodes();\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    } else {\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      if (doPack) this._packNodes();\n      this._notify();\n    }\n    return this;\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return (!this.float || this.batchMode && !this._prevFloat) && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\n    const skipId = skip._id;\n    const skip2Id = skip2?._id;\n    return this.nodes.find(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    const skipId = skip._id;\n    const skip2Id = skip2?._id;\n    return this.nodes.filter(n => n._id !== skipId && n._id !== skip2Id && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\n  protected directionCollideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    let overMax = 0.5; // need >50%\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE;\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    o.collide = collide; // save it so we don't have to find it again\n    return collide;\n  }\n\n  /** does a pixel coverage returning the node that has the most coverage by area */\n  /*\n  protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\n    let collide: GridStackNode;\n    let overMax = 0;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let over = Utils.areaIntercept(r, n._rect);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return {collide, over: overMax};\n  }\n  */\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space - optionally keeping the sort order exactly the same ('list' mode) vs truly finding an empty spaces */\n  public compact(layout: CompactOptions = 'compact', doSort = true): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    if (doSort) this.sortNodes();\n    const wasBatch = this.batchMode;\n    if (!wasBatch) this.batchUpdate();\n    const wasColumnResize = this._inColumnResize;\n    if (!wasColumnResize) this._inColumnResize = true; // faster addNode()\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach((n, index, list) => {\n      let after: GridStackNode;\n      if (!n.locked) {\n        n.autoPosition = true;\n        if (layout === 'list' && index) after = list[index - 1];\n      }\n      this.addNode(n, false, after); // 'false' for add event trigger\n    });\n    if (!wasColumnResize) delete this._inColumnResize;\n    if (!wasBatch) this.batchUpdate(false);\n    return this;\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir: 1 | -1 = 1, column = this.column): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node = node || {};\n    node._id = node._id ?? GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n    Utils.sanitizeMinMax(node);\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string') { node.x = Number(node.x); }\n    if (typeof node.y == 'string') { node.y = Number(node.y); }\n    if (typeof node.w == 'string') { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x)) { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y)) { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w)) { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    return this.nodeBoundFix(node, resizing);\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    // if user loaded a larger than allowed widget for current # of columns,\n    // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\n    // IFF we're not in the middle of column resizing!\n    const saveOrig = (node.x || 0) + (node.w || 1) > this.column;\n    if (saveOrig && this.column < 12 && !this._inColumnResize && node._id && this.findCacheLayout(node, 12) === -1) {\n      let copy = {...node}; // need _id + positions\n      if (copy.autoPosition || copy.x === undefined) { delete copy.x; delete copy.y; }\n      else copy.x = Math.min(11, copy.x);\n      copy.w = Math.min(12, copy.w || 1);\n      this.cacheOneLayout(copy, 12);\n    }\n\n    if (node.w > this.column) {\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return node;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found.\n   * optionally you can pass your own existing node list and column count, otherwise defaults to that engine data.\n   * Optionally pass a widget to start search AFTER, meaning the order will remain the same but possibly have empty slots we skipped\n   */\n  public findEmptyPosition(node: GridStackNode, nodeList = this.nodes, column = this.column, after?: GridStackNode): boolean {\n    let start = after ? after.y * column + (after.x + after.w) : 0;\n    let found = false;\n    for (let i = start; !found; ++i) {\n      let x = i % column;\n      let y = Math.floor(i / column);\n      if (x + node.w > column) {\n        continue;\n      }\n      let box = {x, y, w: node.w, h: node.h};\n      if (!nodeList.find(n => Utils.isIntercepted(box, n))) {\n        if (node.x !== x || node.y !== y) node._dirty = true;\n        node.x = x;\n        node.y = y;\n        delete node.autoPosition;\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false, after?: GridStackNode): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    let skipCollision: boolean;\n    if (node.autoPosition && this.findEmptyPosition(node, this.nodes, this.column, after)) {\n      delete node.autoPosition; // found our slot\n      skipCollision = true;\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    if (!skipCollision) this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n._id === node._id)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n._id !== node._id);\n    if (!node._isAboutToRemove) this._packNodes(); // if dragged out, no need to relayout as already done...\n    this._notify([node]);\n    return this;\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (!this.nodes.length) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n._id === node._id) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // check if we're covering 50% collision and could move, while still being under maxRow or at least not making it worse\n    // (case where widget was somehow added past our max #2449)\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= Math.max(this.getRow(), this.maxRow);\n    // else check if we can force a swap (float=true, or different shapes) on non-resize\n    if (!canMove && !o.resizing && o.collide) {\n      let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n      if (this.swap(node, collide)) { // swaps and mark dirty\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    let wasUndefinedPack: boolean;\n    if (o.pack === undefined) {\n      wasUndefinedPack = o.pack = true;\n    }\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      let activeDrag = node._moving && !o.nested;\n      // check to make sure we actually collided over 50% surface area while dragging\n      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n      // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n      if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\n        let over = Utils.areaIntercept(o.rect, collide._rect);\n        let a1 = Utils.area(o.rect);\n        let a2 = Utils.area(collide._rect);\n        let perc = over / (a1 < a2 ? a1 : a2);\n        if (perc > .8) {\n          collide.grid.makeSubGrid(collide.el, undefined, node);\n          collide = undefined;\n        }\n      }\n\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n        if (wasUndefinedPack) delete o.pack;\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\n   * returning a list of widgets for serialization */\n  public save(saveElement = true, saveCB?: SaveFcn): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      // use layout info fields instead if set\n      let w: GridStackNode = {...n, ...(wl || {})};\n      Utils.removeInternalForSave(w, !saveElement);\n      if (saveCB) saveCB(n, w);\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (n.y >= 0 && node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public columnChanged(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // simpler shortcuts layouts\n    const doCompact = layout === 'compact' || layout === 'list';\n    if (doCompact) {\n      this.sortNodes(1, prevColumn); // sort with original layout once and only once (new column will affect order otherwise)\n    }\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data IFF we're sizing down (see below)\n    if (column < prevColumn) this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n    \n    // if we're going to 1 column and using DOM order (item passed in) rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = doCompact ? this.nodes : Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    if (column > prevColumn && this._layouts) {\n      const cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            if (!doCompact && !cacheNode.autoPosition) {\n              n.x = cacheNode.x ?? n.x;\n              n.y = cacheNode.y ?? n.y;\n            }\n            n.w = cacheNode.w ?? n.w;\n            if (cacheNode.x == undefined || cacheNode.y === undefined) n.autoPosition = true;\n          }\n        });\n      }\n\n      // if we found cache re-use those nodes that are still current\n      cacheNodes.forEach(cacheNode => {\n        let j = nodes.findIndex(n => n._id === cacheNode._id);\n        if (j !== -1) {\n          const n = nodes[j];\n          // still current, use cache info positions\n          if (doCompact) {\n            n.w = cacheNode.w; // only w is used, and don't trim the list\n            return;\n          }\n          if (cacheNode.autoPosition || isNaN(cacheNode.x) || isNaN(cacheNode.y)) {\n            this.findEmptyPosition(cacheNode, newNodes);\n          }\n          if (!cacheNode.autoPosition) {\n            n.x = cacheNode.x ?? n.x;\n            n.y = cacheNode.y ?? n.y;\n            n.w = cacheNode.w ?? n.w;\n            newNodes.push(n);\n          }\n          nodes.splice(j, 1);\n        }\n      });\n    }\n\n    // much simpler layout that just compacts\n    if (doCompact) {\n      this.compact(layout, false);\n    } else {\n      // ...and add any extra non-cached ones\n      if (nodes.length) {\n        if (typeof layout === 'function') {\n          layout(column, prevColumn, newNodes, nodes);\n        } else if (!domOrder) {\n          let ratio = (doCompact || layout === 'none') ? 1 : column / prevColumn;\n          let move = (layout === 'move' || layout === 'moveScale');\n          let scale = (layout === 'scale' || layout === 'moveScale');\n          nodes.forEach(node => {\n            // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n            node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n            node.w = ((column === 1 || prevColumn === 1) ? 1 : scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n            newNodes.push(node);\n          });\n          nodes = [];\n        }\n      }\n\n      // finally re-layout them in reverse order (to get correct placement)\n      if (!domOrder) newNodes = Utils.sort(newNodes, -1, column);\n      this._inColumnResize = true; // prevent cache update\n      this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n      newNodes.forEach(node => {\n        this.addNode(node, false); // 'false' for add event trigger\n        delete node._orig; // make sure the commit doesn't try to restore things back to original\n      });\n    }\n    \n    this.nodes.forEach(n => delete n._orig); // clear _orig before batch=false so it doesn't handle float=true restore\n    this.batchUpdate(false, !doCompact);\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id ?? GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id ?? GridStackEngine._idSeq++;\n    let l: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    if (n.autoPosition || n.x === undefined) { delete l.x; delete l.y; if (n.autoPosition) l.autoPosition = true; }\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this.findCacheLayout(n, column);\n    if (index === -1)\n      this._layouts[column].push(l);\n    else\n      this._layouts[column][index] = l;\n    return this;\n  }\n\n  protected findCacheLayout(n: GridStackNode, column: number): number {\n    return this._layouts?.[column]?.findIndex(l => l._id === n._id) ?? -1;\n  }\n\n  public removeNodeFromLayoutCache(n: GridStackNode) {\n    if (!this._layouts) {\n      return;\n    }\n    for (let i = 0; i < this._layouts.length; i++) {\n      let index = this.findCacheLayout(n, i);\n      if (index !== -1) {\n        this._layouts[i].splice(index, 1);\n      }\n    }\n  }\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n","/**\r\n * types.ts 9.3.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStack } from './gridstack';\r\nimport { GridStackEngine } from './gridstack-engine';\r\n\r\n// default values for grid options - used during init and when saving out\r\nexport const gridDefaults: GridStackOptions = {\r\n  alwaysShowResizeHandle: 'mobile',\r\n  animate: true,\r\n  auto: true,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  cellHeightUnit: 'px',\r\n  column: 12,\r\n  draggable: { handle: '.grid-stack-item-content', appendTo: 'body', scroll: true },\r\n  handle: '.grid-stack-item-content',\r\n  itemClass: 'grid-stack-item',\r\n  margin: 10,\r\n  marginUnit: 'px',\r\n  maxRow: 0,\r\n  minRow: 0,\r\n  oneColumnSize: 768,\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  removableOptions: { accept: 'grid-stack-item', decline: 'grid-stack-non-removable'},\r\n  resizable: { handles: 'se' },\r\n  rtl: 'auto',\r\n\r\n  // **** same as not being set ****\r\n  // disableDrag: false,\r\n  // disableOneColumnMode: false,\r\n  // disableResize: false,\r\n  // float: false,\r\n  // handleClass: null,\r\n  // oneColumnModeDomSort: false,\r\n  // removable: false,\r\n  // staticGrid: false,\r\n  // styleInHead: false,\r\n  //removable\r\n};\r\n\r\n/** default dragIn options */\r\nexport const dragInDefaultOptions: DDDragInOpt = {\r\n  handle: '.grid-stack-item-content',\r\n  appendTo: 'body',\r\n  // revert: 'invalid',\r\n  // scroll: false,\r\n};\r\n\r\n/** \r\n * different layout options when changing # of columns, including a custom function that takes new/old column count, and array of new/old positions\r\n * Note: new list may be partially already filled if we have a cache of the layout at that size and new items were added later.\r\n * Options are:\r\n * 'list' - treat items as sorted list, keeping items (un-sized unless too big for column count) sequentially reflowing them\r\n * 'compact' - similar to list, but using compact() method which will possibly re-order items if an empty slots are available due to a larger item needing to be pushed to next row\r\n * 'moveScale' - will scale and move items by the ratio new newColumnCount / oldColumnCount\r\n * 'move' | 'scale' - will only size or move items\r\n * 'none' will leave items unchanged, unless they don't fit in column count\r\n */\r\nexport type ColumnOptions = 'list' | 'compact' | 'moveScale' | 'move' | 'scale' | 'none' |\r\n  ((column: number, oldColumn: number, nodes: GridStackNode[], oldNodes: GridStackNode[]) => void);\r\nexport type CompactOptions = 'list' | 'compact';\r\nexport type numberOrString = number | string;\r\nexport interface GridItemHTMLElement extends HTMLElement {\r\n  /** pointer to grid node instance */\r\n  gridstackNode?: GridStackNode;\r\n  /** @internal */\r\n  _gridstackNodeOrig?: GridStackNode;\r\n}\r\n\r\nexport type GridStackElement = string | HTMLElement | GridItemHTMLElement;\r\n\r\n/** specific and general event handlers for the .on() method */\r\nexport type GridStackEventHandler = (event: Event) => void;\r\nexport type GridStackElementHandler = (event: Event, el: GridItemHTMLElement) => void;\r\nexport type GridStackNodesHandler = (event: Event, nodes: GridStackNode[]) => void;\r\nexport type GridStackDroppedHandler = (event: Event, previousNode: GridStackNode, newNode: GridStackNode) => void;\r\nexport type GridStackEventHandlerCallback = GridStackEventHandler | GridStackElementHandler | GridStackNodesHandler | GridStackDroppedHandler;\r\n\r\n/** optional function called during load() to callback the user on new added/remove grid items | grids */\r\nexport type AddRemoveFcn = (parent: HTMLElement, w: GridStackWidget, add: boolean, grid: boolean) => HTMLElement | undefined;\r\n\r\n/** optional function called during save() to let the caller add additional custom data to the GridStackWidget structure that will get returned */\r\nexport type SaveFcn = (node: GridStackNode, w: GridStackWidget) => void;\r\n\r\nexport type ResizeToContentFcn = (el: GridItemHTMLElement, useAttr?: boolean) => void;\r\n\r\n/**\r\n * Defines the options for a Grid\r\n */\r\nexport interface GridStackOptions {\r\n  /**\r\n   * accept widgets dragged from other grids or from outside (default: `false`). Can be:\r\n   * `true` (uses `'.grid-stack-item'` class filter) or `false`,\r\n   * string for explicit class name,\r\n   * function returning a boolean. See [example](http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  acceptWidgets?: boolean | string | ((element: Element) => boolean);\r\n\r\n  /** possible values (default: `mobile`) - does not apply to non-resizable widgets\r\n    * `false` the resizing handles are only shown while hovering over a widget\r\n    * `true` the resizing handles are always shown\r\n    * 'mobile' if running on a mobile device, default to `true` (since there is no hovering per say), else `false`.\r\n    See [example](http://gridstack.github.io/gridstack.js/demo/mobile.html) */\r\n  alwaysShowResizeHandle?: true | false | 'mobile';\r\n\r\n  /** turns animation on (default?: true) */\r\n  animate?: boolean;\r\n\r\n  /** if false gridstack will not initialize existing items (default?: true) */\r\n  auto?: boolean;\r\n\r\n  /**\r\n   * one cell height (default?: 'auto'). Can be:\r\n   *  an integer (px)\r\n   *  a string (ex: '100px', '10em', '10rem'). Note: % doesn't right - see demo/cell-height.html\r\n   *  0, in which case the library will not generate styles for rows. Everything must be defined in your own CSS files.\r\n   *  'auto' - height will be calculated for square cells (width / column) and updated live as you resize the window - also see `cellHeightThrottle`\r\n   *  'initial' - similar to 'auto' (start at square cells) but stay that size during window resizing.\r\n   */\r\n  cellHeight?: numberOrString;\r\n\r\n  /** throttle time delay (in ms) used when cellHeight='auto' to improve performance vs usability (default?: 100).\r\n   * A value of 0 will make it instant at a cost of re-creating the CSS file at ever window resize event!\r\n   * */\r\n  cellHeightThrottle?: number;\r\n\r\n  /** (internal) unit for cellHeight (default? 'px') which is set when a string cellHeight with a unit is passed (ex: '10rem') */\r\n  cellHeightUnit?: string;\r\n\r\n  /** list of children item to create when calling load() or addGrid() */\r\n  children?: GridStackWidget[];\r\n\r\n  /** number of columns (default?: 12). Note: IF you change this, CSS also have to change. See https://github.com/gridstack/gridstack.js#change-grid-columns.\r\n   * Note: for nested grids, it is recommended to use 'auto' which will always match the container grid-item current width (in column) to keep inside and outside\r\n   * items always to same. flag is not supported for regular non-nested grids.\r\n   */\r\n  column?: number | 'auto';\r\n\r\n  /** additional class on top of '.grid-stack' (which is required for our CSS) to differentiate this instance.\r\n  Note: only used by addGrid(), else your element should have the needed class */\r\n  class?: string;\r\n\r\n  /** disallows dragging of widgets (default?: false) */\r\n  disableDrag?: boolean;\r\n\r\n  /** disables the onColumnMode when the grid width is less than oneColumnSize (default?: false) */\r\n  disableOneColumnMode?: boolean;\r\n\r\n  /** disallows resizing of widgets (default?: false). */\r\n  disableResize?: boolean;\r\n\r\n  /** allows to override UI draggable options. (default?: { handle?: '.grid-stack-item-content', appendTo?: 'body' }) */\r\n  draggable?: DDDragOpt;\r\n\r\n  /** let user drag nested grid items out of a parent or not (default true - not supported yet) */\r\n  //dragOut?: boolean;\r\n\r\n  /** the type of engine to create (so you can subclass) default to GridStackEngine */\r\n  engineClass?: typeof GridStackEngine;\r\n\r\n  /** enable floating widgets (default?: false) See example (http://gridstack.github.io/gridstack.js/demo/float.html) */\r\n  float?: boolean;\r\n\r\n  /** draggable handle selector (default?: '.grid-stack-item-content') */\r\n  handle?: string;\r\n\r\n  /** draggable handle class (e.g. 'grid-stack-item-content'). If set 'handle' is ignored (default?: null) */\r\n  handleClass?: string;\r\n\r\n  /** additional widget class (default?: 'grid-stack-item') */\r\n  itemClass?: string;\r\n\r\n  /**\r\n   * gap between grid item and content (default?: 10). This will set all 4 sides and support the CSS formats below\r\n   *  an integer (px)\r\n   *  a string with possible units (ex: '2em', '20px', '2rem')\r\n   *  string with space separated values (ex: '5px 10px 0 20px' for all 4 sides, or '5em 10em' for top/bottom and left/right pairs like CSS).\r\n   * Note: all sides must have same units (last one wins, default px)\r\n   */\r\n  margin?: numberOrString;\r\n\r\n  /** OLD way to optionally set each side - use margin: '5px 10px 0 20px' instead. Used internally to store each side. */\r\n  marginTop?: numberOrString;\r\n  marginRight?: numberOrString;\r\n  marginBottom?: numberOrString;\r\n  marginLeft?: numberOrString;\r\n\r\n  /** (internal) unit for margin (default? 'px') set when `margin` is set as string with unit (ex: 2rem') */\r\n  marginUnit?: string;\r\n\r\n  /** maximum rows amount. Default? is 0 which means no maximum rows */\r\n  maxRow?: number;\r\n\r\n  /** minimum rows amount. Default is `0`. You can also do this with `min-height` CSS attribute\r\n   * on the grid div in pixels, which will round to the closest row.\r\n   */\r\n  minRow?: number;\r\n\r\n  /** If you are using a nonce-based Content Security Policy, pass your nonce here and\r\n   * GridStack will add it to the <style> elements it creates. */\r\n  nonce?: string;\r\n\r\n  /** minimal width before grid will be shown in one column mode (default?: 768) */\r\n  oneColumnSize?: number;\r\n\r\n  /**\r\n   * set to true if you want oneColumnMode to use the DOM order and ignore x,y from normal multi column\r\n   * layouts during sorting. This enables you to have custom 1 column layout that differ from the rest. (default?: false)\r\n   */\r\n  oneColumnModeDomSort?: boolean;\r\n\r\n  /** class for placeholder (default?: 'grid-stack-placeholder') */\r\n  placeholderClass?: string;\r\n\r\n  /** placeholder default content (default?: '') */\r\n  placeholderText?: string;\r\n\r\n  /** allows to override UI resizable options. (default?: { handles: 'se' }) */\r\n  resizable?: DDResizeOpt;\r\n\r\n  /**\r\n   * if true widgets could be removed by dragging outside of the grid. It could also be a selector string (ex: \".trash\"),\r\n   * in this case widgets will be removed by dropping them there (default?: false)\r\n   * See example (http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  removable?: boolean | string;\r\n\r\n  /** allows to override UI removable options. (default?: { accept: '.grid-stack-item' }) */\r\n  removableOptions?: DDRemoveOpt;\r\n\r\n  /** fix grid number of rows. This is a shortcut of writing `minRow:N, maxRow:N`. (default `0` no constrain) */\r\n  row?: number;\r\n\r\n  /**\r\n   * if true turns grid to RTL. Possible values are true, false, 'auto' (default?: 'auto')\r\n   * See [example](http://gridstack.github.io/gridstack.js/demo/rtl.html)\r\n   */\r\n  rtl?: boolean | 'auto';\r\n\r\n  /** set to true if all grid items (by default, but item can also override) height should be based on content size instead of WidgetItem.h to avoid v-scrollbars.\r\n   Note: this is still row based, not pixels, so it will use ceil(getBoundingClientRect().height / getCellHeight()) */\r\n   sizeToContent?: boolean;\r\n\r\n  /**\r\n   * makes grid static (default?: false). If `true` widgets are not movable/resizable.\r\n   * You don't even need draggable/resizable. A CSS class\r\n   * 'grid-stack-static' is also added to the element.\r\n   */\r\n  staticGrid?: boolean;\r\n\r\n  /** if `true` will add style element to `<head>` otherwise will add it to element's parent node (default `false`). */\r\n  styleInHead?: boolean;\r\n\r\n  /** list of differences in options for automatically created sub-grids under us (inside our grid-items) */\r\n  subGridOpts?: GridStackOptions;\r\n\r\n  /** enable/disable the creation of sub-grids on the fly by dragging items completely\r\n   * over others (nest) vs partially (push). Forces `DDDragOpt.pause=true` to accomplish that. */\r\n  subGridDynamic?: boolean;\r\n}\r\n\r\n/** options used during GridStackEngine.moveNode() */\r\nexport interface GridStackMoveOpts extends GridStackPosition {\r\n  /** node to skip collision */\r\n  skip?: GridStackNode;\r\n  /** do we pack (default true) */\r\n  pack?: boolean;\r\n  /** true if we are calling this recursively to prevent simple swap or coverage collision - default false*/\r\n  nested?: boolean;\r\n  /** vars to calculate other cells coordinates */\r\n  cellWidth?: number;\r\n  cellHeight?: number;\r\n  marginTop?: number;\r\n  marginBottom?: number;\r\n  marginLeft?: number;\r\n  marginRight?: number;\r\n  /** position in pixels of the currently dragged items (for overlap check) */\r\n  rect?: GridStackPosition;\r\n  /** true if we're live resizing */\r\n  resizing?: boolean;\r\n  /** best node (most coverage) we collied with */\r\n  collide?: GridStackNode;\r\n}\r\n\r\nexport interface GridStackPosition {\r\n  /** widget position x (default?: 0) */\r\n  x?: number;\r\n  /** widget position y (default?: 0) */\r\n  y?: number;\r\n  /** widget dimension width (default?: 1) */\r\n  w?: number;\r\n  /** widget dimension height (default?: 1) */\r\n  h?: number;\r\n}\r\n\r\n/**\r\n * GridStack Widget creation options\r\n */\r\nexport interface GridStackWidget extends GridStackPosition {\r\n  /** if true then x, y parameters will be ignored and widget will be places on the first available position (default?: false) */\r\n  autoPosition?: boolean;\r\n  /** minimum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minW?: number;\r\n  /** maximum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxW?: number;\r\n  /** minimum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minH?: number;\r\n  /** maximum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxH?: number;\r\n  /** prevent direct resizing by the user (default?: undefined = un-constrained) */\r\n  noResize?: boolean;\r\n  /** prevents direct moving by the user (default?: undefined = un-constrained) */\r\n  noMove?: boolean;\r\n  /** same as noMove+noResize but also prevents being pushed by other widgets or api (default?: undefined = un-constrained) */\r\n  locked?: boolean;\r\n  /** value for `gs-id` stored on the widget (default?: undefined) */\r\n  id?: string;\r\n  /** html to append inside as content */\r\n  content?: string;\r\n  /** local (vs grid) override - see GridStackOptions. \r\n   * Note: This also allow you to set a maximum h value (but user changeable during normal resizing) to prevent unlimited content from taking too much space (get scrollbar) */\r\n  sizeToContent?: boolean | number;\r\n  /** local override of GridStack.resizeToContentParent that specify the class to use for the parent (actual) vs child (wanted) height */\r\n  resizeToContentParent?: string;\r\n  /** optional nested grid options and list of children, which then turns into actual instance at runtime to get options from */\r\n  subGridOpts?: GridStackOptions;\r\n}\r\n\r\n/** Drag&Drop resize options */\r\nexport interface DDResizeOpt {\r\n  /** do resize handle hide by default until mouse over ? - default: true on desktop, false on mobile*/\r\n  autoHide?: boolean;\r\n  /**\r\n   * sides where you can resize from (ex: 'e, se, s, sw, w') - default 'se' (south-east)\r\n   * Note: it is not recommended to resize from the top sides as weird side effect may occur.\r\n  */\r\n  handles?: string;\r\n}\r\n\r\n/** Drag&Drop remove options */\r\nexport interface DDRemoveOpt {\r\n  /** class that can be removed (default?: opts.itemClass) */\r\n  accept?: string;\r\n  /** class that cannot be removed (default: 'grid-stack-non-removable') */\r\n  decline?: string;\r\n}\r\n\r\n/** Drag&Drop dragging options */\r\nexport interface DDDragOpt {\r\n  /** class selector of items that can be dragged. default to '.grid-stack-item-content' */\r\n  handle?: string;\r\n  /** default to 'body' */\r\n  appendTo?: string;\r\n  /** if set (true | msec), dragging placement (collision) will only happen after a pause by the user. Note: this is Global */\r\n  pause?: boolean | number;\r\n  /** default to `true` */\r\n  scroll?: boolean;\r\n  /** prevents dragging from starting on specified elements, listed as comma separated selectors (eg: '.no-drag'). default built in is 'input,textarea,button,select,option' */\r\n  cancel?: string;\r\n}\r\nexport interface DDDragInOpt extends DDDragOpt {\r\n  /** helper function when dropping: 'clone' or your own method */\r\n  helper?: 'clone' | ((event: Event) => HTMLElement);\r\n  /** used when dragging item from the outside, and canceling (ex: 'invalid' or your own method)*/\r\n  // revert?: string | ((event: Event) => HTMLElement);\r\n}\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\nexport interface Position {\r\n  top: number;\r\n  left: number;\r\n}\r\nexport interface Rect extends Size, Position {}\r\n\r\n/** data that is passed during drag and resizing callbacks */\r\nexport interface DDUIData {\r\n  position?: Position;\r\n  size?: Size;\r\n  draggable?: HTMLElement;\r\n  /* fields not used by GridStack but sent by jq ? leave in case we go back to them...\r\n  originalPosition? : Position;\r\n  offset?: Position;\r\n  originalSize?: Size;\r\n  element?: HTMLElement[];\r\n  helper?: HTMLElement[];\r\n  originalElement?: HTMLElement[];\r\n  */\r\n}\r\n\r\n/**\r\n * internal descriptions describing the items in the grid\r\n */\r\nexport interface GridStackNode extends GridStackWidget {\r\n  /** pointer back to HTML element */\r\n  el?: GridItemHTMLElement;\r\n  /** pointer back to parent Grid instance */\r\n  grid?: GridStack;\r\n  /** actual sub-grid instance */\r\n  subGrid?: GridStack;\r\n  /** @internal internal id used to match when cloning engines or saving column layouts */\r\n  _id?: number;\r\n  /** @internal */\r\n  _dirty?: boolean;\r\n  /** @internal */\r\n  _updating?: boolean;\r\n  /** @internal true when over trash/another grid so we don't bother removing drag CSS style that would animate back to old position */\r\n  _isAboutToRemove?: boolean;\r\n  /** @internal true if item came from outside of the grid -> actual item need to be moved over */\r\n  _isExternal?: boolean;\r\n  /** @internal Mouse event that's causing moving|resizing */\r\n  _event?: MouseEvent;\r\n  /** @internal moving vs resizing */\r\n  _moving?: boolean;\r\n  /** @internal true if we jumped down past item below (one time jump so we don't have to totally pass it) */\r\n  _skipDown?: boolean;\r\n  /** @internal original values before a drag/size */\r\n  _orig?: GridStackPosition;\r\n  /** @internal position in pixels used during collision check  */\r\n  _rect?: GridStackPosition;\r\n  /** @internal top/left pixel location before a drag so we can detect direction of move from last position*/\r\n  _lastUiPosition?: Position;\r\n  /** @internal set on the item being dragged/resized remember the last positions we've tried (but failed) so we don't try again during drag/resize */\r\n  _lastTried?: GridStackPosition;\r\n  /** @internal position willItFit() will use to position the item */\r\n  _willFitPos?: GridStackPosition;\r\n  /** @internal last drag Y pixel position used to incrementally update V scroll bar */\r\n  _prevYPix?: number;\r\n  /** @internal true if we've remove the item from ourself (dragging out) but might revert it back (release on nothing -> goes back) */\r\n  _temporaryRemoved?: boolean;\r\n  /** @internal true if we should remove DOM element on _notify() rather than clearing _id (old way) */\r\n  _removeDOM?: boolean;\r\n  /** @internal */\r\n  _initDD?: boolean;\r\n}\r\n","/**\n * dd-manager.ts 9.3.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\nimport { DDResizable } from './dd-resizable';\n\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n  /** if set (true | in msec), dragging placement (collision) will only happen after a pause by the user*/\n  public static pauseDrag: boolean | number;\n\n  /** true if a mouse down event was handled */\n  public static mouseHandled: boolean;\n\n  /** item being dragged */\n  public static dragElement: DDDraggable;\n\n  /** item we are currently over as drop target */\n  public static dropElement: DDDroppable;\n\n  /** current item we're over for resizing purpose (ignore nested grid resize handles) */\n  public static overResizeElement: DDResizable;\n\n}\n","/**\n * touch.ts 9.3.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\n\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch: boolean = typeof window !== 'undefined' && typeof document !== 'undefined' &&\n( 'ontouchstart' in document\n  || 'ontouchstart' in window\n  // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || ((window as any).DocumentTouch && document instanceof (window as any).DocumentTouch)\n  || navigator.maxTouchPoints > 0\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  || (navigator as any).msMaxTouchPoints > 0\n);\n\n// interface TouchCoord {x: number, y: number};\n\nclass DDTouch {\n  public static touchHandled: boolean;\n  public static pointerLeaveTimeout: number;\n}\n\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e: TouchEvent, simulatedType: string) {\n\n  // Ignore multi-touch events\n  if (e.touches.length > 1) return;\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    touch.screenX,    // screenX\n    touch.screenY,    // screenY\n    touch.clientX,    // clientX\n    touch.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e: PointerEvent, simulatedType: string) {\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    e.screenX,    // screenX\n    e.screenY,    // screenY\n    e.clientX,    // clientX\n    e.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e: TouchEvent): void {\n  // Ignore the event if another widget is already being handled\n  if (DDTouch.touchHandled) return;\n  DDTouch.touchHandled = true;\n\n  // Simulate the mouse events\n  // simulateMouseEvent(e, 'mouseover');\n  // simulateMouseEvent(e, 'mousemove');\n  simulateMouseEvent(e, 'mousedown');\n}\n\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e: TouchEvent): void {\n  // Ignore event if not handled by us\n  if (!DDTouch.touchHandled) return;\n\n  simulateMouseEvent(e, 'mousemove');\n}\n\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e: TouchEvent): void {\n\n  // Ignore event if not handled\n  if (!DDTouch.touchHandled) return;\n\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n  if (DDTouch.pointerLeaveTimeout) {\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\n    delete DDTouch.pointerLeaveTimeout;\n  }\n\n  const wasDragging = !!DDManager.dragElement;\n\n  // Simulate the mouseup event\n  simulateMouseEvent(e, 'mouseup');\n  // simulateMouseEvent(event, 'mouseout');\n\n  // If the touch interaction did not move, it should trigger a click\n  if (!wasDragging) {\n    simulateMouseEvent(e, 'click');\n  }\n\n  // Unset the flag to allow other widgets to inherit the touch event\n  DDTouch.touchHandled = false;\n}\n\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e: PointerEvent): void {\n  // console.log(\"pointer down\")\n  if (e.pointerType === 'mouse') return;\n  (e.target as HTMLElement).releasePointerCapture(e.pointerId) // <- Important!\n}\n\nexport function pointerenter(e: PointerEvent): void {\n  // ignore the initial one we get on pointerdown on ourself\n  if (!DDManager.dragElement) {\n    // console.log('pointerenter ignored');\n    return;\n  }\n  // console.log('pointerenter');\n  if (e.pointerType === 'mouse') return;\n  simulatePointerMouseEvent(e, 'mouseenter');\n}\n\nexport function pointerleave(e: PointerEvent): void {\n  // ignore the leave on ourself we get before releasing the mouse over ourself\n  // by delaying sending the event and having the up event cancel us\n  if (!DDManager.dragElement) {\n    // console.log('pointerleave ignored');\n    return;\n  }\n  if (e.pointerType === 'mouse') return;\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n    delete DDTouch.pointerLeaveTimeout;\n    // console.log('pointerleave delayed');\n    simulatePointerMouseEvent(e, 'mouseleave');\n  }, 10);\n}\n\n","/**\n * dd-resizable-handle.ts 9.3.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  protected el: HTMLElement;\n  /** @internal */\n  protected host: HTMLElement;\n  /** @internal */\n  protected option: DDResizableHandleOpt;\n  /** @internal */\n  protected dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  protected moving = false;\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  protected _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.addEventListener('touchstart', touchstart);\n      this.el.addEventListener('pointerdown', pointerdown);\n      // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.removeEventListener('touchstart', touchstart);\n      this.el.removeEventListener('pointerdown', pointerdown);\n    }\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  protected _mouseDown(e: MouseEvent): void {\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.addEventListener('touchmove', touchmove);\n      this.el.addEventListener('touchend', touchend);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseMove(e: MouseEvent): void {\n    let s = this.mouseDownEvent;\n    if (this.moving) {\n      this._triggerEvent('move', e);\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      // don't start unless we've moved at least 3 pixels\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n      this._triggerEvent('move', e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseUp(e: MouseEvent): void {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.removeEventListener('touchmove', touchmove);\n      this.el.removeEventListener('touchend', touchend);\n    }\n    delete this.moving;\n    delete this.mouseDownEvent;\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-base-impl.ts 9.3.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  protected _disabled: boolean; // initial state to differentiate from false\n  /** @internal */\n  protected _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-resizable.ts 9.3.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDUIData, Rect, Size } from './types';\nimport { DDManager } from './dd-manager';\n\n// import { GridItemHTMLElement } from './types'; let count = 0; // TEST\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  protected handlers: DDResizableHandle[];\n  /** @internal */\n  protected originalRect: Rect;\n  /** @internal */\n  protected temporalRect: Rect;\n  /** @internal */\n  protected scrollY: number;\n  /** @internal */\n  protected scrolled: number;\n  /** @internal */\n  protected scrollEl: HTMLElement;\n  /** @internal */\n  protected startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  protected elOriginStyleVal: string[];\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseOver = this._mouseOver.bind(this);\n    this._mouseOut = this._mouseOut.bind(this);\n    this.enable();\n    this._setupAutoHide(this.option.autoHide);\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.remove('ui-resizable-disabled');\n    this._setupAutoHide(this.option.autoHide);\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this._setupAutoHide(false);\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    this._setupAutoHide(false);\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide(this.option.autoHide);\n    }\n    return this;\n  }\n\n  /** @internal turns auto hide on/off */\n  protected _setupAutoHide(auto: boolean): DDResizable {\n    if (auto) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover and not mouseenter to get better performance and track for nested cases\n      this.el.addEventListener('mouseover', this._mouseOver);\n      this.el.addEventListener('mouseout', this._mouseOut);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._mouseOver);\n      this.el.removeEventListener('mouseout', this._mouseOut);\n      if (DDManager.overResizeElement === this) {\n        delete DDManager.overResizeElement;\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOver(e: Event): void {\n    // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\n    if (DDManager.overResizeElement || DDManager.dragElement) return;\n    DDManager.overResizeElement = this;\n    // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _mouseOut(e: Event): void {\n    // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    if (DDManager.overResizeElement !== this) return;\n    delete DDManager.overResizeElement;\n    // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.scrolled = 0;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStop(event: MouseEvent): DDResizable {\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  protected _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = 'absolute';\n    this.el.style.opacity = '0.8';\n    return this;\n  }\n\n  /** @internal */\n  protected _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  protected _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const containerElement = Utils.getPositionContainerElement(this.el.parentElement);\n    const containerRect = containerElement.getBoundingClientRect();\n\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left - containerRect.left,\n      top: this.originalRect.top - this.scrolled - containerRect.top\n    };\n\n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  protected _constrainSize(oWidth: number, oHeight: number): Size {\n    const { scaleX, scaleY } = Utils.getScaleForElement(this.el);\n    const o = this.option;\n    const maxWidth = o.maxWidth ? o.maxWidth * scaleX : Number.MAX_SAFE_INTEGER;\n    const minWidth = o.minWidth ? o.minWidth * scaleX : oWidth;\n    const maxHeight = o.maxHeight ? o.maxHeight * scaleY : Number.MAX_SAFE_INTEGER;\n    const minHeight = o.minHeight ? o.minHeight * scaleY : oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  protected _applyChange(): DDResizable {\n    if (!this.temporalRect) return this;\n    const { scaleX, scaleY } = Utils.getScaleForElement(this.el);\n    this.el.style.width = `${Math.round(this.temporalRect.width / scaleX)}px`;\n    this.el.style.height = `${Math.round(this.temporalRect.height / scaleY)}px`;\n    this.el.style.top = `${Math.round(this.temporalRect.top / scaleY)}px`;\n    this.el.style.left = `${Math.round(this.temporalRect.left / scaleX)}px`;\n    return this;\n  }\n\n  /** @internal */\n  protected _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  protected _ui = (): DDUIData => {\n    const { scaleX, scaleY } = Utils.getScaleForElement(this.el);\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: (this.originalRect.height + this.scrolled),\n      left: this.originalRect.left,\n      top: (this.originalRect.top - this.scrolled)\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left / scaleX,\n        top: rect.top / scaleY,\n      },\n      size: {\n        width: rect.width / scaleX,\n        height: rect.height / scaleY,\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * dd-draggable.ts 9.3.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { Utils } from './utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from './types';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  handle?: string;\n  helper?: 'clone' | HTMLElement | ((event: Event) => HTMLElement);\n  cancel?: string;\n  // containment?: string | HTMLElement; // TODO: not implemented yet\n  // revert?: string | boolean | unknown; // TODO: not implemented yet\n  // scroll?: boolean;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ntype DDDragEvent = 'drag' | 'dragstart' | 'dragstop';\n\n// make sure we are not clicking on known object that handles mouseDown\nconst skipMouseDown = 'input,textarea,button,select,option,[contenteditable=\"true\"],.ui-resizable-handle';\n\n// let count = 0; // TEST\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected dragElementOriginStyle: Array<string>;\n  /** @internal */\n  protected dragEl: HTMLElement;\n  /** @internal true while we are dragging an item around */\n  protected dragging: boolean;\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected helperContainment: HTMLElement;\n  /** @internal properties we change during dragging, and restore back */\n  protected static originStyleProp = ['transition', 'pointerEvents', 'position', 'left', 'top', 'minWidth', 'willChange'];\n  /** @internal pause before we call the actual drag hit collision code */\n  protected dragTimeout: number;\n  protected origRelativeMouse: { x: number; y: number; };\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n\n    // get the element that is actually supposed to be dragged by\n    let handleName = option.handle.substring(1);\n    this.dragEl = el.classList.contains(handleName) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n    this.enable();\n  }\n\n  public on(event: DDDragEvent, callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: DDDragEvent): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.dragEl.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchstart', touchstart);\n      this.dragEl.addEventListener('pointerdown', pointerdown);\n      // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    this.el.classList.remove('ui-draggable-disabled');\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.dragEl.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchstart', touchstart);\n      this.dragEl.removeEventListener('pointerdown', pointerdown);\n    }\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n    delete this.dragTimeout;\n    if (this.dragging) this._mouseUp(this.mouseDownEvent);\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal call when mouse goes down before a dragstart happens */\n  protected _mouseDown(e: MouseEvent): boolean {\n    // don't let more than one widget handle mouseStart\n    if (DDManager.mouseHandled) return;\n    if (e.button !== 0) return true; // only left click\n\n    // make sure we are not clicking on known object that handles mouseDown, or ones supplied by the user\n    if ((e.target as HTMLElement).closest(skipMouseDown)) return true;\n    if (this.option.cancel) {\n      if ((e.target as HTMLElement).closest(this.option.cancel)) return true;\n    }\n\n    // REMOVE: why would we get the event if it wasn't for us or child ?\n    // make sure we are clicking on a drag handle or child of it...\n    // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\n    // let className = this.option.handle.substring(1);\n    // let el = e.target as HTMLElement;\n    // while (el && !el.classList.contains(className)) { el = el.parentElement; }\n    // if (!el) return;\n\n    this.mouseDownEvent = e;\n    delete this.dragging;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n    document.addEventListener('mousemove', this._mouseMove, true); // true=capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchmove', touchmove);\n      this.dragEl.addEventListener('touchend', touchend);\n    }\n\n    e.preventDefault();\n    // preventDefault() prevents blur event which occurs just after mousedown event.\n    // if an editable content has focus, then blur must be call\n    if (document.activeElement) (document.activeElement as HTMLElement).blur();\n\n    DDManager.mouseHandled = true;\n    return true;\n  }\n\n  /** @internal method to call actual drag event */\n  protected _callDrag(e: DragEvent): void {\n    if (!this.dragging) return;\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\n  protected _mouseMove(e: DragEvent): boolean {\n    // console.log(`${count++} move ${e.x},${e.y}`)\n    let s = this.mouseDownEvent;\n\n    if (this.dragging) {\n      this._dragFollow(e);\n      // delay actual grid handling drag until we pause for a while if set\n      if (DDManager.pauseDrag) {\n        const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag as number : 100;\n        if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n        this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);\n      } else {\n        this._callDrag(e);\n      }\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n      /**\n       * don't start unless we've moved at least 3 pixels\n       */\n      this.dragging = true;\n      DDManager.dragElement = this;\n      // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n      let grid = (this.el as GridItemHTMLElement).gridstackNode?.grid;\n      if (grid) {\n        DDManager.dropElement = (grid.el as DDElementHost).ddElement.ddDroppable;\n      } else {\n        delete DDManager.dropElement;\n      }\n      const rect = this.el.getBoundingClientRect();\n      this.origRelativeMouse = { x: s.clientX - rect.left, y: s.clientY - rect.top };\n      this.helper = this._createHelper(e);\n      this._setupHelperContainmentStyle();\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstart' });\n\n      this._setupHelperStyle(e);\n      if (this.option.start) {\n        this.option.start(ev, this.ui());\n      }\n      this.triggerEvent('dragstart', ev);\n    }\n    e.preventDefault(); // needed otherwise we get text sweep text selection as we drag around\n    return true;\n  }\n\n  /** @internal call when the mouse gets released to drop the item at current location */\n  protected _mouseUp(e: MouseEvent): void {\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchmove', touchmove, true);\n      this.dragEl.removeEventListener('touchend', touchend, true);\n    }\n    if (this.dragging) {\n      delete this.dragging;\n\n      // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n      if (DDManager.dropElement?.el === this.el.parentElement) {\n        delete DDManager.dropElement;\n      }\n\n      this.helperContainment.style.position = this.parentOriginStylePosition || null;\n      if (this.helper === this.el) {\n        this._removeHelperStyle();\n      } else {\n        this.helper.remove();\n      }\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstop' });\n      if (this.option.stop) {\n        this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n      }\n      this.triggerEvent('dragstop', ev);\n\n      // call the droppable method to receive the item\n      if (DDManager.dropElement) {\n        DDManager.dropElement.drop(e);\n      }\n    }\n    delete this.helper;\n    delete this.mouseDownEvent;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    delete DDManager.mouseHandled;\n    e.preventDefault();\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  protected _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = Utils.cloneNode(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentElement : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal set the fix position of the dragged item */\n  protected _setupHelperStyle(e: DragEvent): DDDraggable {\n    this.helper.classList.add('ui-draggable-dragging');\n    // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n    const style = this.helper.style;\n    style.pointerEvents = 'none'; // needed for over items to get enter/leave\n    // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\n    style.width = this.el.offsetWidth + 'px';\n    style.height = this.el.offsetHeight + 'px';\n\n    style.willChange = 'left, top';\n    style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n    this._dragFollow(e); // now position it\n    style.transition = 'none'; // show up instantly\n    setTimeout(() => {\n      if (this.helper) {\n        style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal restore back the original style before dragging */\n  protected _removeHelperStyle(): DDDraggable {\n    this.helper.classList.remove('ui-draggable-dragging');\n    let node = (this.helper as GridItemHTMLElement)?.gridstackNode;\n    // don't bother restoring styles if we're gonna remove anyway...\n    if (!node?._isAboutToRemove && this.dragElementOriginStyle) {\n      let helper = this.helper;\n      // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'.\n      // TODO: this also removes resizing animation which doesn't have this issue, but others.\n      // Ideally both would animate ('move' would immediately restore 'absolute' and adjust coordinate to match,\n      // then trigger a delay (repaint) to restore to final dest with animate) but then we need to make sure 'resizestop'\n      // is called AFTER 'transitionend' event is received (see https://github.com/gridstack/gridstack.js/issues/2033)\n      let transition = this.dragElementOriginStyle['transition'] || null;\n      helper.style.transition = this.dragElementOriginStyle['transition'] = 'none'; // can't be NULL #1973\n      DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n      setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal updates the top/left position to follow the mouse */\n  protected _dragFollow(e: DragEvent): void {\n    const style = this.helper.style;\n    const { scaleX, scaleY } = Utils.getScaleForElement(this.helper);\n    const transformParent = Utils.getContainerForPositionFixedElement(this.helper);\n    const transformParentRect = transformParent.getBoundingClientRect();\n    // when an element is scaled, the helper is positioned relative to the first transformed parent, so we need to remove the extra offset\n    const offsetX = transformParentRect.left;\n    const offsetY = transformParentRect.top;\n\n    // Position the element under the mouse\n    const x = (e.clientX - offsetX - (this.origRelativeMouse?.x || 0)) / scaleX;\n    const y = (e.clientY - offsetY - (this.origRelativeMouse?.y || 0)) / scaleY;\n    style.left = `${x}px`;\n    style.top = `${y}px`;\n  }\n\n  /** @internal */\n  protected _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.helper.style.position !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui(): DDUIData {\n    const containmentEl = this.el.parentElement;\n    const scrollElement = Utils.getScrollElement(this.el.parentElement);\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    const { scaleX, scaleY } = Utils.getScaleForElement(this.helper);\n\n    // When an element is inside a scrolled element, the boundingClientRect will return the position of the element minus the scroll.\n    const parentPositionIncludingScroll = containmentEl === scrollElement\n      ? { top: containmentRect.top + scrollElement.scrollTop, left: containmentRect.left + scrollElement.scrollLeft }\n      : { top: containmentRect.top, left: containmentRect.left };\n\n    return {\n      position: { // Current CSS position of the helper as { top, left } object\n        top: (offset.top - parentPositionIncludingScroll.top) / scaleY,\n        left: (offset.left - parentPositionIncludingScroll.left) / scaleX,\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n","/**\n * dd-droppable.ts 9.3.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\nimport { DDUIData } from './types';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui: DDUIData) => void;\n  over?: (event: DragEvent, ui: DDUIData) => void;\n  out?: (event: DragEvent, ui: DDUIData) => void;\n}\n\n// let count = 0; // TEST\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this.enable();\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.el.classList.add('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('mouseenter', this._mouseEnter);\n    this.el.addEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.addEventListener('pointerenter', pointerenter);\n      this.el.addEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.el.classList.remove('ui-droppable');\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.removeEventListener('pointerenter', pointerenter);\n      this.el.removeEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public destroy(): void {\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  protected _mouseEnter(e: MouseEvent): void {\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement) return;\n    if (!this._canDrop(DDManager.dragElement.el)) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n    if (DDManager.dropElement && DDManager.dropElement !== this) {\n      DDManager.dropElement._mouseLeave(e as DragEvent);\n    }\n    DDManager.dropElement = this;\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.classList.add('ui-droppable-over');\n    // console.log('tracking'); // TEST\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  protected _mouseLeave(e: MouseEvent): void {\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement || DDManager.dropElement !== this) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropout' });\n    if (this.option.out) {\n      this.option.out(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropout', ev);\n\n    if (DDManager.dropElement === this) {\n      delete DDManager.dropElement;\n      // console.log('not tracking'); // TEST\n\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n      let parentDrop: DDDroppable;\n      let parent: DDElementHost = this.el.parentElement;\n      while (!parentDrop && parent) {\n        parentDrop = parent.ddElement?.ddDroppable;\n        parent = parent.parentElement;\n      }\n      if (parentDrop) {\n        parentDrop._mouseEnter(e);\n      }\n    }\n  }\n\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n  public drop(e: MouseEvent): void {\n    e.preventDefault();\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n  }\n\n  /** @internal true if element matches the string/method accept option */\n  protected _canDrop(el: HTMLElement): boolean {\n    return el && (!this.accept || this.accept(el));\n  }\n\n  /** @internal */\n  protected _setupAccept(): DDDroppable {\n    if (!this.option.accept) return this;\n    if (typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => el.classList.contains(this.option.accept as string) || el.matches(this.option.accept as string);\n    } else {\n      this.accept = this.option.accept;\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _ui(drag: DDDraggable): DDUIData {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 9.3.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/*!\r\n * GridStack 9.3.0\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData, obsolete } from './utils';\r\nimport { gridDefaults, ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition, GridStackOptions,\r\n  dragInDefaultOptions, GridStackEventHandler, GridStackNodesHandler, AddRemoveFcn, SaveFcn, CompactOptions, GridStackMoveOpts, ResizeToContentFcn } from './types';\r\n\r\n/*\r\n * and include D&D by default\r\n * TODO: while we could generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\r\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\r\n * also it caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n */\r\nimport { DDGridStack } from './dd-gridstack';\r\nimport { isTouch } from './dd-touch';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElementHost } from './dd-element';\r\n/** global instance */\r\nconst dd = new DDGridStack;\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\nexport * from './dd-gridstack';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | 'resizecontent' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _max?: number; // internal tracker of the max # of rows we created\r\n}\r\n\r\n// extend with internal fields we need - TODO: move other items in here\r\ninterface InternalGridStackOptions extends GridStackOptions {\r\n  _alwaysShowResizeHandle?: true | false | 'mobile'; // so we can restore for save\r\n}\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    let el = parent as GridHTMLElement;\r\n    if (el.gridstack) {\r\n      // already a grid - set option and load data\r\n      const grid = el.gridstack;\r\n      if (opt) grid.opts = {...grid.opts, ...opt};\r\n      if (opt.children !== undefined) grid.load(opt.children);\r\n      return grid;\r\n    }\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    const parentIsGrid = parent.classList.contains('grid-stack');\r\n    if (!parentIsGrid || GridStack.addRemoveCB) {\r\n      if (GridStack.addRemoveCB) {\r\n        el = GridStack.addRemoveCB(parent, opt, true, true);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n        parent.appendChild(el);\r\n      }\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine): void {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /**\r\n   * callback method use when new items|grids needs to be created or deleted, instead of the default\r\n   * item: <div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">w.content</div></div>\r\n   * grid: <div class=\"grid-stack\">grid content...</div>\r\n   * add = true: the returned DOM element will then be converted to a GridItemHTMLElement using makeWidget()|GridStack:init().\r\n   * add = false: the item will be removed from DOM (if not already done)\r\n   * grid = true|false for grid vs grid-items\r\n   */\r\n  public static addRemoveCB?: AddRemoveFcn;\r\n\r\n  /**\r\n   * callback during saving to application can inject extra data for each widget, on top of the grid layout properties\r\n   */\r\n  public static saveCB?: SaveFcn;\r\n\r\n  /** callback to use for resizeToContent instead of the built in one */\r\n  public static resizeToContentCB?: ResizeToContentFcn;\r\n  /** parent class for sizing content. defaults to '.grid-stack-item-content' */\r\n  public static resizeToContentParent = '.grid-stack-item-content';\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** point to a parent grid item if we're nested (inside a grid-item in between 2 Grids) */\r\n  public parentGridItem?: GridStackNode;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n  protected resizeObserver: ResizeObserver;\r\n\r\n  /** @internal unique class name for our generated CSS style sheet */\r\n  protected _styleSheetClass?: string;\r\n  /** @internal true if we got created by drag over gesture, so we can removed on drag out (temporary) */\r\n  public _isTemp?: boolean;\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal */\r\n  protected _prevColumn: number;\r\n  /** @internal prevent cached layouts from being updated when loading into small column layouts */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _sizeThrottle: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected prevWidth: number;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  protected _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n  private _skipInitialResize: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    if (!el.classList.contains('grid-stack')) {\r\n      this.el.classList.add('grid-stack');\r\n    }\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // save original setting so we can restore on save\r\n    if (opts.alwaysShowResizeHandle !== undefined) {\r\n      (opts as InternalGridStackOptions)._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\r\n    }\r\n\r\n    // elements DOM attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(gridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || gridDefaults.column,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || gridDefaults.minRow,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || gridDefaults.maxRow,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || gridDefaults.staticGrid,\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || gridDefaults.draggable.handle,\r\n      },\r\n      removableOptions: {\r\n        accept: opts.itemClass || gridDefaults.removableOptions.accept,\r\n        decline: gridDefaults.removableOptions.decline\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\r\n      this._prevColumn = this.getColumn();\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    const grandParent: GridItemHTMLElement = this.el.parentElement?.parentElement;\r\n    let parentGridItem = grandParent?.classList.contains(gridDefaults.itemClass) ? grandParent.gridstackNode : undefined;\r\n    if (parentGridItem) {\r\n      parentGridItem.subGrid = this;\r\n      this.parentGridItem = parentGridItem;\r\n      this.el.classList.add('grid-stack-nested');\r\n      parentGridItem.el.classList.add('grid-stack-sub-grid');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    // see if we need to adjust auto-hide\r\n    if (this.opts.alwaysShowResizeHandle === 'mobile') {\r\n      this.opts.alwaysShowResizeHandle = isTouch;\r\n    }\r\n\r\n    this._styleSheetClass = 'gs-id-' + GridStackEngine._idSeq++;\r\n    this.el.classList.add(this._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      this.getGridItems().forEach(el => this._prepareElement(el));\r\n      this.batchUpdate(false);\r\n    }\r\n\r\n    // load any passed in children as well, which overrides any DOM layout done above\r\n    if (this.opts.children) {\r\n      let children = this.opts.children;\r\n      delete this.opts.children;\r\n      if (children.length) this.load(children); // don't load empty\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    this.el.classList.add('gs-' + this.opts.column);\r\n\r\n    // dynamic grids require pausing during drag to detect over to nest vs push\r\n    if (this.opts.subGridDynamic && !DDManager.pauseDrag) DDManager.pauseDrag = true;\r\n    if (this.opts.draggable?.pause !== undefined) DDManager.pauseDrag = this.opts.draggable.pause;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    function isGridStackWidget(w: GridStackNode): w is GridStackNode { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.el !== undefined || w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: GridItemHTMLElement;\r\n    let node: GridStackNode;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      node = options = els;\r\n      if (node?.el) {\r\n        el = node.el; // re-use element stored in the node\r\n      } else if (GridStack.addRemoveCB) {\r\n        el = GridStack.addRemoveCB(this.el, options, true, false);\r\n      } else {\r\n        let content = options?.content || '';\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n        el = doc.body.children[0] as HTMLElement;\r\n      }\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    if (!el) return;\r\n\r\n    // if the caller ended up initializing the widget in addRemoveCB, or we stared with one already, skip the rest\r\n    node = el.gridstackNode;\r\n    if (node && el.parentElement === this.el && this.engine.nodes.find(n => n._id === node._id)) return el;\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz') before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    this.makeWidget(el, options);\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\r\n   * from the parent's subGrid options.\r\n   * @param el gridItem element to convert\r\n   * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\r\n   * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\r\n   * @returns newly created grid\r\n   */\r\n  public makeSubGrid(el: GridItemHTMLElement, ops?: GridStackOptions, nodeToAdd?: GridStackNode, saveContent = true): GridStack {\r\n    let node = el.gridstackNode;\r\n    if (!node) {\r\n      node = this.makeWidget(el).gridstackNode;\r\n    }\r\n    if (node.subGrid?.el) return node.subGrid; // already done\r\n\r\n    // find the template subGrid stored on a parent as fallback...\r\n    let subGridTemplate: GridStackOptions; // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n    let grid: GridStack = this;\r\n    while (grid && !subGridTemplate) {\r\n      subGridTemplate = grid.opts?.subGridOpts;\r\n      grid = grid.parentGridItem?.grid;\r\n    }\r\n    //... and set the create options\r\n    ops = Utils.cloneDeep({...(subGridTemplate || {}), children: undefined, ...(ops || node.subGridOpts)});\r\n    node.subGridOpts = ops;\r\n\r\n    // if column special case it set, remember that flag and set default\r\n    let autoColumn: boolean;\r\n    if (ops.column === 'auto') {\r\n      autoColumn = true;\r\n      ops.column = Math.max(node.w || 1, nodeToAdd?.w || 1);\r\n      ops.disableOneColumnMode = true; // driven by parent\r\n    }\r\n\r\n    // if we're converting an existing full item, move over the content to be the first sub item in the new grid\r\n    let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n    let newItem: HTMLElement;\r\n    let newItemOpt: GridStackNode;\r\n    if (saveContent) {\r\n      this._removeDD(node.el); // remove D&D since it's set on content div\r\n      newItemOpt = {...node, x:0, y:0};\r\n      Utils.removeInternalForSave(newItemOpt);\r\n      delete newItemOpt.subGridOpts;\r\n      if (node.content) {\r\n        newItemOpt.content = node.content;\r\n        delete node.content;\r\n      }\r\n      if (GridStack.addRemoveCB) {\r\n        newItem = GridStack.addRemoveCB(this.el, newItemOpt, true, false);\r\n      } else {\r\n        let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item\"></div>`;\r\n        newItem = doc.body.children[0] as HTMLElement;\r\n        newItem.appendChild(content);\r\n        doc.body.innerHTML = `<div class=\"grid-stack-item-content\"></div>`;\r\n        content = doc.body.children[0] as HTMLElement;\r\n        node.el.appendChild(content);\r\n      }\r\n      this._prepareDragDropByNode(node); // ... and restore original D&D\r\n    }\r\n\r\n    // if we're adding an additional item, make the container large enough to have them both\r\n    if (nodeToAdd) {\r\n      let w = autoColumn ? ops.column : node.w;\r\n      let h = node.h + nodeToAdd.h;\r\n      let style = node.el.style;\r\n      style.transition = 'none'; // show up instantly so we don't see scrollbar with nodeToAdd\r\n      this.update(node.el, {w, h});\r\n      setTimeout(() =>  style.transition = null); // recover animation\r\n    }\r\n\r\n    let subGrid = node.subGrid = GridStack.addGrid(content, ops);\r\n    if (nodeToAdd?._moving) subGrid._isTemp = true; // prevent re-nesting as we add over\r\n    if (autoColumn) subGrid._autoColumn = true;\r\n\r\n    // add the original content back as a child of hte newly created grid\r\n    if (saveContent) {\r\n      subGrid.addWidget(newItem, newItemOpt);\r\n    }\r\n\r\n    // now add any additional node\r\n    if (nodeToAdd) {\r\n      if (nodeToAdd._moving) {\r\n        // create an artificial event even for the just created grid to receive this item\r\n        window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, 'mouseenter', subGrid.el), 0);\r\n      } else {\r\n        subGrid.addWidget(node.el, node);\r\n      }\r\n    }\r\n    return subGrid;\r\n  }\r\n\r\n  /**\r\n   * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\r\n   * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\r\n   */\r\n  public removeAsSubGrid(nodeThatRemoved?: GridStackNode): void {\r\n    let pGrid = this.parentGridItem?.grid;\r\n    if (!pGrid) return;\r\n\r\n    pGrid.batchUpdate();\r\n    pGrid.removeWidget(this.parentGridItem.el, true, true);\r\n    this.engine.nodes.forEach(n => {\r\n      // migrate any children over and offsetting by our location\r\n      n.x += this.parentGridItem.x;\r\n      n.y += this.parentGridItem.y;\r\n      pGrid.addWidget(n.el, n);\r\n    });\r\n    pGrid.batchUpdate(false);\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n\r\n    // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\r\n    if (nodeThatRemoved) {\r\n      window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, 'mouseenter', pGrid.el), 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @param saveCB callback for each node -> widget, so application can insert additional data to be saved into the widget data structure.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false, saveCB = GridStack.saveCB): GridStackWidget[] | GridStackOptions {\r\n    // return copied GridStackWidget (with optionally .el) we can modify at will...\r\n    let list = this.engine.save(saveContent, saveCB);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid && !saveCB) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent && !saveCB) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid?.el) {\r\n          const listOrOpt = n.subGrid.save(saveContent, saveGridOpt, saveCB);\r\n          n.subGridOpts = (saveGridOpt ? listOrOpt : {children: listOrOpt}) as GridStackOptions;\r\n          delete n.subGrid;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: InternalGridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n        delete o.disableOneColumnMode;\r\n      }\r\n      const origShow = o._alwaysShowResizeHandle;\r\n      delete o._alwaysShowResizeHandle;\r\n      if (origShow !== undefined) {\r\n        o.alwaysShowResizeHandle = origShow;\r\n      } else {\r\n        delete o.alwaysShowResizeHandle;\r\n      }\r\n      Utils.removeInternalAndSame(o, gridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   */\r\n  public load(layout: GridStackWidget[], addRemove: boolean | AddRemoveFcn = GridStack.addRemoveCB || true): GridStack {\r\n    // if passed list has coordinates, use them (insert from end to beginning for conflict resolution) else force widget same order\r\n    const haveCoord = layout.some(w => w.x !== undefined || w.y !== undefined);\r\n    let items = haveCoord ? Utils.sort(layout, -1, this._prevColumn || this.getColumn()) : layout;\r\n    this._insertNotAppend = haveCoord; // if we create in reverse order...\r\n\r\n    // if we're loading a layout into for example 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => ((n.x || 0) + n.w) > (this.opts.column as number))) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    // if given a different callback, temporally set it as global option so creating will use it\r\n    const prevCB = GridStack.addRemoveCB;\r\n    if (typeof(addRemove) === 'function') GridStack.addRemoveCB = addRemove as AddRemoveFcn;\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (GridStack.addRemoveCB)\r\n            GridStack.addRemoveCB(this.el, n, false, false);\r\n          removed.push(n); // batch keep track\r\n          this.removeWidget(n.el, true, false);\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets - starting with an empty list to reduce collision and add no-coord ones at next available spot\r\n    let copyNodes = this.engine.nodes;\r\n    this.engine.nodes = [];\r\n    items.forEach(w => {\r\n      let item = (w.id !== undefined) ? copyNodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        // check if missing coord, in which case find next empty slot with new (or old if missing) sizes\r\n        if (w.autoPosition || w.x === undefined || w.y === undefined) {\r\n          w.w = w.w || item.w;\r\n          w.h = w.h || item.h;\r\n          this.engine.findEmptyPosition(w);\r\n        }\r\n        this.engine.nodes.push(item); // now back to current list...\r\n        this.update(item.el, w);\r\n        if (w.subGridOpts?.children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load(w.subGridOpts.children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addRemove) {\r\n        this.addWidget(w);\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.batchUpdate(false);\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    prevCB ? GridStack.addRemoveCB = prevCB : delete GridStack.addRemoveCB;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\r\n   * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\r\n   */\r\n  public batchUpdate(flag = true): GridStack {\r\n    this.engine.batchUpdate(flag);\r\n    if (!flag) {\r\n      this._updateContainerHeight();\r\n      this._triggerRemoveEvent();\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      let height = Utils.toNumber(el.getAttribute('gs-h')) || 1; // since we don't write 1 anymore\r\n      return Math.round(el.offsetHeight / height);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    this.doContentResize(false, true); // no anim wait, but use attributes since we only change row height\r\n\r\n    if (update) {\r\n      this._updateStyles(true); // true = force re-create for current # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  protected _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /**\r\n   * re-layout grid items to reclaim any empty space. Options are:\r\n   * 'list' keep the widget left->right order the same, even if that means leaving an empty slot if things don't fit\r\n   * 'compact' might re-order items to fill any empty space\r\n   * \r\n   * doSort - 'false' to let you do your own sorting ahead in case you need to control a different order. (default to sort)\r\n   */\r\n  public compact(layout: CompactOptions = 'compact', doSort = true): GridStack {\r\n    this.engine.compact(layout, doSort);\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default ('moveScale'). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (!column || column < 1 || this.opts.column === column) return this;\r\n    let oldColumn = this.getColumn();\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('gs-' + oldColumn);\r\n    this.el.classList.add('gs-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.columnChanged(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    this.doContentResize();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column as number;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this.offAll();\r\n    this._updateResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this._styleSheetClass);\r\n      this.el.removeAttribute('gs-current-row');\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    if (this.parentGridItem) delete this.parentGridItem.subGrid;\r\n    delete this.parentGridItem;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    if (this.opts.float !== val) {\r\n      this.opts.float = this.engine.float = val;\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.getColumn());\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand (or have some framework creating DOM), you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   * @param options widget definition to use instead of reading attributes or using default sizing values\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"1\" gs-w=\"3\"></div>');\r\n   * grid.el.appendChild('<div id=\"2\"></div>');\r\n   * grid.makeWidget('1');\r\n   * grid.makeWidget('2', {w:2, content: 'hello'});\r\n   */\r\n  public makeWidget(els: GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true, options);\r\n    const node = el.gridstackNode;\r\n\r\n    this._updateContainerHeight();\r\n\r\n    this.doContentResize(false, false, node);\r\n\r\n    // see if there is a sub-grid to create\r\n    if (node.subGridOpts) {\r\n      this.makeSubGrid(el, node.subGridOpts, undefined, false); // node.subGrid will be used as option in method, no need to pass\r\n    }\r\n\r\n    // if we're adding an item into 1 column (_prevColumn is set only when going to 1) make sure\r\n    // we don't override the larger 12 column layout that was already saved. #1985\r\n    if (this._prevColumn && this.opts.column === 1) {\r\n      this._ignoreLayoutsNodeChange = true;\r\n    }\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => (callback as GridStackEventHandler)(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => (callback as GridStackNodesHandler)(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize'\r\n      || name === 'resizestop' || name === 'dropped' || name === 'resizecontent') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /** remove all event handlers */\r\n  public offAll(): GridStack {\r\n    Object.keys(this._gsEventHandler).forEach(key => this.off(key));\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement && el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      if (GridStack.addRemoveCB) {\r\n        GridStack.addRemoveCB(this.el, node, false, false);\r\n      }\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      this._removeDD(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      this._removeDD(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   * @param updateClass true (default) if css class gets updated\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public setStatic(val: boolean, updateClass = true, recurse = true): GridStack {\r\n    if (!!this.opts.staticGrid === val) return this;\r\n    val ? this.opts.staticGrid = true : delete this.opts.staticGrid;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n); // either delete or init Drag&drop\r\n      if (n.subGrid && recurse) n.subGrid.setStatic(val, updateClass, recurse);\r\n    });\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el?.gridstackNode;\r\n      if (!n) return;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content !== undefined) {\r\n        const itemContent = el.querySelector('.grid-stack-item-content');\r\n        if (!itemContent || itemContent.innerHTML === w.content) return;\r\n        itemContent.innerHTML = w.content;\r\n        // restore any sub-grid back\r\n        if (n.subGrid?.el) {\r\n          itemContent.appendChild(n.subGrid.el);\r\n          if (!n.subGrid.opts.styleInHead) n.subGrid._updateStyles(true); // force create\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n      Utils.sanitizeMinMax(n);\r\n\r\n      // finally move the widget\r\n      if (m) this.moveNode(n, m);\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  private moveNode(n: GridStackNode, m: GridStackMoveOpts) {\r\n    this.engine.cleanNodes()\r\n      .beginUpdate(n)\r\n      .moveNode(n, m);\r\n    this._updateContainerHeight();\r\n    this._triggerChangeEvent();\r\n    this.engine.endUpdate();\r\n  }\r\n\r\n  /** \r\n   * Updates widget height to match the content height to avoid v-scrollbar or dead space.\r\n   * Note: this assumes only 1 child under resizeToContentParent='.grid-stack-item-content' (sized to gridItem minus padding) that is at the entire content size wanted.\r\n   * useAttrSize set to true if GridStackNode.h should be used instead of actual container height when we don't need to wait for animation to finish to get actual DOM heights\r\n   */\r\n  public resizeToContent(el: GridItemHTMLElement, useAttrSize = false) {\r\n    if (!el) return;\r\n    el.classList.remove('size-to-content-max');\r\n    if (!el.clientHeight) return; // 0 when hidden, skip\r\n    let n = el.gridstackNode;\r\n    if (!n) return;\r\n    const grid = n.grid;\r\n    if (!grid) return;\r\n    if (el.parentElement !== grid.el) return; // skip if we are not inside a grid\r\n    const cell = grid.getCellHeight();\r\n    if (!cell) return;\r\n    let height = useAttrSize && n.h ? n.h * cell : el.clientHeight; // getBoundingClientRect().height seem to flicker back and forth\r\n    let item: Element;\r\n    if (n.resizeToContentParent) item = el.querySelector(n.resizeToContentParent);\r\n    if (!item) item = el.querySelector(GridStack.resizeToContentParent);\r\n    if (!item) return;\r\n    const padding = el.clientHeight - item.clientHeight; // full - available height to our child (minus border, padding...)\r\n    const itemH = useAttrSize && n.h ? n.h * cell - padding : item.clientHeight; // calculated to what cellHeight is or will become (rather than actual to prevent waiting for animation to finish)\r\n    let wantedH: number;\r\n    if (n.subGrid) {\r\n      // sub-grid - use their actual row count * their cell height\r\n      wantedH = n.subGrid.getRow() * n.subGrid.getCellHeight();\r\n    } else {\r\n      // NOTE: clientHeight & getBoundingClientRect() is undefined for text and other leaf nodes. use <div> container!\r\n      const child = item.firstElementChild;\r\n      if (!child) { console.log(`Error: resizeToContent() '${GridStack.resizeToContentParent}'.firstElementChild is null, make sure to have a div like container. Skipping sizing.`); return; }  \r\n      wantedH = child.getBoundingClientRect().height || itemH;\r\n    }\r\n    if (itemH === wantedH) return;\r\n    height += wantedH - itemH;\r\n    let h = Math.ceil(height / cell);\r\n    // check for min/max and special sizing\r\n    const softMax = Number.isInteger(n.sizeToContent) ? n.sizeToContent as number : 0;\r\n    if (softMax && h > softMax) {\r\n      h = softMax;\r\n      el.classList.add('size-to-content-max');  // get v-scroll back\r\n    }\r\n    if (n.minH && h < n.minH) h = n.minH;\r\n    else if (n.maxH && h > n.maxH) h = n.maxH;\r\n    if (h !== n.h) {\r\n      grid._ignoreLayoutsNodeChange = true;\r\n      grid.moveNode(n, {h});\r\n      delete grid._ignoreLayoutsNodeChange;\r\n    }\r\n  }\r\n\r\n  /** call the user resize (so they can do extra work) else our build in version */\r\n  protected resizeToContentCheck(el: GridItemHTMLElement, useAttr = false) {\r\n    if (GridStack.resizeToContentCB) GridStack.resizeToContentCB(el, useAttr);\r\n    else this.resizeToContent(el, useAttr);\r\n  }\r\n  \r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes?.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes?.length) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(type: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(type, {bubbles: false, detail: data}) : new Event(type);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styleSheetClass);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    if (!maxH) maxH = this.getRow();\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(this._styleSheetClass, styleLocation, {\r\n        nonce: this.opts.nonce,\r\n      });\r\n      if (!this._styles) return this;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i}\"]`, `top: ${getHeight(i)}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i+1}\"]`, `height: ${getHeight(i+1)}`); // start at 2\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    const parent = this.parentGridItem;\r\n    let row = this.getRow() + this._extraDragRow; // this checks for minRow already\r\n    const cellHeight = this.opts.cellHeight as number;\r\n    const unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n\r\n    // check for css min height (non nested grid). TODO: support mismatch, say: min % while unit is px.\r\n    if (!parent) {\r\n      const cssMinHeight = Utils.parseHeight(getComputedStyle(this.el)['minHeight']);\r\n      if (cssMinHeight.h > 0 && cssMinHeight.unit === unit) {\r\n        const minRow = Math.floor(cssMinHeight.h / cellHeight);\r\n        if (row < minRow) {\r\n          row = minRow;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    this.el.style.removeProperty('min-height');\r\n    this.el.style.removeProperty('height');\r\n    if (row) {\r\n      // nested grids have 'insert:0' to fill the space of parent by default, but we may be taller so use min-height for possible scrollbars\r\n      this.el.style[parent ? 'minHeight' : 'height'] = row * cellHeight + unit;\r\n    }\r\n\r\n    // if we're a nested grid inside an sizeToContent item, tell it to resize itself too\r\n    if (parent && !parent.grid.engine.batchMode && Utils.shouldSizeToContent(parent)) {\r\n      parent.grid.resizeToContentCheck(parent.el);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    el.classList.add(this.opts.itemClass);\r\n    node = node || this._readAttr(el);\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    if (Utils.shouldSizeToContent(node)) el.classList.add('size-to-content');\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    n.w > 1 ? el.setAttribute('gs-w', String(n.w)) : el.removeAttribute('gs-w');\r\n    n.h > 1 ? el.setAttribute('gs-h', String(n.h)) : el.removeAttribute('gs-h');\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement, clearDefaultAttr = true): GridStackWidget {\r\n    let n: GridStackNode = {};\r\n    n.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    n.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    n.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    n.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    n.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    n.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    n.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    n.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    n.id = el.getAttribute('gs-id');\r\n\r\n    // read but never written out\r\n    n.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    n.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    n.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    n.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n\r\n    // v8.x optimization to reduce un-needed attr that don't render or are default CSS\r\n    if (clearDefaultAttr) {\r\n      if (n.w === 1) el.removeAttribute('gs-w');\r\n      if (n.h === 1) el.removeAttribute('gs-h');\r\n      if (n.maxW) el.removeAttribute('gs-max-w');\r\n      if (n.minW) el.removeAttribute('gs-min-w');\r\n      if (n.maxH) el.removeAttribute('gs-max-h');\r\n      if (n.minH) el.removeAttribute('gs-min-h');\r\n    }\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in n) {\r\n      if (!n.hasOwnProperty(key)) return;\r\n      if (!n[key] && n[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete n[key];\r\n      }\r\n    }\r\n\r\n    return n;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for cellHeight==='auto' (square)\r\n   * or `sizeToContent` gridItem options.\r\n   */\r\n  public onResize(): GridStack {\r\n    if (!this.el?.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    if (this.prevWidth === this.el.clientWidth) return; // no-op\r\n    this.prevWidth = this.el.clientWidth\r\n    // console.log('onResize ', this.el.clientWidth);\r\n\r\n    this.batchUpdate();\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    let columnChanged = false;\r\n    if (this._autoColumn && this.parentGridItem) {\r\n      if (this.opts.column !== this.parentGridItem.w) {\r\n        this.column(this.parentGridItem.w, 'none');\r\n        columnChanged = true;\r\n      }\r\n    } else {\r\n      // else check for 1 column in/out behavior\r\n      let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize ||\r\n      (this.opts.column === 1 && !this._prevColumn);\r\n      if ((this.opts.column === 1) !== oneColumn) {\r\n        // if (this.opts.animate) this.setAnimation(false); // 1 <-> 12 is too radical, turn off animation and we need it for sizeToContent\r\n        this.column(oneColumn ? 1 : this._prevColumn);\r\n        // if (this.opts.animate) setTimeout(() => this.setAnimation(true));\r\n        columnChanged = true;\r\n      }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // update any nested grids, or items size\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) n.subGrid.onResize()\r\n    });\r\n\r\n    if (!this._skipInitialResize) this.doContentResize(columnChanged); // wait for anim of column changed (DOM reflow before we can size correctly)\r\n    delete this._skipInitialResize;\r\n\r\n    this.batchUpdate(false);\r\n\r\n    return this;\r\n  }\r\n\r\n  private doContentResize(delay = true, useAttr = false, n: GridStackNode = undefined) {\r\n    // update any gridItem height with sizeToContent, but wait for DOM $animation_speed to settle if we changed column count\r\n    // TODO: is there a way to know what the final (post animation) size of the content will be so we can animate the column width and height together rather than sequentially ?\r\n    setTimeout(() =>  {\r\n       if (n) {\r\n        if (Utils.shouldSizeToContent(n)) this.resizeToContentCheck(n.el, useAttr);\r\n       } else if (this.engine.nodes.some(n => Utils.shouldSizeToContent(n))) {\r\n        const nodes = [...this.engine.nodes]; // in case order changes while resizing one\r\n        this.batchUpdate();\r\n        nodes.forEach(n => {\r\n          if (Utils.shouldSizeToContent(n)) this.resizeToContentCheck(n.el, useAttr);\r\n        });\r\n        this.batchUpdate(false);\r\n      }\r\n      // call this regardless of shouldSizeToContent because widget might need to stretch to take available space after a resize\r\n      if (this._gsEventHandler['resizecontent']) this._gsEventHandler['resizecontent'](null, n ? [n] : this.engine.nodes);\r\n    }, delay ? 300 + 10 : 0);\r\n  }\r\n\r\n  /** add or remove the grid element size event handler */\r\n  protected _updateResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    // or supporting new sizeToContent option.\r\n    const trackSize = !this.parentGridItem && (this._isAutoCellHeight || this.opts.sizeToContent || !this.opts.disableOneColumnMode\r\n      || this.engine.nodes.find(n => n.sizeToContent));\r\n\r\n    if (!forceRemove && trackSize && !this.resizeObserver) {\r\n      this._sizeThrottle = Utils.throttle(() => this.onResize(), this.opts.cellHeightThrottle);\r\n      this.resizeObserver = new ResizeObserver(entries => this._sizeThrottle());\r\n      this.resizeObserver.observe(this.el);\r\n      this._skipInitialResize = true; // makeWidget will originally have called on startup\r\n    } else if ((forceRemove || !trackSize) && this.resizeObserver) {\r\n      this.resizeObserver.disconnect();\r\n      delete this.resizeObserver;\r\n      delete this._sizeThrottle;\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static GDRev = '9.3.0';\r\n\r\n  /* ===========================================================================================\r\n   * drag&drop methods that used to be stubbed out and implemented in dd-gridstack.ts\r\n   * but caused loading issues in prod - see https://github.com/gridstack/gridstack.js/issues/2039\r\n   * ===========================================================================================\r\n   */\r\n\r\n  /** get the global (but static to this code) DD implementation */\r\n  public static getDD(): DDGridStack {\r\n    return dd;\r\n  }\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n   * is dynamically create and needs to be set later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item') or list of dom elements\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\r\n   * @param root optional root which defaults to document (for shadow dom pas the parent HTMLDocument)\r\n   */\r\n  public static setupDragIn(dragIn?: string | HTMLElement[], dragInOptions?: DDDragInOpt, root: HTMLElement | Document = document): void {\r\n    if (dragInOptions?.pause !== undefined) {\r\n      DDManager.pauseDrag = dragInOptions.pause;\r\n    }\r\n\r\n    dragInOptions = {...dragInDefaultOptions, ...(dragInOptions || {})};\r\n    let els: HTMLElement[] = (typeof dragIn === 'string') ? Utils.getElements(dragIn, root) : dragIn;\r\n    if (els.length) els?.forEach(el => {\r\n      if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable, assuming the parent grid isn't noMove or static.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el.gridstackNode;\r\n      if (!n) return;\r\n      val ? delete n.noMove : n.noMove = true;\r\n      this._prepareDragDropByNode(n); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable, assuming the parent grid isn't noResize or static.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n    GridStack.getElements(els).forEach(el => {\r\n      let n = el.gridstackNode;\r\n      if (!n) return;\r\n      val ? delete n.noResize : n.noResize = true;\r\n      this._prepareDragDropByNode(n); // init DD if need be, and adjust\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public disable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(false, recurse);\r\n    this.enableResize(false, recurse);\r\n    this._triggerEvent('disable');\r\n    return this;\r\n  }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enable(recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return;\r\n    this.enableMove(true, recurse);\r\n    this.enableResize(true, recurse);\r\n    this._triggerEvent('enable');\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids, and locally defined items still overrule\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableMove(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't move a static grid!\r\n    doEnable ? delete this.opts.disableDrag : this.opts.disableDrag = true; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n);\r\n      if (n.subGrid && recurse) n.subGrid.enableMove(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   * @param recurse true (default) if sub-grids also get updated\r\n   */\r\n  public enableResize(doEnable: boolean, recurse = true): GridStack {\r\n    if (this.opts.staticGrid) return this; // can't size a static grid!\r\n    doEnable ? delete this.opts.disableResize : this.opts.disableResize = true; // FIRST before we update children as grid overrides #1658\r\n    this.engine.nodes.forEach(n => {\r\n      this._prepareDragDropByNode(n);\r\n      if (n.subGrid && recurse) n.subGrid.enableResize(doEnable, recurse);\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** @internal removes any drag&drop present (called during destroy) */\r\n  protected _removeDD(el: DDElementHost): GridStack {\r\n    dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n    if (el.gridstackNode) {\r\n      delete el.gridstackNode._initDD; // reset our DD init flag\r\n    }\r\n    delete el.ddElement;\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to add drag over to support widgets being added externally */\r\n  protected _setupAcceptWidget(): GridStack {\r\n\r\n    // check if we need to disable things\r\n    if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n      dd.droppable(this.el, 'destroy');\r\n      return this;\r\n    }\r\n\r\n    // vars shared across all methods\r\n    let cellHeight: number, cellWidth: number;\r\n\r\n    let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      if (!node) return;\r\n\r\n      helper = helper || el;\r\n      let parent = this.el.getBoundingClientRect();\r\n      const { scaleX, scaleY } = Utils.getScaleForElement(helper);\r\n      let {top, left} = helper.getBoundingClientRect();\r\n      left = (left - parent.left) / scaleX;\r\n      top = (top - parent.top) / scaleY;\r\n      let ui: DDUIData = {position: {top, left}};\r\n\r\n      if (node._temporaryRemoved) {\r\n        node.x = Math.max(0, Math.round(left / cellWidth));\r\n        node.y = Math.max(0, Math.round(top / cellHeight));\r\n        delete node.autoPosition;\r\n        this.engine.nodeBoundFix(node);\r\n\r\n        // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n        if (!this.engine.willItFit(node)) {\r\n          node.autoPosition = true; // ignore x,y and try for any slot...\r\n          if (!this.engine.willItFit(node)) {\r\n            dd.off(el, 'drag'); // stop calling us\r\n            return; // full grid or can't grow\r\n          }\r\n          if (node._willFitPos) {\r\n            // use the auto position instead #1687\r\n            Utils.copyPos(node, node._willFitPos);\r\n            delete node._willFitPos;\r\n          }\r\n        }\r\n\r\n        // re-use the existing node dragging method\r\n        this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n      } else {\r\n        // re-use the existing node dragging that does so much of the collision detection\r\n        this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n    }\r\n\r\n    dd.droppable(this.el, {\r\n      accept: (el: GridItemHTMLElement) => {\r\n        let node: GridStackNode = el.gridstackNode;\r\n        // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n        if (node?.grid === this) return true;\r\n        if (!this.opts.acceptWidgets) return false;\r\n        // check for accept method or class matching\r\n        let canAccept = true;\r\n        if (typeof this.opts.acceptWidgets === 'function') {\r\n          canAccept = this.opts.acceptWidgets(el);\r\n        } else {\r\n          let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n          canAccept = el.matches(selector);\r\n        }\r\n        // finally check to make sure we actually have space left #1571\r\n        if (canAccept && node && this.opts.maxRow) {\r\n          let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n          canAccept = this.engine.willItFit(n);\r\n        }\r\n        return canAccept;\r\n      }\r\n    })\r\n    /**\r\n     * entering our grid area\r\n     */\r\n      .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n        if (node?.grid === this && !node._temporaryRemoved) {\r\n        // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n          return false; // prevent parent from receiving msg (which may be a grid as well)\r\n        }\r\n\r\n        // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n        if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n        // console.log('dropover without leave'); // TEST\r\n          let otherGrid = node.grid;\r\n          otherGrid._leave(el, helper);\r\n        }\r\n\r\n        // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true);\r\n\r\n        // load any element attributes if we don't have a node\r\n        if (!node) {\r\n          node = this._readAttr(el, false); // don't wipe external (e.g. drag toolbar) attr #2354\r\n        }\r\n        if (!node.grid) {\r\n          node._isExternal = true;\r\n          el.gridstackNode = node;\r\n        }\r\n\r\n        // calculate the grid size based on element outer size\r\n        helper = helper || el;\r\n        let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n        let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n        // if the item came from another grid, make a copy and save the original info in case we go back there\r\n        if (node.grid && node.grid !== this) {\r\n        // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n        // console.log('dropover cloning node'); // TEST\r\n          if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n          el.gridstackNode = node = {...node, w, h, grid: this};\r\n          delete node.x;\r\n          delete node.y;\r\n          this.engine.cleanupNode(node)\r\n            .nodeBoundFix(node);\r\n          // restore some internal fields we need after clearing them all\r\n          node._initDD =\r\n          node._isExternal =  // DOM needs to be re-parented on a drop\r\n          node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n        } else {\r\n          node.w = w; node.h = h;\r\n          node._temporaryRemoved = true; // so we can insert it\r\n        }\r\n\r\n        // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n        this._itemRemoving(node.el, false);\r\n\r\n        dd.on(el, 'drag', onDrag);\r\n        // make sure this is called at least once when going fast #1578\r\n        onDrag(event as DragEvent, el, helper);\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      })\r\n    /**\r\n     * Leaving our grid area...\r\n     */\r\n      .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n        let node = el.gridstackNode;\r\n        if (!node) return false;\r\n        // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n        // so skip this one if we're not the active grid really..\r\n        if (!node.grid || node.grid === this) {\r\n          this._leave(el, helper);\r\n          // if we were created as temporary nested grid, go back to before state\r\n          if (this._isTemp) {\r\n            this.removeAsSubGrid(node);\r\n          }\r\n        }\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      })\r\n    /**\r\n     * end - releasing the mouse\r\n     */\r\n      .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n        let node = el.gridstackNode;\r\n        // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n        if (node?.grid === this && !node._isExternal) return false;\r\n\r\n        let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n        this.placeholder.remove();\r\n\r\n        // notify previous grid of removal\r\n        // console.log('drop delete _gridstackNodeOrig') // TEST\r\n        let origNode = el._gridstackNodeOrig;\r\n        delete el._gridstackNodeOrig;\r\n        if (wasAdded && origNode?.grid && origNode.grid !== this) {\r\n          let oGrid = origNode.grid;\r\n          oGrid.engine.removeNodeFromLayoutCache(origNode);\r\n          oGrid.engine.removedNodes.push(origNode);\r\n          oGrid._triggerRemoveEvent()._triggerChangeEvent();\r\n          // if it's an empty sub-grid that got auto-created, nuke it\r\n          if (oGrid.parentGridItem && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {\r\n            oGrid.removeAsSubGrid();\r\n          }\r\n        }\r\n\r\n        if (!node) return false;\r\n\r\n        // use existing placeholder node as it's already in our list with drop location\r\n        if (wasAdded) {\r\n          this.engine.cleanupNode(node); // removes all internal _xyz values\r\n          node.grid = this;\r\n        }\r\n        dd.off(el, 'drag');\r\n        // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n        // as the helper will be nuked by jquery-ui otherwise. TODO: update old code path\r\n        if (helper !== el) {\r\n          helper.remove();\r\n          el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n          if (wasAdded) {\r\n            el = el.cloneNode(true) as GridItemHTMLElement;\r\n          }\r\n        } else {\r\n          el.remove(); // reduce flicker as we change depth here, and size further down\r\n          this._removeDD(el);\r\n        }\r\n        if (!wasAdded) return false;\r\n        el.gridstackNode = node;\r\n        node.el = el;\r\n        let subGrid = node.subGrid?.el?.gridstack; // set when actual sub-grid present\r\n        // @ts-ignore\r\n        Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n        Utils.removePositioningStyles(el);// @ts-ignore\r\n        this._writeAttr(el, node);\r\n        el.classList.add(gridDefaults.itemClass, this.opts.itemClass);\r\n        this.el.appendChild(el);// @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\r\n        if (subGrid) {\r\n          subGrid.parentGridItem = node;\r\n          if (!subGrid.opts.styleInHead) subGrid._updateStyles(true); // re-create sub-grid styles now that we've moved\r\n        }\r\n        this._updateContainerHeight();\r\n        this.engine.addedNodes.push(node);// @ts-ignore\r\n        this._triggerAddEvent();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n        if (this._gsEventHandler['dropped']) {\r\n          this._gsEventHandler['dropped']({...event, type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n        }\r\n\r\n        // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n        window.setTimeout(() => {\r\n          // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n          if (node.el && node.el.parentElement) {\r\n            this._prepareDragDropByNode(node);\r\n          } else {\r\n            this.engine.removeNode(node);\r\n          }\r\n          delete node.grid._isTemp;\r\n        });\r\n\r\n        return false; // prevent parent from receiving msg (which may be grid as well)\r\n      });\r\n    return this;\r\n  }\r\n\r\n  /** @internal mark item for removal */\r\n  private _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n    let node = el ? el.gridstackNode : undefined;\r\n    if (!node || !node.grid || el.classList.contains(this.opts.removableOptions.decline)) return;\r\n    remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n    remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n  }\r\n\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  protected _setupRemoveDrop(): GridStack {\r\n    if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n      let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n      if (!trashEl) return this;\r\n      // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n      // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n      // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n      if (!dd.isDroppable(trashEl)) {\r\n        dd.droppable(trashEl, this.opts.removableOptions)\r\n          .on(trashEl, 'dropover', (event, el) => this._itemRemoving(el, true))\r\n          .on(trashEl, 'dropout',  (event, el) => this._itemRemoving(el, false));\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal prepares the element for drag&drop */\r\n  protected _prepareDragDropByNode(node: GridStackNode): GridStack {\r\n    let el = node.el;\r\n    const noMove = node.noMove || this.opts.disableDrag;\r\n    const noResize = node.noResize || this.opts.disableResize;\r\n\r\n    // check for disabled grid first\r\n    if (this.opts.staticGrid || (noMove && noResize)) {\r\n      if (node._initDD) {\r\n        this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\r\n        delete node._initDD;\r\n      }\r\n      el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n      return this;\r\n    }\r\n\r\n    if (!node._initDD) {\r\n      // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n      let cellWidth: number;\r\n      let cellHeight: number;\r\n\r\n      /** called when item starts moving/resizing */\r\n      let onStartMoving = (event: Event, ui: DDUIData) => {\r\n        // trigger any 'dragstart' / 'resizestart' manually\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, event.target);\r\n        }\r\n        cellWidth = this.cellWidth();\r\n        cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n        this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when item is being dragged/resized */\r\n      let dragOrResize = (event: MouseEvent, ui: DDUIData) => {\r\n        this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n      }\r\n\r\n      /** called when the item stops moving/resizing */\r\n      let onEndMoving = (event: Event) => {\r\n        this.placeholder.remove();\r\n        delete node._moving;\r\n        delete node._event;\r\n        delete node._lastTried;\r\n\r\n        // if the item has moved to another grid, we're done here\r\n        let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n        if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n        node.el = target;\r\n\r\n        if (node._isAboutToRemove) {\r\n          let grid = el.gridstackNode.grid;\r\n          if (grid._gsEventHandler[event.type]) {\r\n            grid._gsEventHandler[event.type](event, target);\r\n          }\r\n          grid.engine.nodes.push(node); // temp add it back so we can proper remove it next\r\n          grid.removeWidget(el, true, true);\r\n        } else {\r\n          Utils.removePositioningStyles(target);\r\n          if (node._temporaryRemoved) {\r\n            // got removed - restore item back to before dragging position\r\n            Utils.copyPos(node, node._orig);// @ts-ignore\r\n            this._writePosAttr(target, node);\r\n            this.engine.addNode(node);\r\n          } else {\r\n            // move to new placeholder location\r\n            this._writePosAttr(target, node);\r\n          }\r\n          if (this._gsEventHandler[event.type]) {\r\n            this._gsEventHandler[event.type](event, target);\r\n          }\r\n        }\r\n        // @ts-ignore\r\n        this._extraDragRow = 0;// @ts-ignore\r\n        this._updateContainerHeight();// @ts-ignore\r\n        this._triggerChangeEvent();\r\n\r\n        this.engine.endUpdate();\r\n\r\n        if (event.type === 'resizestop') {\r\n          if (Number.isInteger(node.sizeToContent)) node.sizeToContent = node.h; // new soft limit\r\n          this.doContentResize(false, true, node); // no amin wait as will use the actual sized coordinate attr\r\n        }\r\n      }\r\n\r\n      dd.draggable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        drag: dragOrResize\r\n      }).resizable(el, {\r\n        start: onStartMoving,\r\n        stop: onEndMoving,\r\n        resize: dragOrResize\r\n      });\r\n      node._initDD = true; // we've set DD support now\r\n    }\r\n\r\n    // finally fine tune move vs resize by disabling any part...\r\n    dd.draggable(el, noMove ? 'disable' : 'enable')\r\n      .resizable(el, noResize ? 'disable' : 'enable');\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal handles actual drag/resize start */\r\n  protected _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    this.engine.cleanNodes()\r\n      .beginUpdate(node);\r\n    // @ts-ignore\r\n    this._writePosAttr(this.placeholder, node)\r\n    this.el.appendChild(this.placeholder);\r\n    // console.log('_onStartMoving placeholder') // TEST\r\n\r\n    node.el = this.placeholder;\r\n    node._lastUiPosition = ui.position;\r\n    node._prevYPix = ui.position.top;\r\n    node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n    delete node._lastTried;\r\n\r\n    if (event.type === 'dropover' && node._temporaryRemoved) {\r\n      // console.log('engine.addNode x=' + node.x); // TEST\r\n      this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n      node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n    }\r\n\r\n    // set the min/max resize info\r\n    this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n    if (event.type === 'resizestart') {\r\n      dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n        .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n      if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n      if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n    }\r\n  }\r\n\r\n  /** @internal handles actual drag/resize */\r\n  protected _dragOrResize(el: GridItemHTMLElement, event: MouseEvent, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void {\r\n    let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n    let resizing: boolean;\r\n    let mLeft = this.opts.marginLeft as number,\r\n      mRight = this.opts.marginRight as number,\r\n      mTop = this.opts.marginTop as number,\r\n      mBottom = this.opts.marginBottom as number;\r\n\r\n    // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n    let mHeight = Math.round(cellHeight * 0.1),\r\n      mWidth = Math.round(cellWidth * 0.1);\r\n    mLeft = Math.min(mLeft, mWidth);\r\n    mRight = Math.min(mRight, mWidth);\r\n    mTop = Math.min(mTop, mHeight);\r\n    mBottom = Math.min(mBottom, mHeight);\r\n\r\n    if (event.type === 'drag') {\r\n      if (node._temporaryRemoved) return; // handled by dropover\r\n      let distance = ui.position.top - node._prevYPix;\r\n      node._prevYPix = ui.position.top;\r\n      if (this.opts.draggable.scroll !== false) {\r\n        Utils.updateScrollPosition(el, ui.position, distance);\r\n      }\r\n\r\n      // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n      let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -mRight : mLeft);\r\n      let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -mBottom : mTop);\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n      let prev = this._extraDragRow;\r\n      if (this.engine.collide(node, p)) {\r\n        let row = this.getRow();\r\n        let extra = Math.max(0, (p.y + node.h) - row);\r\n        if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n          extra = Math.max(0, this.opts.maxRow - row);\r\n        }// @ts-ignore\r\n        this._extraDragRow = extra;// @ts-ignore\r\n      } else this._extraDragRow = 0;// @ts-ignore\r\n      if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n      if (node.x === p.x && node.y === p.y) return; // skip same\r\n      // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n      // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n    } else if (event.type === 'resize')  {\r\n      if (p.x < 0) return;\r\n      // Scrolling page if needed\r\n      Utils.updateScrollResize(event, el, cellHeight);\r\n\r\n      // get new size\r\n      p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n      p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n      if (node.w === p.w && node.h === p.h) return;\r\n      if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n      // if we size on left/top side this might move us, so get possible new position as well\r\n      let left = ui.position.left + mLeft;\r\n      let top = ui.position.top + mTop;\r\n      p.x = Math.round(left / cellWidth);\r\n      p.y = Math.round(top / cellHeight);\r\n\r\n      resizing = true;\r\n    }\r\n\r\n    node._event = event;\r\n    node._lastTried = p; // set as last tried (will nuke if we go there)\r\n    let rect: GridStackPosition = { // screen pix of the dragged box\r\n      x: ui.position.left + mLeft,\r\n      y: ui.position.top + mTop,\r\n      w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n      h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n    };\r\n    if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect, resizing})) {\r\n      node._lastUiPosition = ui.position;\r\n      this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n      delete node._skipDown;\r\n      if (resizing && node.subGrid) node.subGrid.onResize();\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();\r\n\r\n      let target = event.target as GridItemHTMLElement;// @ts-ignore\r\n      this._writePosAttr(target, node);\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, target);\r\n      }\r\n    }\r\n  }\r\n\r\n  /** @internal called when item leaving our area by either cursor dropout event\r\n   * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n   * our item to start with else restore prev node values from prev grid it came from.\r\n   */\r\n  protected _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    dd.off(el, 'drag'); // no need to track while being outside\r\n\r\n    // this gets called when cursor leaves and shape is outside, so only do this once\r\n    if (node._temporaryRemoved) return;\r\n    node._temporaryRemoved = true;\r\n\r\n    this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n    node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n    if (this.opts.removable === true) { // boolean vs a class string\r\n      // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n      this._itemRemoving(el, true);\r\n    }\r\n\r\n    // finally if item originally came from another grid, but left us, restore things back to prev info\r\n    if (el._gridstackNodeOrig) {\r\n      // console.log('leave delete _gridstackNodeOrig') // TEST\r\n      el.gridstackNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n    } else if (node._isExternal) {\r\n      // item came from outside (like a toolbar) so nuke any node info\r\n      delete node.el;\r\n      delete el.gridstackNode;\r\n      // and restore all nodes back to original\r\n      this.engine.restoreInitial();\r\n    }\r\n  }\r\n\r\n  // legacy method removed\r\n  public commit(): GridStack { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\r\n}\r\n","/**\r\n * dd-gridstack.ts 9.3.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackElement, DDDragInOpt } from './types';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n        let autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    let hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Utils","static","els","document","doc","undefined","isNaN","el","getElementById","list","querySelectorAll","length","Array","from","substring","querySelector","n","grid","sizeToContent","opts","a","b","y","h","x","w","isIntercepted","x0","x1","y0","y1","nodes","dir","column","reduce","col","Math","max","sort","id","parent","options","style","createElement","nonce","setAttribute","styleSheet","cssText","appendChild","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","parentNode","remove","selector","rules","addRule","insertRule","v","toLowerCase","Boolean","value","Number","val","unit","match","Error","parseFloat","target","sources","forEach","source","this","defaults","keys","doMinMax","minW","minH","maxW","maxH","node","i","removeEl","autoPosition","noResize","noMove","locked","func","delay","isWaiting","args","setTimeout","position","removeProperty","left","top","width","height","scrollingElement","documentElement","getComputedStyle","test","overflow","overflowY","getScrollElement","parentElement","getPositionContainerElement","transform","distance","rect","getBoundingClientRect","innerHeightOrClientHeight","window","innerHeight","clientHeight","bottom","offsetDiffDown","offsetDiffUp","scrollEl","prevScroll","scrollTop","offsetHeight","abs","event","offsetTop","pointerPosY","clientY","scrollBy","behavior","skipFields","ret","clone","find","k","cloneDeep","cloneNode","removeAttribute","getElement","styles","s","isArray","e","info","evt","type","button","which","buttons","bubbles","cancelable","dataTransfer","p","simulatedType","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","clientX","ctrlKey","altKey","shiftKey","metaKey","dispatchEvent","element","offsetParent","scaleX","scaleY","boundingClientRect","offsetWidth","GridStackEngine","addedNodes","removedNodes","maxRow","_float","float","onChange","batchUpdate","flag","doPack","batchMode","_prevFloat","cleanNodes","saveInitial","_packNodes","_notify","_useEntireRowArea","nn","_hasLocked","_moving","_skipDown","_fixCollisions","collide","opt","sortNodes","nested","swap","area","skip","didMove","newOpt","pack","moved","moveNode","copyPos","skip2","skipId","_id","skip2Id","collideAll","filter","directionCollideCoverage","collides","_rect","r0","r","overMax","r2","yOver","MAX_VALUE","xOver","over","min","cacheRects","right","_doSwap","_dirty","touching","isTouching","t","isAreaEmpty","compact","layout","doSort","wasBatch","wasColumnResize","_inColumnResize","copyNodes","index","after","addNode","_updating","_orig","newY","prepareNode","resizing","_idSeq","sanitizeMinMax","nodeBoundFix","before","findCacheLayout","copy","cacheOneLayout","samePos","getDirtyNodes","verify","dirtyNodes","concat","_lastTried","some","restoreInitial","findEmptyPosition","nodeList","found","floor","box","triggerAddEvent","skipCollision","_temporaryRemoved","_removeDOM","push","removeNode","removeDOM","triggerEvent","_isAboutToRemove","removeAll","_layouts","moveNodeCheck","changedPosConstrain","clonedNode","map","canMove","getRow","gridstackNode","c","willItFit","_willFitPos","cleanupNode","content","wasUndefinedPack","prevPos","needToMove","activeDrag","subGridDynamic","_isTemp","areaIntercept","a1","a2","makeSubGrid","row","beginUpdate","endUpdate","save","saveElement","saveCB","len","wl","l","removeInternalForSave","layoutsNodesChange","ratio","round","columnChanged","prevColumn","doCompact","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","move","scale","clear","removeNodeFromLayoutCache","gridDefaults","alwaysShowResizeHandle","animate","auto","cellHeight","cellHeightThrottle","cellHeightUnit","draggable","handle","appendTo","scroll","itemClass","margin","marginUnit","minRow","oneColumnSize","placeholderClass","placeholderText","removableOptions","accept","decline","resizable","handles","rtl","dragInDefaultOptions","DDManager","isTouch","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","DDTouch","simulateMouseEvent","touches","preventDefault","touch","changedTouches","simulatePointerMouseEvent","touchstart","touchHandled","touchmove","touchend","pointerLeaveTimeout","clearTimeout","wasDragging","dragElement","pointerdown","pointerType","releasePointerCapture","pointerId","pointerenter","pointerleave","DDResizableHandle","constructor","host","direction","option","moving","_mouseDown","bind","_mouseMove","_mouseUp","_init","classList","add","prefix","zIndex","userSelect","addEventListener","destroy","mouseDownEvent","removeEventListener","removeChild","stopPropagation","_triggerEvent","name","DDBaseImplement","_eventRegister","disabled","_disabled","on","callback","off","enable","disable","eventName","DDResizable","super","_ui","getScaleForElement","newRect","originalRect","scrolled","temporalRect","size","_mouseOver","_mouseOut","_setupAutoHide","autoHide","_setupHandlers","_removeHandlers","updateOption","updateHandles","updateAutoHide","overResizeElement","handlerDirection","handlers","split","trim","start","_resizeStart","stop","_resizeStop","_resizing","scrollY","startEvent","_setupHelper","_applyChange","ev","initEvent","_getChange","resize","_cleanHelper","elOriginStyleVal","_originStyleProp","parentOriginStylePosition","opacity","oEvent","containerRect","offsetX","offsetY","indexOf","constrain","_constrainSize","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","DDDraggable","handleName","dragEl","contains","forDestroy","dragTimeout","dragging","helper","mouseHandled","closest","cancel","dropElement","activeElement","blur","_callDrag","drag","ui","_dragFollow","pauseDrag","pause","isInteger","ddElement","ddDroppable","origRelativeMouse","_createHelper","_setupHelperContainmentStyle","_setupHelperStyle","helperContainment","_removeHelperStyle","drop","body","dragElementOriginStyle","originStyleProp","pointerEvents","willChange","transition","transformParentRect","getContainerForPositionFixedElement","containmentEl","scrollElement","containmentRect","offset","parentPositionIncludingScroll","scrollLeft","DDDroppable","_mouseEnter","_mouseLeave","_setupAccept","_canDrop","out","parentDrop","matches","DDElement","ddDraggable","ddResizable","setupDraggable","cleanDraggable","setupResizable","cleanResizable","setupDroppable","cleanDroppable","dd","_getDDElements","dEl","getAttribute","dragIn","droppable","_accept","isDroppable","isDraggable","isResizable","create","hosts","getElements","init","d","GridStack","elOrString","getGridElement","gridstack","console","error","grids","getGridElements","children","load","addRemoveCB","implementation","createHTMLDocument","innerHTML","class","engineClass","placeholder","_placeholder","placeholderChild","className","_gsEventHandler","_extraDragRow","rowAttr","toNumber","_alwaysShowResizeHandle","staticGrid","toBool","handleClass","_initMargin","disableOneColumnMode","_widthOrContainer","_prevColumn","getColumn","grandParent","parentGridItem","subGrid","_isAutoCellHeight","_styleSheetClass","_setStaticClass","engine","cbNodes","_writePosAttr","_updateStyles","getGridItems","_prepareElement","setAnimation","_setupRemoveDrop","_setupAcceptWidget","_updateResizeEvent","addWidget","arguments","domAttr","_readAttr","_writeAttr","_insertNotAppend","prepend","makeWidget","ops","nodeToAdd","saveContent","subGridTemplate","autoColumn","subGridOpts","newItem","newItemOpt","_removeDD","_prepareDragDropByNode","update","addGrid","_autoColumn","_event","removeAsSubGrid","nodeThatRemoved","pGrid","removeWidget","saveGridOpt","sub","listOrOpt","marginBottom","marginTop","marginRight","marginLeft","origShow","removeInternalAndSame","addRemove","haveCoord","items","_ignoreLayoutsNodeChange","prevCB","removed","item","_updateContainerHeight","_triggerRemoveEvent","_triggerAddEvent","_triggerChangeEvent","getCellHeight","forcePixel","rows","parseInt","marginDiff","cellWidth","data","parseHeight","doContentResize","clientWidth","innerWidth","domNodes","oldColumn","oneColumnModeDomSort","offAll","setStatic","_removeStylesheet","getFloat","getCellFromPixel","useDocRelative","containerPos","offsetLeft","relativeLeft","relativeTop","columnWidth","rowHeight","noData","detail","log","doAnimate","updateClass","recurse","warn","m","itemContent","styleInHead","changed","ddChanged","resizeToContent","useAttrSize","cell","resizeToContentParent","padding","itemH","wantedH","child","firstElementChild","ceil","softMax","resizeToContentCheck","useAttr","resizeToContentCB","getMargin","elements","CustomEvent","Event","_styles","removeStylesheet","forceUpdate","styleLocation","createStylesheet","_max","addCSSRule","getHeight","cssMinHeight","String","shouldSizeToContent","same","attrs","clearDefaultAttr","classes","onResize","prevWidth","oneColumn","_skipInitialResize","forceRemove","trackSize","resizeObserver","disconnect","_sizeThrottle","throttle","ResizeObserver","entries","observe","margins","dragInOptions","movable","enableMove","enableResize","doEnable","disableDrag","disableResize","_initDD","acceptWidgets","removable","onDrag","_onStartMoving","_dragOrResize","canAccept","_leave","_isExternal","_gridstackNodeOrig","_itemRemoving","wasAdded","origNode","oGrid","removePositioningStyles","trashEl","onStartMoving","dragOrResize","onEndMoving","_lastUiPosition","_prevYPix","mLeft","mRight","mTop","mBottom","mHeight","mWidth","updateScrollPosition","prev","extra","updateScrollResize","commit","Engine","GDRev"],"sourceRoot":""}