@page "/kanbantodotask"
@implements IDisposable
@inject AppService AppService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@attribute [Authorize]

<PageTitle>Todo Tasks</PageTitle>

<div class="mb-3">
    <MudText Typo="Typo.h3">Todo Tasks</MudText>
</div>

<MudDropContainer T="KanbanTaskItem" @ref="_dropContainer" Items="@_tasks" ItemsSelector="@((item,column) => item.Status == column)" ItemDropped="TaskStatusUpdated" Class="d-flex flex-wrap flex-grow-1">
    <ChildContent>
        @foreach (var item in _sections)
        {
            <MudPaper Elevation="0" Class="pa-4 ma-4 d-flex flex-column mud-background-gray rounded-lg" Style="flex: 1 1 auto; max-width: 25%;">
                <MudToolBar DisableGutters="true">
                    <MudText Typo="Typo.subtitle1"><b>@item.Name</b></MudText>
                    <MudSpacer />
                </MudToolBar>
                <MudDropZone T="KanbanTaskItem" Identifier="@item.Name" Class="mud-height-full" />
                @if (item.NewTaskOpen)
                {
                    <MudPaper Elevation="25" Class="pa-2 rounded-lg">
                        <MudGrid>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="item.NewTaskName" Label="Name" Placeholder="Name" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="item.Description" Label="Description" Placeholder="Description" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="item.FollowupDate" Label="Follow-up Date" Placeholder="Followup Date" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="item.DueDate" Label="Due Date" Placeholder="Due Date" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                            </MudItem>
                            <MudItem xs="12">
                                <MudTextField @bind-Value="item.Notes" Label="Notes" Placeholder="Notes" DisableUnderLine="true" Margin="Margin.Dense" Class="mx-2 mt-n2"></MudTextField>
                            </MudItem>
                            <MudItem xs="12">
                                <MudButton OnClick="@(() => AddTask(item))" Size="Size.Small" Color="Color.Primary" FullWidth="true">Add Task</MudButton>
                            </MudItem>
                            <MudItem xs="12">
                                <MudButton OnClick="@(() => CancelTask(item))" Size="Size.Small" Color="Color.Secondary" FullWidth="true">Cancel</MudButton>
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                }
                else
                {
                    <MudButton OnClick="@(() => item.NewTaskOpen = !item.NewTaskOpen)" StartIcon="@Icons.Material.Filled.Add" FullWidth="true" Class="rounded-lg py-2">Add Task</MudButton>
                }
            </MudPaper>
        }
    </ChildContent>
    <ItemRenderer>
        <MudPaper Elevation="25" Class="pa-4 rounded-lg my-3">
            <div style="display: flex; flex-direction: column; align-items: start;">
                <div style="max-width: 300px; overflow-wrap: anywhere;">Name: @context.Name</div>
                <div style="max-width: 300px; overflow-wrap: anywhere; margin-top: 8px;">Description: @context.Description</div>
                <div style="max-width: 300px; overflow-wrap: anywhere; margin-top: 8px;">Followup Date: @context.FollowupDate</div>
                <div style="max-width: 300px; overflow-wrap: anywhere; margin-top: 8px;">Due Date: @context.DueDate</div>
                <div style="max-width: 300px; overflow-wrap: anywhere; margin-top: 8px;">Notes: @context.Notes</div>
                <div style="display: flex; justify-content: end; align-items: center; margin-top: 8px;">
                    <MudIconButton @onclick="@(e => OpenDialog(context))" Variant="Variant.Text" Color="Color.Primary" Icon="@Icons.Material.TwoTone.Edit" Size="Size.Medium"></MudIconButton>
                    <MudIconButton @onclick="@(e => DeleteTask(context, e))" Variant="Variant.Text" Color="Color.Error" Icon="@Icons.Material.TwoTone.Delete" Size="Size.Medium"></MudIconButton>
                </div>
            </div>
        </MudPaper>
    </ItemRenderer>
</MudDropContainer>
<CustomSnackbar @ref="CustomSnackbar" />

@code {
    CustomSnackbar CustomSnackbar = new CustomSnackbar { };
    TodoTask _returnedData = new TodoTask();
    private string? loadError;
    private TodoTask[] records;
    private MudDropContainer<KanbanTaskItem> _dropContainer = new MudDropContainer<KanbanTaskItem>();

    private async Task TaskStatusUpdated(MudItemDropInfo<KanbanTaskItem> info)
    {
        if (info.Item != null)
        {
            info.Item.Status = info.DropzoneIdentifier;

            var taskToUpdate = await AppService.GetTodoTaskByIdAsync(info.Item.Id);
            if (taskToUpdate != null)
            {
                taskToUpdate.Status = info.Item.Status;
                try
                {
                    await AppService.UpdateTodoTaskAsync(info.Item.Id, taskToUpdate);
                    await LoadDataAsync();
                }
                catch (Exception ex)
                {
                    Snackbar.Add(ex.Message, Severity.Error);
                }
                StateHasChanged();
            }
        }
    }

    private List<KanBanSections> _sections = new()
    {
        new KanBanSections("To Do", false, String.Empty, String.Empty,DateTime.Now,DateTime.Now,DateTime.Now,DateTime.Now,string.Empty),
        new KanBanSections("Open", false, String.Empty, String.Empty,DateTime.Now,DateTime.Now,DateTime.Now,DateTime.Now,string.Empty),
        new KanBanSections("In Process", false, String.Empty, String.Empty,DateTime.Now,DateTime.Now,DateTime.Now,DateTime.Now,string.Empty),
        new KanBanSections("Done", false, String.Empty, String.Empty,DateTime.Now,DateTime.Now,DateTime.Now,DateTime.Now,string.Empty),
    };

    public class KanBanSections
    {
        public string Name { get; set; }
        public bool NewTaskOpen { get; set; }
        public string NewTaskName { get; set; }
        public string? Description { get; set; }
        public DateTime DueDate { get; set; }
        public DateTime CreatedDateTime { get; set; }
        public DateTime ModifiedDateTime { get; set; }
        public DateTime FollowupDate { get; set; }
        public string? Notes { get; set; }

        public KanBanSections(string name, bool newTaskOpen, string newTaskName, string? description, DateTime dueDate, DateTime createdDateTime, DateTime modifiedDateTime, DateTime followupDate, string? notes)
        {
            Name = name;
            NewTaskOpen = newTaskOpen;
            NewTaskName = newTaskName;
            Description = description;
            DueDate = dueDate;
            CreatedDateTime = createdDateTime;
            ModifiedDateTime = modifiedDateTime;
            FollowupDate = followupDate;
            Notes = notes;
        }
    }

    public class KanbanTaskItem
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Status { get; set; }
        public string? Description { get; set; }
        public DateTime DueDate { get; set; }
        public DateTime CreatedDateTime { get; set; }
        public DateTime ModifiedDateTime { get; set; }
        public DateTime FollowupDate { get; set; }
        public string? Notes { get; set; }


        public KanbanTaskItem(int id, string name, string status, string? description, DateTime dueDate, DateTime createdDateTime, DateTime modifiedDateTime, DateTime followupDate, string? notes)
        {
            Id = id;
            Name = name;
            Status = status;
            Description = description;
            DueDate = dueDate;
            CreatedDateTime = createdDateTime;
            ModifiedDateTime = modifiedDateTime;
            FollowupDate = followupDate;
            Notes = notes;
        }
    }

    private List<KanbanTaskItem> _tasks = new();

    private async Task AddTask(KanBanSections section)
    {
        if (string.IsNullOrEmpty(section.NewTaskName))
        {
            CustomSnackbar.ShowMessage("Task name cannot be empty!", Severity.Error);
            return;
        }
        var task = new TodoTask
            {
                Name = section.NewTaskName,
                Status = section.Name,
                Description = section.Description,
                DueDate = section.DueDate,
                CreatedDateTime = section.CreatedDateTime,
                ModifiedDateTime = section.ModifiedDateTime,
                FollowupDate = section.FollowupDate,
                Notes = section.Notes,
            };

        try
        {
            await AppService.InsertTodoTaskAsync(task);

            section.NewTaskName = string.Empty;
            section.NewTaskOpen = false;

            await LoadDataAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        StateHasChanged();
        _dropContainer.Refresh();
    }

    private async Task OpenDialog(KanbanTaskItem item)
    {
        DialogOptions dialogOptions = new DialogOptions() { CloseOnEscapeKey = true };
        TodoTask dataToPass = new() { Id = item.Id, Name = item.Name, Status = item.Status, Description = item.Description, FollowupDate = item.FollowupDate, DueDate = item.DueDate, Notes = item.Notes, CreatedDateTime = item.CreatedDateTime, ModifiedDateTime = item.ModifiedDateTime };
        DialogParameters dialogParamters = new()
            {
                ["PassedData"] = dataToPass
            };
        var dialog = await DialogService.ShowAsync<CustomDialog>("Custom Dialog", dialogParamters, dialogOptions);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            var returnedData = await dialog.GetReturnValueAsync<TodoTask>();
            _returnedData = returnedData;
            if (string.IsNullOrEmpty(_returnedData.Name))
            {
                CustomSnackbar.ShowMessage("Task name cannot be empty!", Severity.Error);
                return;
            }
            

            var updatedItem = new KanbanTaskItem((int)_returnedData.Id, _returnedData.Name, _returnedData.Status, _returnedData.Description, _returnedData.DueDate ?? DateTime.Now.AddDays(7), _returnedData.CreatedDateTime ?? DateTime.Now, _returnedData.ModifiedDateTime ?? DateTime.Now, _returnedData.FollowupDate ?? DateTime.Now.AddDays(3), _returnedData.Notes);
            int taskIndex = _tasks.IndexOf(item);
            if (taskIndex != -1)
            {
                _tasks[taskIndex] = updatedItem;
            }

            var taskToUpdate = await AppService.GetTodoTaskByIdAsync(item.Id);
            if (taskToUpdate != null)
            {
                taskToUpdate.Name = updatedItem.Name;
                taskToUpdate.Status = updatedItem.Status;
                taskToUpdate.Description = updatedItem.Description;
                taskToUpdate.FollowupDate = updatedItem.FollowupDate;
                taskToUpdate.DueDate = updatedItem.DueDate;
                taskToUpdate.Notes = updatedItem.Notes;
                taskToUpdate.CreatedDateTime = updatedItem.CreatedDateTime;
                taskToUpdate.ModifiedDateTime = updatedItem.ModifiedDateTime;

                try
                {
                    await AppService.UpdateTodoTaskAsync(item.Id, taskToUpdate);
                    await LoadDataAsync();
                }
                catch (Exception ex)
                {
                    Snackbar.Add(ex.Message, Severity.Error);
                }
            }

            StateHasChanged();
            _dropContainer.Refresh();
        }
    }

    private async Task DeleteTask(KanbanTaskItem item, MouseEventArgs e)
    {
        _tasks.Remove(item);
        var taskToDelete = await AppService.GetTodoTaskByIdAsync(item.Id);
        if (taskToDelete != null)
        {
            var result = await DialogService.ShowMessageBox(
            "Warning",
            "Are you sure you want to delete this record?",
            "Delete",
            "Cancel");

            if (result.GetValueOrDefault(false))
            {
                try
                {
                    await AppService.DeleteTodoTaskAsync(item.Id!);
                }
                catch (Exception ex)
                {
                    Snackbar.Add(ex.Message, Severity.Error);
                }
            }
        }
        StateHasChanged();
        _dropContainer.Refresh();
    }

    void CancelTask(KanBanSections section)
    {
        section.NewTaskOpen = false;
    }

    protected override async Task OnInitializedAsync()
    {
        Navigation.LocationChanged += LocationChanged;

        await LoadDataAsync();
        StateHasChanged();
        _dropContainer.Refresh();
    }

    void IDisposable.Dispose()
    {
        Navigation.LocationChanged -= LocationChanged;
    }

    private async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        records = null;
        StateHasChanged();

        await LoadDataAsync();
        StateHasChanged();
    }

    private async Task LoadDataAsync()
    {
        try
        {
            var res = await AppService.ListTodoTaskAsync();
            records = res;

            var dataItems = records;
            _tasks = dataItems.Select(d => new KanbanTaskItem((int)d.Id, d.Name, d.Status, d.Description, d.DueDate ?? DateTime.Now.AddDays(7), d.CreatedDateTime ?? DateTime.Now, d.ModifiedDateTime ?? DateTime.Now, d.FollowupDate ?? DateTime.Now.AddDays(3), d.Notes)).ToList();
            
        }
        catch (Exception ex)
        {
            loadError = ex.Message;
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}