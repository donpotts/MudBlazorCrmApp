@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

@if (record == null)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Update Contact</MudText>
        </TitleContent>
        <DialogContent>
            <MudText>Loading...</MudText>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" Disabled="true">Update</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <EditForm Model="@record" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">Update Contact</MudText>
            </TitleContent>
            <DialogContent>
                <MudNumericField @bind-Value="record.Id" For="@(() => record.Id)" Label="Id" ReadOnly="true" />
                <MudTextField @bind-Value="record.Name" For="@(() => record.Name)" Label="Name" />
                <MudTextField @bind-Value="record.Email" For="@(() => record.Email)" Label="Email" />
                <MudNumericField @bind-Value="record.Phone" For="@(() => record.Phone)" Label="Phone" />
                <MudTextField @bind-Value="record.Role" For="@(() => record.Role)" Label="Role" />
                <MudFileUpload T="IBrowserFile" FilesChanged="@(async args => record.Photo = await UploadImageAsync(args, 256, 256))" Accept=".png,.jpg,.jpeg">
                    <ActivatorContent>
                        <MudIconButton Color="Color.Info"
                                       Icon="@Icons.Material.Filled.PhotoCamera">
                        </MudIconButton>
                    </ActivatorContent>
                </MudFileUpload>
                @if (!string.IsNullOrEmpty(record.Photo))
                {
                    <MudImage Src="@GetAbsoluteUri(record.Photo)" Style="width:128px;height:128px;object-fit:contain;" Class="mt-1" />
                }
                <MudTextField @bind-Value="record.Notes" For="@(() => record.Notes)" Label="Notes" />
                <MudSelect @bind-Value="record.AddressId" For="@(() => record.AddressId)" Label="Address" AnchorOrigin="Origin.BottomCenter">
                    <MudSelectItem T="long?" Value="null" />
                    @foreach (var address in addressArray ?? Enumerable.Empty<Address>())
                    {
                        <MudSelectItem Value="@address.Id">@address.City</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="long?" Label="Reward" MultiSelection="true" @bind-SelectedValues="rewardValues" MultiSelectionTextFunc="@(x => string.Join(", ", x.Select(s => rewardArray?.FirstOrDefault(i => i.Id?.ToString() == s)?.Rewardpoints)))" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var reward in rewardArray ?? Enumerable.Empty<Reward>())
                    {
                        <MudSelectItem T="long?" Value="@reward.Id">@reward.Rewardpoints</MudSelectItem>
                    }
                </MudSelect>

            </DialogContent>
            <DialogActions>
                <MudButton OnClick="OnCancel">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Update</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [Parameter]
    public long Id { get; set; }

    [CascadingParameter]
    IMudDialogInstance? MudDialog { get; set; }

    private Address[]? addressArray;
    private Reward[]? rewardArray;
    private IEnumerable<long?>? rewardValues;
    private Contact? record;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            addressArray = await AppService.ListAddressAsync();
            rewardArray = await AppService.ListRewardAsync();
            record = await AppService.GetContactByIdAsync(Id);
            rewardValues = record?.Reward?.Select(x => x.Id).ToHashSet() ?? [];
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        if (record == null)
        {
            return;
        }

        try
        {
            record.Reward = rewardValues?.Select(x => new Reward { Id = x }).ToList();
            await AppService.UpdateContactAsync(Id, record);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }
}
