@inject AppService AppService
@inject ISnackbar Snackbar
@inject HttpClient HttpClient

@if (record == null)
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">Update Sale</MudText>
        </TitleContent>
        <DialogContent>
            <MudText>Loading...</MudText>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="OnCancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" Disabled="true">Update</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <EditForm Model="@record" OnValidSubmit="@OnSubmit">
        <DataAnnotationsValidator />
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">Update Sale</MudText>
            </TitleContent>
            <DialogContent>
                <MudNumericField @bind-Value="record.Id" For="@(() => record.Id)" Label="Id" ReadOnly="true" />
                <MudTextField @bind-Value="record.ProductId" For="@(() => record.ProductId)" Label="ProductId" />
                <MudTextField @bind-Value="record.ServiceId" For="@(() => record.ServiceId)" Label="ServiceId" />
                <MudNumericField @bind-Value="record.CustomerId" For="@(() => record.CustomerId)" Label="CustomerId" />
                <MudNumericField @bind-Value="record.Quantity" For="@(() => record.Quantity)" Label="Quantity" />
                <MudNumericField @bind-Value="record.TotalAmount" For="@(() => record.TotalAmount)" Label="TotalAmount" />
                <MudTextField Format="s" InputType="InputType.DateTimeLocal" @bind-Value="record.SaleDate" For="@(() => record.SaleDate)" Label="SaleDate" />
                <MudFileUpload T="IBrowserFile" FilesChanged="@(async args => record.ReceiptPhoto = await UploadImageAsync(args, 256, 256))" Accept=".png,.jpg,.jpeg">
                    <ActivatorContent>
                        <MudIconButton Color="Color.Info"
                                       Icon="@Icons.Material.Filled.PhotoCamera">
                        </MudIconButton>
                    </ActivatorContent>
                </MudFileUpload>
                @if (!string.IsNullOrEmpty(record.ReceiptPhoto))
                {
                    <MudImage Src="@GetAbsoluteUri(record.ReceiptPhoto)" Style="width:128px;height:128px;object-fit:contain;" Class="mt-1" />
                }
                <MudTextField @bind-Value="record.Notes" For="@(() => record.Notes)" Label="Notes" />

            </DialogContent>
            <DialogActions>
                <MudButton OnClick="OnCancel">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Update</MudButton>
            </DialogActions>
        </MudDialog>
    </EditForm>
}

@code {
    [Parameter]
    public long Id { get; set; }

    [CascadingParameter]
    IMudDialogInstance? MudDialog { get; set; }

    private Sale? record;

    private string GetAbsoluteUri(string uri)
    {
        if (!uri.StartsWith("/"))
        {
            return uri;
        }

        var baseUri = HttpClient.BaseAddress;

        if (baseUri == null)
        {
            throw new Exception("Unable to determine base address");
        }

        Uri absolute = new(baseUri, uri);

        return absolute.ToString();
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            record = await AppService.GetSaleByIdAsync(Id);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private void OnCancel()
    {
        MudDialog?.Cancel();
    }

    private async void OnSubmit()
    {
        if (record == null)
        {
            return;
        }

        try
        {
            await AppService.UpdateSaleAsync(Id, record);
            MudDialog?.Close();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task<string?> UploadImageAsync(IBrowserFile file, int maxWidth = 256, int maxHeight = 256)
    {
        if (file.ContentType != "image/png" && file.ContentType != "image/jpeg")
        {
            Snackbar.Add("Only PNG or JPEG images can be uploaded.", Severity.Error);
            return null;
        }

        var image = await file.RequestImageFileAsync("image/png", maxWidth, maxHeight);

        try
        {
            return await AppService.UploadImageAsync(image);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }

        return null;
    }
}
