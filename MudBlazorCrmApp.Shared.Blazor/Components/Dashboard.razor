@using MudBlazorCrmApp.Shared.Blazor.Models
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject ThemeService ThemeService
@implements IAsyncDisposable

<div class="dashboard-wrapper">
    <div class="controls">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="MudBlazor.Color.Primary" OnClick="HandleAddCard">Add Card</MudButton>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DeleteForever" Color="MudBlazor.Color.Primary" OnClick="HandleResetLayout">Reset Layout</MudButton>
    </div>

    <div class="dashboard-container">
        <div class="grid-stack"></div>
    </div>

    <div style="display: none;" id="card-content-placeholders">
        @foreach (var card in _currentLayout)
        {
            <div id="content-for-@card.Id">
                <div class="card-header">
                    <span class="card-title">@card.Title</span>
                    <div class="card-controls">
                        <span class="move-handle"><i class="fas fa-arrows-alt"></i></span>
                        <span class="delete-handle" data-card-id="@card.Id">
                            <i class="fas fa-trash-alt"></i>
                        </span>
                    </div>
                </div>
                <div class="card-body">
                    @CardRenderer(card)
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter, EditorRequired]
    public string StorageKey { get; set; } = default!;
    [Parameter, EditorRequired]
    public Func<List<DashboardCard>> InitialLayoutFactory { get; set; } = default!;
    [Parameter, EditorRequired]
    public RenderFragment<DashboardCard> CardRenderer { get; set; } = default!;
    [Parameter]
    public EventCallback OnLayoutChanged { get; set; }

    private IJSObjectReference? _jsModule;
    private DotNetObjectReference<Dashboard>? _dotNetHelper;
    private List<DashboardCard> _currentLayout = new();
    private bool _isGridJsInitialized = false;
    private int _cardCounter = 0;

    protected override void OnInitialized()
    {
        _dotNetHelper = DotNetObjectReference.Create(this);
        ThemeService.OnChange += UpdateCharts;
    }

    private async void UpdateCharts()
    {        
        await OnLayoutChanged.InvokeAsync();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_isGridJsInitialized)
        {
            _isGridJsInitialized = true;
            await LoadLayoutFromStorage();
        }
    }

    private async Task LoadLayoutFromStorage()
    {
        var savedLayoutJson = await JSRuntime.InvokeAsync<string>("localStorage.getItem", StorageKey);
        if (!string.IsNullOrEmpty(savedLayoutJson))
        {
            var savedItems = System.Text.Json.JsonSerializer.Deserialize<List<DashboardCard>>(savedLayoutJson)!;
            var initialItems = InitialLayoutFactory.Invoke().ToDictionary(c => c.Id);
            foreach (var item in savedItems)
            {
                if (initialItems.TryGetValue(item.Id, out var initial))
                {
                    item.Title = initial.Title;
                    item.CardType = initial.CardType;
                }
            }
            _currentLayout = savedItems;
        }
        else
        {
            _currentLayout = InitialLayoutFactory.Invoke();
        }

        _cardCounter = _currentLayout.Any() ? _currentLayout.Max(c => int.TryParse(c.Id.Split('-').Last(), out var num) ? num : 0) : 0;
        await InvokeAsync(StateHasChanged);
    
        if (_jsModule == null)
        {
            _jsModule = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./_content/MudBlazorCrmApp.Shared.Blazor/js/dashboard-manager.js");
        }
        
        await _jsModule.InvokeVoidAsync("init", ".dashboard-wrapper", _dotNetHelper, _currentLayout);
        await JSRuntime.InvokeVoidAsync("setupDeleteEventDelegation", _dotNetHelper);
    
        await OnLayoutChanged.InvokeAsync();
    }

    private async Task HandleAddCard()
    {
        var (nextX, nextY) = CalculateNextCardPosition();
    
        var newCard = new DashboardCard 
        { 
            Id = $"new-card-{++_cardCounter}",
            Title = "New Card", 
            CardType = "default", 
            X = nextX, 
            Y = nextY, 
            W = 4, 
            H = 5 
        };
        _currentLayout.Add(newCard);
    
        var json = System.Text.Json.JsonSerializer.Serialize(_currentLayout);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", StorageKey, json);
    
        await InvokeAsync(StateHasChanged);
    
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("addCard", newCard);
        }
    
        await OnLayoutChanged.InvokeAsync();
    }

    private (int x, int y) CalculateNextCardPosition()
    {
        if (_currentLayout.Count == 0) return (0, 0);
        const int gridWidth = 12; const int cardWidth = 4;
        int maxY = _currentLayout.Max(c => c.Y + c.H);
        var bottomRowCards = _currentLayout.Where(c => c.Y + c.H == maxY).ToList();
        if (bottomRowCards.Any())
        {
            var rightmostCard = bottomRowCards.OrderByDescending(c => c.X + c.W).First();
            int nextX = rightmostCard.X + rightmostCard.W;
            if (nextX + cardWidth <= gridWidth) { return (nextX, rightmostCard.Y); }
        }
        return (0, maxY);
    }

    [JSInvokable]
    public async Task HandleDeleteCard(string cardId)
    {
        var cardToDelete = _currentLayout.FirstOrDefault(c => c.Id == cardId);
        if (cardToDelete == null) return;

        var parameters = new DialogParameters<ConfirmDeleteDialog>
        {
            { x => x.CardTitle, cardToDelete.Title }
        };

        var dialog = DialogService.Show<ConfirmDeleteDialog>("Confirm Deletion", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _currentLayout.Remove(cardToDelete);
    
            var json = System.Text.Json.JsonSerializer.Serialize(_currentLayout);
            await JSRuntime.InvokeVoidAsync("localStorage.setItem", StorageKey, json);
    
            await RerenderGrid();
            await OnLayoutChanged.InvokeAsync();
        }
    }
    
    private async Task HandleResetLayout()
    {
        _currentLayout = InitialLayoutFactory.Invoke();
        _cardCounter = _currentLayout.Any() ? _currentLayout.Max(c => int.TryParse(c.Id.Split('-').Last(), out var num) ? num : 0) : 0;
        await JSRuntime.InvokeVoidAsync("localStorage.removeItem", StorageKey);
        await RerenderGrid();
        await OnLayoutChanged.InvokeAsync();
    }

    private async Task RerenderGrid()
    {
        await InvokeAsync(StateHasChanged);
        if (_jsModule != null)
        {
            await _jsModule.InvokeVoidAsync("loadData", _currentLayout);
        }
    }

    [JSInvokable]
    public async Task OnLayoutUpdatedFromJS(List<DashboardCard> updatedLayout)
    {
        var dict = _currentLayout.ToDictionary(c => c.Id);
        foreach (var item in updatedLayout)
        {
            if (dict.TryGetValue(item.Id, out var cardToUpdate))
            {
                cardToUpdate.X = item.X;
                cardToUpdate.Y = item.Y;
                cardToUpdate.W = item.W;
                cardToUpdate.H = item.H;
            }
        }
        var json = System.Text.Json.JsonSerializer.Serialize(_currentLayout);
        await JSRuntime.InvokeVoidAsync("localStorage.setItem", StorageKey, json);
    }

    public async ValueTask DisposeAsync()
    {
        if (_jsModule != null)
        {
            try
            {
                await _jsModule.InvokeVoidAsync("destroy");
            }
            catch (JSDisconnectedException)
            {
                // Ignore disconnect errors during disposal
            }
            finally
            {
                await _jsModule.DisposeAsync();
            }
        }
        _dotNetHelper?.Dispose();
    }
}